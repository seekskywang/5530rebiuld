; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\tim6.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\tim6.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\tim6.crf ..\drive\TIM6.c]
                          THUMB

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;73     //֨ʱǷ 3 א׏ؾϱگ˽
;;;74     void TIM3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;75     {
;;;76         static vu16 count1s;
;;;77         
;;;78         if(TIM_GetITStatus(TIM3,TIM_IT_Update)==SET) //ӧԶא׏
000002  4c07              LDR      r4,|L1.32|
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       TIM_GetITStatus
00000c  2801              CMP      r0,#1
00000e  d105              BNE      |L1.28|
;;;79         {
;;;80             TIM_ClearITPendingBit(TIM3,TIM_IT_Update); //ȥԽא׏Ҫ־λ
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       TIM_ClearITPendingBit
;;;81             switch(page_sw)
000018  4802              LDR      r0,|L1.36|
00001a  7800              LDRB     r0,[r0,#0]  ; page_sw
                  |L1.28|
;;;82             {
;;;83     //             case face_menu:
;;;84     //             {                
;;;85     //                 if(pow_sw == pow_on)
;;;86     //                 {
;;;87     //                     count1s++;
;;;88     //                     if(count1s == 1000)
;;;89     //                     {
;;;90     //                         bc_raw += DISS_POW_Current * 1000 * 1/3600;
;;;91     //                         count1s = 0;
;;;92     //                     }
;;;93     //                 }else{
;;;94     //                     bc_raw = 0;
;;;95     //                     count1s = 0;
;;;96     //                 }
;;;97     //             }break;
;;;98     //             case face_cdc:
;;;99     //             {
;;;100    //                 if(mode_sw == mode_pow && cdc_sw == cdc_on)
;;;101    //                 {
;;;102    //                     count1s++;
;;;103    //                     if(count1s == 1000)
;;;104    //                     {
;;;105    //                         bc_raw += DISS_POW_Current * 1000 * 1/3600;
;;;106    //                         count1s = 0;
;;;107    //                     }
;;;108    //                 }else if(cdc_sw == cdc_off){
;;;109    //                     bc_raw = 0;
;;;110    //                     count1s = 0;
;;;111    //                 }
;;;112    //             }break;
;;;113    //             case face_load:
;;;114    //             {
;;;115    //                 if(load_sw == load_on)
;;;116    //                 {
;;;117    //                     count1s++;
;;;118    //                     if(count1s == 1000)
;;;119    //                     {
;;;120    //                         bc_raw += DISS_Current * 1000 * 1/3600;
;;;121    //                         count1s = 0;
;;;122    //                     }
;;;123    //                 }else{
;;;124    //                     bc_raw = 0;
;;;125    //                     count1s = 0;
;;;126    //                 }
;;;127    //             }break;
;;;128    //             case face_graph:
;;;129    //             {
;;;130    //                 if(mode_sw == mode_pow)
;;;131    //                 {
;;;132    //                     if(pow_sw == pow_on)
;;;133    //                     {
;;;134    //                         count1s++;
;;;135    //                         if(count1s == 1000)
;;;136    //                         {
;;;137    //                             bc_raw += DISS_POW_Current * 1000 * 1/3600;
;;;138    //                             count1s = 0;
;;;139    //                         }
;;;140    //                     }else if(mode_sw == mode_pow && cdc_sw == cdc_on)
;;;141    //                     {
;;;142    //                         count1s++;
;;;143    //                         if(count1s == 1000)
;;;144    //                         {
;;;145    //                             bc_raw += DISS_POW_Current * 1000 * 1/3600;
;;;146    //                             count1s = 0;
;;;147    //                         }
;;;148    //                     }
;;;149    //                     else{
;;;150    //                         bc_raw = 0;
;;;151    //                         count1s = 0;
;;;152    //                     }
;;;153    //                 }               
;;;154    //                 
;;;155    //                 if(mode_sw == mode_load)
;;;156    //                 {
;;;157    //                     if(load_sw == load_on)
;;;158    //                     {
;;;159    //                         count1s++;
;;;160    //                         if(count1s == 1000)
;;;161    //                         {
;;;162    //                             GPIO_ResetBits(GPIOC,GPIO_Pin_1);
;;;163    //                             bc_raw += DISS_Current * 1000 * 1/3600;
;;;164    //                             count1s = 0;
;;;165    //                         }
;;;166    //                     }else{
;;;167    //                         bc_raw = 0;
;;;168    //                         count1s = 0;
;;;169    //                     }
;;;170    //                 }
;;;171    //             }break;
;;;172                case face_r:
;;;173                {                               
;;;174    //                     if(oct_sw == oct_on && para_set2 == set_2_on)
;;;175    //                     {
;;;176    //                         stepcount ++;
;;;177    //                         if(stepcount == steptime)
;;;178    //                         {
;;;179    //                             OC_ADD();
;;;180    //                             stepcount = 0;
;;;181    //                         }
;;;182    //                     }               
;;;183                }break;
;;;184            }
;;;185        }    
;;;186        
;;;187    }
00001c  bd10              POP      {r4,pc}
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x40000400
                  |L1.36|
                          DCD      page_sw

                          AREA ||i.TIM3_Int_Init||, CODE, READONLY, ALIGN=2

                  TIM3_Int_Init PROC
;;;53     
;;;54     void TIM3_Int_Init(u16 arr,u16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;55     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;56         TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
;;;57         NVIC_InitTypeDef NVIC_InitStructure;
;;;58         
;;;59         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE); //ÙʹŜ TIM3 ʱד
000006  2101              MOVS     r1,#1
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;60         TIM_TimeBaseInitStructure.TIM_Period = arr; //ؔ֯טװ՘ֵ
00000e  9402              STR      r4,[sp,#8]
;;;61         TIM_TimeBaseInitStructure.TIM_Prescaler=psc; //֨ʱǷؖƵ
000010  f8ad5004          STRH     r5,[sp,#4]
;;;62         TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; //вʏ݆˽ģʽ
000014  2000              MOVS     r0,#0
000016  f8ad0006          STRH     r0,[sp,#6]
;;;63         TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1;
00001a  f8ad000c          STRH     r0,[sp,#0xc]
;;;64         TIM_TimeBaseInit(TIM3,&TIM_TimeBaseInitStructure);// ÚԵʼۯ֨ʱǷ TIM3
00001e  4c0e              LDR      r4,|L2.88|
000020  a901              ADD      r1,sp,#4
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;65         TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE); //ÛՊѭ֨ʱǷ 3 ټтא׏
000028  2201              MOVS     r2,#1
00002a  4611              MOV      r1,r2
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       TIM_ITConfig
;;;66         NVIC_InitStructure.NVIC_IRQChannel=TIM3_IRQn; //֨ʱǷ 3 א׏
000032  211d              MOVS     r1,#0x1d
000034  f88d1000          STRB     r1,[sp,#0]
;;;67         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0x01; //ȀռԅЈܶ 1
000038  2101              MOVS     r1,#1
00003a  f88d1001          STRB     r1,[sp,#1]
;;;68         NVIC_InitStructure.NVIC_IRQChannelSubPriority=0x03; //ЬӦԅЈܶ 3
00003e  2203              MOVS     r2,#3
000040  f88d2002          STRB     r2,[sp,#2]
;;;69         NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
000044  f88d1003          STRB     r1,[sp,#3]
;;;70         NVIC_Init(&NVIC_InitStructure);// ÜԵʼۯ NVIC
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       NVIC_Init
;;;71         TIM_Cmd(TIM3,ENABLE); //ÝʹŜ֨ʱǷ 3
00004e  2101              MOVS     r1,#1
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       TIM_Cmd
;;;72     }
000056  bd7f              POP      {r0-r6,pc}
;;;73     //֨ʱǷ 3 א׏ؾϱگ˽
                          ENDP

                  |L2.88|
                          DCD      0x40000400

;*** Start embedded assembler ***

#line 1 "..\\drive\\TIM6.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_TIM6_c_d8d71895____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_TIM6_c_d8d71895____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_TIM6_c_d8d71895____REVSH|
#line 128
|__asm___6_TIM6_c_d8d71895____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
