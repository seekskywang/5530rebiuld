; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\system_stm32f4xx.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\system_stm32f4xx.crf ..\User\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;509      */
;;;510    static void SetSysClock(void)
000000  2000              MOVS     r0,#0
;;;511    {
;;;512    /******************************************************************************/
;;;513    /*            PLL (clocked by HSE) used as System clock source                */
;;;514    /******************************************************************************/
;;;515      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;516      
;;;517      /* Enable HSE */
;;;518      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000002  4a24              LDR      r2,|L1.148|
000004  6811              LDR      r1,[r2,#0]
000006  f4413180          ORR      r1,r1,#0x10000
00000a  6011              STR      r1,[r2,#0]
;;;519     
;;;520      /* Wait till HSE is ready and if Time out is reached exit */
;;;521      do
;;;522      {
;;;523        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;524        StartUpCounter++;
;;;525      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
00000c  f44f43a0          MOV      r3,#0x5000
                  |L1.16|
000010  6811              LDR      r1,[r2,#0]            ;523
000012  f4013100          AND      r1,r1,#0x20000        ;523
000016  1c40              ADDS     r0,r0,#1              ;524
000018  b909              CBNZ     r1,|L1.30|
00001a  4298              CMP      r0,r3
00001c  d1f8              BNE      |L1.16|
                  |L1.30|
;;;526    
;;;527      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00001e  6810              LDR      r0,[r2,#0]
000020  0380              LSLS     r0,r0,#14
000022  d501              BPL      |L1.40|
;;;528      {
;;;529        HSEStatus = (uint32_t)0x01;
000024  2001              MOVS     r0,#1
000026  e000              B        |L1.42|
                  |L1.40|
;;;530      }
;;;531      else
;;;532      {
;;;533        HSEStatus = (uint32_t)0x00;
000028  2000              MOVS     r0,#0
                  |L1.42|
;;;534      }
;;;535    
;;;536      if (HSEStatus == (uint32_t)0x01)
00002a  2801              CMP      r0,#1
00002c  d131              BNE      |L1.146|
;;;537      {
;;;538        /* Select regulator voltage output Scale 1 mode */
;;;539        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
00002e  4819              LDR      r0,|L1.148|
000030  3040              ADDS     r0,r0,#0x40
000032  6801              LDR      r1,[r0,#0]
000034  f0415180          ORR      r1,r1,#0x10000000
000038  6001              STR      r1,[r0,#0]
;;;540        PWR->CR |= PWR_CR_VOS;
00003a  4817              LDR      r0,|L1.152|
00003c  6801              LDR      r1,[r0,#0]
00003e  f4414140          ORR      r1,r1,#0xc000
000042  6001              STR      r1,[r0,#0]
;;;541    
;;;542        /* HCLK = SYSCLK / 1*/
;;;543        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000044  4813              LDR      r0,|L1.148|
000046  3008              ADDS     r0,r0,#8
000048  6801              LDR      r1,[r0,#0]
00004a  6001              STR      r1,[r0,#0]
;;;544    
;;;545    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
;;;546        /* PCLK2 = HCLK / 2*/
;;;547        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
00004c  6801              LDR      r1,[r0,#0]
00004e  f4414100          ORR      r1,r1,#0x8000
000052  6001              STR      r1,[r0,#0]
;;;548        
;;;549        /* PCLK1 = HCLK / 4*/
;;;550        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
000054  6801              LDR      r1,[r0,#0]
000056  f44151a0          ORR      r1,r1,#0x1400
00005a  6001              STR      r1,[r0,#0]
;;;551    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx */
;;;552    
;;;553    #if defined (STM32F401xx)
;;;554        /* PCLK2 = HCLK / 2*/
;;;555        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;556        
;;;557        /* PCLK1 = HCLK / 4*/
;;;558        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;559    #endif /* STM32F401xx */
;;;560       
;;;561        /* Configure the main PLL */
;;;562        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
00005c  1f01              SUBS     r1,r0,#4
00005e  4b0f              LDR      r3,|L1.156|
000060  600b              STR      r3,[r1,#0]
;;;563                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;564    
;;;565        /* Enable the main PLL */
;;;566        RCC->CR |= RCC_CR_PLLON;
000062  6811              LDR      r1,[r2,#0]
000064  f0417180          ORR      r1,r1,#0x1000000
000068  6011              STR      r1,[r2,#0]
                  |L1.106|
;;;567    
;;;568        /* Wait till the main PLL is ready */
;;;569        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00006a  6811              LDR      r1,[r2,#0]
00006c  0189              LSLS     r1,r1,#6
00006e  d5fc              BPL      |L1.106|
;;;570        {
;;;571        }
;;;572       
;;;573    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
;;;574        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;575        PWR->CR |= PWR_CR_ODEN;
;;;576        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;577        {
;;;578        }
;;;579        PWR->CR |= PWR_CR_ODSWEN;
;;;580        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;581        {
;;;582        }      
;;;583        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;584        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;585    #endif /* STM32F427_437x || STM32F429_439xx  */
;;;586    
;;;587    #if defined (STM32F40_41xxx)     
;;;588        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;589        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
000070  4a0b              LDR      r2,|L1.160|
000072  f2407105          MOV      r1,#0x705
000076  6011              STR      r1,[r2,#0]
;;;590    #endif /* STM32F40_41xxx  */
;;;591    
;;;592    #if defined (STM32F401xx)
;;;593        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;594        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;595    #endif /* STM32F401xx */
;;;596    
;;;597        /* Select the main PLL as system clock source */
;;;598        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000078  6801              LDR      r1,[r0,#0]
00007a  f0210103          BIC      r1,r1,#3
00007e  6001              STR      r1,[r0,#0]
;;;599        RCC->CFGR |= RCC_CFGR_SW_PLL;
000080  6801              LDR      r1,[r0,#0]
000082  f0410102          ORR      r1,r1,#2
000086  6001              STR      r1,[r0,#0]
                  |L1.136|
;;;600    
;;;601        /* Wait till the main PLL is used as system clock source */
;;;602        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000088  6801              LDR      r1,[r0,#0]
00008a  f3c10181          UBFX     r1,r1,#2,#2
00008e  2902              CMP      r1,#2
000090  d1fa              BNE      |L1.136|
                  |L1.146|
;;;603        {
;;;604        }
;;;605      }
;;;606      else
;;;607      { /* If HSE fails to start-up, the application will have wrong clock
;;;608             configuration. User can add here some code to deal with this error */
;;;609      }
;;;610    
;;;611    }
000092  4770              BX       lr
;;;612    
                          ENDP

                  |L1.148|
                          DCD      0x40023800
                  |L1.152|
                          DCD      0x40007000
                  |L1.156|
                          DCD      0x07405419
                  |L1.160|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;453      */
;;;454    void SystemCoreClockUpdate(void)
000000  b530              PUSH     {r4,r5,lr}
;;;455    {
;;;456      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;457      
;;;458      /* Get SYSCLK source -------------------------------------------------------*/
;;;459      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4d1e              LDR      r5,|L2.124|
000004  6828              LDR      r0,[r5,#0]
000006  f000000c          AND      r0,r0,#0xc
;;;460    
;;;461      switch (tmp)
;;;462      {
;;;463        case 0x00:  /* HSI used as system clock source */
;;;464          SystemCoreClock = HSI_VALUE;
00000a  4b1d              LDR      r3,|L2.128|
00000c  491d              LDR      r1,|L2.132|
00000e  b178              CBZ      r0,|L2.48|
;;;465          break;
;;;466        case 0x04:  /* HSE used as system clock source */
;;;467          SystemCoreClock = HSE_VALUE;
000010  105c              ASRS     r4,r3,#1
000012  2804              CMP      r0,#4                 ;461
000014  d00e              BEQ      |L2.52|
000016  2808              CMP      r0,#8                 ;461
000018  d00e              BEQ      |L2.56|
;;;468          break;
;;;469        case 0x08:  /* PLL used as system clock source */
;;;470    
;;;471          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;472             SYSCLK = PLL_VCO / PLL_P
;;;473             */    
;;;474          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
;;;475          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;476          
;;;477          if (pllsource != 0)
;;;478          {
;;;479            /* HSE used as PLL clock source */
;;;480            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;481          }
;;;482          else
;;;483          {
;;;484            /* HSI used as PLL clock source */
;;;485            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
;;;486          }
;;;487    
;;;488          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
;;;489          SystemCoreClock = pllvco/pllp;
;;;490          break;
;;;491        default:
;;;492          SystemCoreClock = HSI_VALUE;
00001a  600b              STR      r3,[r1,#0]  ; SystemCoreClock
                  |L2.28|
;;;493          break;
;;;494      }
;;;495      /* Compute HCLK frequency --------------------------------------------------*/
;;;496      /* Get HCLK prescaler */
;;;497      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
00001c  6828              LDR      r0,[r5,#0]
00001e  4a19              LDR      r2,|L2.132|
000020  f3c01003          UBFX     r0,r0,#4,#4
000024  1d12              ADDS     r2,r2,#4
000026  5c10              LDRB     r0,[r2,r0]
;;;498      /* HCLK frequency */
;;;499      SystemCoreClock >>= tmp;
000028  680a              LDR      r2,[r1,#0]  ; SystemCoreClock
00002a  40c2              LSRS     r2,r2,r0
00002c  600a              STR      r2,[r1,#0]  ; SystemCoreClock
;;;500    }
00002e  bd30              POP      {r4,r5,pc}
                  |L2.48|
000030  600b              STR      r3,[r1,#0]            ;464  ; SystemCoreClock
000032  e7f3              B        |L2.28|
                  |L2.52|
000034  600c              STR      r4,[r1,#0]            ;467  ; SystemCoreClock
000036  e7f1              B        |L2.28|
                  |L2.56|
000038  4a10              LDR      r2,|L2.124|
00003a  1f12              SUBS     r2,r2,#4              ;474
00003c  6810              LDR      r0,[r2,#0]            ;474
00003e  f3c05c80          UBFX     r12,r0,#22,#1         ;474
000042  6810              LDR      r0,[r2,#0]            ;475
000044  f000003f          AND      r0,r0,#0x3f           ;475
000048  f1bc0f00          CMP      r12,#0                ;477
00004c  d006              BEQ      |L2.92|
00004e  fbb4f0f0          UDIV     r0,r4,r0              ;480
000052  6813              LDR      r3,[r2,#0]            ;480
000054  f3c31388          UBFX     r3,r3,#6,#9           ;480
000058  4358              MULS     r0,r3,r0              ;480
00005a  e005              B        |L2.104|
                  |L2.92|
00005c  fbb3f0f0          UDIV     r0,r3,r0              ;485
000060  6813              LDR      r3,[r2,#0]            ;485
000062  f3c31388          UBFX     r3,r3,#6,#9           ;485
000066  4358              MULS     r0,r3,r0              ;485
                  |L2.104|
000068  6812              LDR      r2,[r2,#0]            ;488
00006a  f3c24201          UBFX     r2,r2,#16,#2          ;488
00006e  1c52              ADDS     r2,r2,#1              ;488
000070  0052              LSLS     r2,r2,#1              ;488
000072  fbb0f0f2          UDIV     r0,r0,r2              ;489
000076  6008              STR      r0,[r1,#0]            ;489  ; SystemCoreClock
000078  e7d0              B        |L2.28|
;;;501    
                          ENDP

00007a  0000              DCW      0x0000
                  |L2.124|
                          DCD      0x40023808
                  |L2.128|
                          DCD      0x00f42400
                  |L2.132|
                          DCD      ||.data||

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;376      */
;;;377    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;378    {
;;;379      /* FPU settings ------------------------------------------------------------*/
;;;380      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;381        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  4812              LDR      r0,|L3.76|
000004  6801              LDR      r1,[r0,#0]
000006  f4410170          ORR      r1,r1,#0xf00000
00000a  6001              STR      r1,[r0,#0]
;;;382      #endif
;;;383      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;384      /* Set HSION bit */
;;;385      RCC->CR |= (uint32_t)0x00000001;
00000c  4810              LDR      r0,|L3.80|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410101          ORR      r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;386    
;;;387      /* Reset CFGR register */
;;;388      RCC->CFGR = 0x00000000;
000016  4a0e              LDR      r2,|L3.80|
000018  2100              MOVS     r1,#0
00001a  3208              ADDS     r2,r2,#8
00001c  6011              STR      r1,[r2,#0]
;;;389    
;;;390      /* Reset HSEON, CSSON and PLLON bits */
;;;391      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001e  6802              LDR      r2,[r0,#0]
000020  4b0c              LDR      r3,|L3.84|
000022  401a              ANDS     r2,r2,r3
000024  6002              STR      r2,[r0,#0]
;;;392    
;;;393      /* Reset PLLCFGR register */
;;;394      RCC->PLLCFGR = 0x24003010;
000026  1d03              ADDS     r3,r0,#4
000028  4a0b              LDR      r2,|L3.88|
00002a  601a              STR      r2,[r3,#0]
;;;395    
;;;396      /* Reset HSEBYP bit */
;;;397      RCC->CR &= (uint32_t)0xFFFBFFFF;
00002c  6802              LDR      r2,[r0,#0]
00002e  f4222280          BIC      r2,r2,#0x40000
000032  6002              STR      r2,[r0,#0]
;;;398    
;;;399      /* Disable all interrupts */
;;;400      RCC->CIR = 0x00000000;
000034  4806              LDR      r0,|L3.80|
000036  300c              ADDS     r0,r0,#0xc
000038  6001              STR      r1,[r0,#0]
;;;401    
;;;402    #if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
;;;403      SystemInit_ExtMemCtl(); 
;;;404    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;405             
;;;406      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;407         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;408      SetSysClock();
00003a  f7fffffe          BL       SetSysClock
;;;409    
;;;410      /* Configure the Vector Table location add offset address ------------------*/
;;;411    #ifdef VECT_TAB_SRAM
;;;412      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;413    #else
;;;414      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00003e  4903              LDR      r1,|L3.76|
000040  f04f6000          MOV      r0,#0x8000000
000044  3980              SUBS     r1,r1,#0x80
000046  6008              STR      r0,[r1,#0]
;;;415    #endif
;;;416    }
000048  bd10              POP      {r4,pc}
;;;417    
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0xe000ed88
                  |L3.80|
                          DCD      0x40023800
                  |L3.84|
                          DCD      0xfef6ffff
                  |L3.88|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\User\\system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
