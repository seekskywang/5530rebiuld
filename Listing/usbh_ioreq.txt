; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\usbh_ioreq.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\usbh_ioreq.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\usbh_ioreq.crf ..\USB\STM32_USB_HOST_Library\Core\src\usbh_ioreq.c]
                          THUMB

                          AREA ||i.USBH_BulkReceiveData||, CODE, READONLY, ALIGN=1

                  USBH_BulkReceiveData PROC
;;;277      */
;;;278    USBH_Status USBH_BulkReceiveData( USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;279                                    uint8_t *buff, 
;;;280                                    uint16_t length,
;;;281                                    uint8_t hc_num)
;;;282    {
000002  460c              MOV      r4,r1
000004  4619              MOV      r1,r3
;;;283      pdev->host.hc[hc_num].ep_is_in = 1;   
000006  eb001c41          ADD      r12,r0,r1,LSL #5
00000a  2301              MOVS     r3,#1
00000c  f88c33ae          STRB     r3,[r12,#0x3ae]
;;;284      pdev->host.hc[hc_num].xfer_buff = buff;
000010  f8cc43b8          STR      r4,[r12,#0x3b8]
;;;285      pdev->host.hc[hc_num].xfer_len = length;
000014  f8cc23bc          STR      r2,[r12,#0x3bc]
;;;286      
;;;287    
;;;288      if( pdev->host.hc[hc_num].toggle_in == 0)
000018  f89c23c4          LDRB     r2,[r12,#0x3c4]
00001c  b132              CBZ      r2,|L1.44|
;;;289      {
;;;290        pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
;;;291      }
;;;292      else
;;;293      {
;;;294        pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
00001e  2202              MOVS     r2,#2
000020  f88c23b4          STRB     r2,[r12,#0x3b4]
                  |L1.36|
;;;295      }
;;;296    
;;;297      HCD_SubmitRequest (pdev , hc_num);  
000024  f7fffffe          BL       HCD_SubmitRequest
;;;298      return USBH_OK;
000028  2000              MOVS     r0,#0
;;;299    }
00002a  bd10              POP      {r4,pc}
                  |L1.44|
00002c  2200              MOVS     r2,#0                 ;290
00002e  f88c23b4          STRB     r2,[r12,#0x3b4]       ;290
000032  e7f7              B        |L1.36|
;;;300    
                          ENDP


                          AREA ||i.USBH_BulkSendData||, CODE, READONLY, ALIGN=1

                  USBH_BulkSendData PROC
;;;244      */
;;;245    USBH_Status USBH_BulkSendData ( USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;246                                    uint8_t *buff, 
;;;247                                    uint16_t length,
;;;248                                    uint8_t hc_num)
;;;249    { 
000002  460c              MOV      r4,r1
000004  4619              MOV      r1,r3
;;;250      pdev->host.hc[hc_num].ep_is_in = 0;
000006  eb001c41          ADD      r12,r0,r1,LSL #5
00000a  2300              MOVS     r3,#0
00000c  f88c33ae          STRB     r3,[r12,#0x3ae]
;;;251      pdev->host.hc[hc_num].xfer_buff = buff;
000010  f8cc43b8          STR      r4,[r12,#0x3b8]
;;;252      pdev->host.hc[hc_num].xfer_len = length;  
000014  f8cc23bc          STR      r2,[r12,#0x3bc]
;;;253    
;;;254     /* Set the Data Toggle bit as per the Flag */
;;;255      if ( pdev->host.hc[hc_num].toggle_out == 0)
000018  f89c23c5          LDRB     r2,[r12,#0x3c5]
00001c  b132              CBZ      r2,|L2.44|
;;;256      { /* Put the PID 0 */
;;;257          pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
;;;258      }
;;;259     else
;;;260     { /* Put the PID 1 */
;;;261          pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
00001e  2202              MOVS     r2,#2
000020  f88c23b4          STRB     r2,[r12,#0x3b4]
                  |L2.36|
;;;262     }
;;;263    
;;;264      HCD_SubmitRequest (pdev , hc_num);   
000024  f7fffffe          BL       HCD_SubmitRequest
;;;265      return USBH_OK;
000028  2000              MOVS     r0,#0
;;;266    }
00002a  bd10              POP      {r4,pc}
                  |L2.44|
00002c  f88c33b4          STRB     r3,[r12,#0x3b4]       ;257
000030  e7f8              B        |L2.36|
;;;267    
                          ENDP


                          AREA ||i.USBH_CtlReceiveData||, CODE, READONLY, ALIGN=1

                  USBH_CtlReceiveData PROC
;;;217      */
;;;218    USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;219                                    uint8_t* buff, 
;;;220                                    uint16_t length,
;;;221                                    uint8_t hc_num)
;;;222    {
000002  460c              MOV      r4,r1
000004  4619              MOV      r1,r3
;;;223    
;;;224      pdev->host.hc[hc_num].ep_is_in = 1;
000006  eb001c41          ADD      r12,r0,r1,LSL #5
00000a  2301              MOVS     r3,#1
00000c  f88c33ae          STRB     r3,[r12,#0x3ae]
;;;225      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
000010  2302              MOVS     r3,#2
000012  f88c33b4          STRB     r3,[r12,#0x3b4]
;;;226      pdev->host.hc[hc_num].xfer_buff = buff;
000016  f8cc43b8          STR      r4,[r12,#0x3b8]
;;;227      pdev->host.hc[hc_num].xfer_len = length;  
00001a  f8cc23bc          STR      r2,[r12,#0x3bc]
;;;228    
;;;229      HCD_SubmitRequest (pdev , hc_num);   
00001e  f7fffffe          BL       HCD_SubmitRequest
;;;230      
;;;231      return USBH_OK;
000022  2000              MOVS     r0,#0
;;;232      
;;;233    }
000024  bd10              POP      {r4,pc}
;;;234    
                          ENDP


                          AREA ||i.USBH_CtlReq||, CODE, READONLY, ALIGN=1

                  USBH_CtlReq PROC
;;;104      */
;;;105    USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;106                                 USBH_HOST           *phost, 
;;;107                                 uint8_t             *buff,
;;;108                                 uint16_t            length)
;;;109    {
000002  460c              MOV      r4,r1
000004  4611              MOV      r1,r2
000006  461a              MOV      r2,r3
;;;110      USBH_Status status;
;;;111      status = USBH_BUSY;
000008  2501              MOVS     r5,#1
;;;112      
;;;113      switch (phost->RequestState)
00000a  78e0              LDRB     r0,[r4,#3]
00000c  2801              CMP      r0,#1
00000e  d002              BEQ      |L4.22|
000010  2802              CMP      r0,#2
000012  d119              BNE      |L4.72|
000014  e005              B        |L4.34|
                  |L4.22|
;;;114      {
;;;115      case CMD_SEND:
;;;116        /* Start a SETUP transfer */
;;;117        USBH_SubmitSetupRequest(phost, buff, length);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USBH_SubmitSetupRequest
;;;118        phost->RequestState = CMD_WAIT;
00001c  2002              MOVS     r0,#2
00001e  70e0              STRB     r0,[r4,#3]
;;;119        status = USBH_BUSY;
;;;120        break;
000020  e012              B        |L4.72|
                  |L4.34|
;;;121        
;;;122      case CMD_WAIT:
;;;123         if (phost->Control.state == CTRL_COMPLETE ) 
000022  7f20              LDRB     r0,[r4,#0x1c]
000024  2101              MOVS     r1,#1                 ;111
000026  280d              CMP      r0,#0xd
000028  d004              BEQ      |L4.52|
;;;124        {
;;;125          /* Commands successfully sent and Response Received  */       
;;;126          phost->RequestState = CMD_SEND;
;;;127          phost->Control.state =CTRL_IDLE;  
;;;128          status = USBH_OK;      
;;;129        }
;;;130        else if  (phost->Control.state == CTRL_ERROR)
00002a  280b              CMP      r0,#0xb
00002c  d007              BEQ      |L4.62|
;;;131        {
;;;132          /* Failure Mode */
;;;133          phost->RequestState = CMD_SEND;
;;;134          status = USBH_FAIL;
;;;135        }   
;;;136         else if  (phost->Control.state == CTRL_STALLED )
00002e  280c              CMP      r0,#0xc
000030  d008              BEQ      |L4.68|
000032  e009              B        |L4.72|
                  |L4.52|
000034  70e1              STRB     r1,[r4,#3]            ;126
000036  2000              MOVS     r0,#0                 ;127
000038  7720              STRB     r0,[r4,#0x1c]         ;127
00003a  2500              MOVS     r5,#0                 ;128
00003c  e004              B        |L4.72|
                  |L4.62|
00003e  70e1              STRB     r1,[r4,#3]            ;133
000040  2502              MOVS     r5,#2                 ;134
000042  e001              B        |L4.72|
                  |L4.68|
;;;137        {
;;;138          /* Commands successfully sent and Response Received  */       
;;;139          phost->RequestState = CMD_SEND;
000044  70e1              STRB     r1,[r4,#3]
;;;140          status = USBH_NOT_SUPPORTED;
000046  2503              MOVS     r5,#3
                  |L4.72|
;;;141        }
;;;142        break;
;;;143        
;;;144      default:
;;;145        break; 
;;;146      }
;;;147      return status;
000048  4628              MOV      r0,r5
;;;148    }
00004a  bd70              POP      {r4-r6,pc}
;;;149    
                          ENDP


                          AREA ||i.USBH_CtlSendData||, CODE, READONLY, ALIGN=1

                  USBH_CtlSendData PROC
;;;178      */
;;;179    USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;180                                    uint8_t *buff, 
;;;181                                    uint16_t length,
;;;182                                    uint8_t hc_num)
;;;183    {
000002  460c              MOV      r4,r1
000004  4619              MOV      r1,r3
;;;184      pdev->host.hc[hc_num].ep_is_in = 0;
000006  eb001c41          ADD      r12,r0,r1,LSL #5
00000a  2300              MOVS     r3,#0
00000c  f88c33ae          STRB     r3,[r12,#0x3ae]
;;;185      pdev->host.hc[hc_num].xfer_buff = buff;
000010  f8cc43b8          STR      r4,[r12,#0x3b8]
;;;186      pdev->host.hc[hc_num].xfer_len = length;
000014  f8cc23bc          STR      r2,[r12,#0x3bc]
;;;187     
;;;188      if ( length == 0 )
000018  b912              CBNZ     r2,|L5.32|
;;;189      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
;;;190        pdev->host.hc[hc_num].toggle_out = 1;   
00001a  2201              MOVS     r2,#1
00001c  f88c23c5          STRB     r2,[r12,#0x3c5]
                  |L5.32|
;;;191      }
;;;192     
;;;193     /* Set the Data Toggle bit as per the Flag */
;;;194      if ( pdev->host.hc[hc_num].toggle_out == 0)
000020  f89c23c5          LDRB     r2,[r12,#0x3c5]
000024  b132              CBZ      r2,|L5.52|
;;;195      { /* Put the PID 0 */
;;;196          pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
;;;197      }
;;;198     else
;;;199     { /* Put the PID 1 */
;;;200          pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
000026  2202              MOVS     r2,#2
000028  f88c23b4          STRB     r2,[r12,#0x3b4]
                  |L5.44|
;;;201     }
;;;202    
;;;203      HCD_SubmitRequest (pdev , hc_num);   
00002c  f7fffffe          BL       HCD_SubmitRequest
;;;204       
;;;205      return USBH_OK;
000030  2000              MOVS     r0,#0
;;;206    }
000032  bd10              POP      {r4,pc}
                  |L5.52|
000034  f88c33b4          STRB     r3,[r12,#0x3b4]       ;196
000038  e7f8              B        |L5.44|
;;;207    
                          ENDP


                          AREA ||i.USBH_CtlSendSetup||, CODE, READONLY, ALIGN=1

                  USBH_CtlSendSetup PROC
;;;157      */
;;;158    USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;159                                    uint8_t *buff, 
;;;160                                    uint8_t hc_num){
000002  468c              MOV      r12,r1
000004  4611              MOV      r1,r2
;;;161      pdev->host.hc[hc_num].ep_is_in = 0;
000006  eb001341          ADD      r3,r0,r1,LSL #5
00000a  f503736b          ADD      r3,r3,#0x3ac
00000e  2200              MOVS     r2,#0
000010  709a              STRB     r2,[r3,#2]
;;;162      pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
000012  f04f0203          MOV      r2,#3
000016  721a              STRB     r2,[r3,#8]
;;;163      pdev->host.hc[hc_num].xfer_buff = buff;
000018  f8c3c00c          STR      r12,[r3,#0xc]
;;;164      pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
00001c  f04f0208          MOV      r2,#8
000020  611a              STR      r2,[r3,#0x10]
;;;165    
;;;166      return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
000022  f7fffffe          BL       HCD_SubmitRequest
000026  b2c0              UXTB     r0,r0
;;;167    }
000028  bd10              POP      {r4,pc}
;;;168    
                          ENDP


                          AREA ||i.USBH_InterruptReceiveData||, CODE, READONLY, ALIGN=1

                  USBH_InterruptReceiveData PROC
;;;310      */
;;;311    USBH_Status USBH_InterruptReceiveData( USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;312                                    uint8_t *buff, 
;;;313                                    uint8_t length,
;;;314                                    uint8_t hc_num)
;;;315    {
000002  468c              MOV      r12,r1
000004  4619              MOV      r1,r3
;;;316    
;;;317      pdev->host.hc[hc_num].ep_is_in = 1;  
000006  eb001441          ADD      r4,r0,r1,LSL #5
00000a  2301              MOVS     r3,#1
00000c  f88433ae          STRB     r3,[r4,#0x3ae]
;;;318      pdev->host.hc[hc_num].xfer_buff = buff;
000010  f8c4c3b8          STR      r12,[r4,#0x3b8]
;;;319      pdev->host.hc[hc_num].xfer_len = length;
000014  f8c423bc          STR      r2,[r4,#0x3bc]
;;;320      
;;;321    
;;;322      
;;;323      if(pdev->host.hc[hc_num].toggle_in == 0)
000018  f89423c4          LDRB     r2,[r4,#0x3c4]
00001c  b152              CBZ      r2,|L7.52|
;;;324      {
;;;325        pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
;;;326      }
;;;327      else
;;;328      {
;;;329        pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
00001e  2302              MOVS     r3,#2
000020  f88433b4          STRB     r3,[r4,#0x3b4]
                  |L7.36|
;;;330      }
;;;331    
;;;332      /* toggle DATA PID */
;;;333      pdev->host.hc[hc_num].toggle_in ^= 1;  
000024  f0820201          EOR      r2,r2,#1
000028  f88423c4          STRB     r2,[r4,#0x3c4]
;;;334      
;;;335      HCD_SubmitRequest (pdev , hc_num);  
00002c  f7fffffe          BL       HCD_SubmitRequest
;;;336      
;;;337      return USBH_OK;
000030  2000              MOVS     r0,#0
;;;338    }
000032  bd10              POP      {r4,pc}
                  |L7.52|
000034  2300              MOVS     r3,#0                 ;325
000036  f88433b4          STRB     r3,[r4,#0x3b4]        ;325
00003a  e7f3              B        |L7.36|
;;;339    
                          ENDP


                          AREA ||i.USBH_InterruptSendData||, CODE, READONLY, ALIGN=1

                  USBH_InterruptSendData PROC
;;;348      */
;;;349    USBH_Status USBH_InterruptSendData( USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;350                                    uint8_t *buff, 
;;;351                                    uint8_t length,
;;;352                                    uint8_t hc_num)
;;;353    {
000002  468c              MOV      r12,r1
000004  4619              MOV      r1,r3
;;;354    
;;;355      pdev->host.hc[hc_num].ep_is_in = 0;  
000006  eb001441          ADD      r4,r0,r1,LSL #5
00000a  2300              MOVS     r3,#0
00000c  f88433ae          STRB     r3,[r4,#0x3ae]
;;;356      pdev->host.hc[hc_num].xfer_buff = buff;
000010  f8c4c3b8          STR      r12,[r4,#0x3b8]
;;;357      pdev->host.hc[hc_num].xfer_len = length;
000014  f8c423bc          STR      r2,[r4,#0x3bc]
;;;358      
;;;359      if(pdev->host.hc[hc_num].toggle_in == 0)
000018  f89423c4          LDRB     r2,[r4,#0x3c4]
00001c  b152              CBZ      r2,|L8.52|
;;;360      {
;;;361        pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
;;;362      }
;;;363      else
;;;364      {
;;;365        pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
00001e  2302              MOVS     r3,#2
000020  f88433b4          STRB     r3,[r4,#0x3b4]
                  |L8.36|
;;;366      }
;;;367    
;;;368      pdev->host.hc[hc_num].toggle_in ^= 1;  
000024  f0820201          EOR      r2,r2,#1
000028  f88423c4          STRB     r2,[r4,#0x3c4]
;;;369      
;;;370      HCD_SubmitRequest (pdev , hc_num);  
00002c  f7fffffe          BL       HCD_SubmitRequest
;;;371      
;;;372      return USBH_OK;
000030  2000              MOVS     r0,#0
;;;373    }
000032  bd10              POP      {r4,pc}
                  |L8.52|
000034  f88433b4          STRB     r3,[r4,#0x3b4]        ;361
000038  e7f4              B        |L8.36|
;;;374    
                          ENDP


                          AREA ||i.USBH_IsocReceiveData||, CODE, READONLY, ALIGN=1

                  USBH_IsocReceiveData PROC
;;;412      */
;;;413    USBH_Status USBH_IsocReceiveData( USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;414                                    uint8_t *buff, 
;;;415                                    uint32_t length,
;;;416                                    uint8_t hc_num)
;;;417    {    
000002  460c              MOV      r4,r1
000004  4619              MOV      r1,r3
;;;418      
;;;419      pdev->host.hc[hc_num].ep_is_in = 1;  
000006  eb001c41          ADD      r12,r0,r1,LSL #5
00000a  2301              MOVS     r3,#1
00000c  f88c33ae          STRB     r3,[r12,#0x3ae]
;;;420      pdev->host.hc[hc_num].xfer_buff = buff;
000010  f8cc43b8          STR      r4,[r12,#0x3b8]
;;;421      pdev->host.hc[hc_num].xfer_len = length;
000014  f8cc23bc          STR      r2,[r12,#0x3bc]
;;;422      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
000018  2200              MOVS     r2,#0
00001a  f88c23b4          STRB     r2,[r12,#0x3b4]
;;;423      
;;;424    
;;;425      HCD_SubmitRequest (pdev , hc_num);  
00001e  f7fffffe          BL       HCD_SubmitRequest
;;;426      
;;;427      return USBH_OK;
000022  2000              MOVS     r0,#0
;;;428    }
000024  bd10              POP      {r4,pc}
;;;429    
                          ENDP


                          AREA ||i.USBH_IsocSendData||, CODE, READONLY, ALIGN=1

                  USBH_IsocSendData PROC
;;;438      */
;;;439    USBH_Status USBH_IsocSendData( USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;440                                    uint8_t *buff, 
;;;441                                    uint32_t length,
;;;442                                    uint8_t hc_num)
;;;443    {
000002  460c              MOV      r4,r1
000004  4619              MOV      r1,r3
;;;444      
;;;445      pdev->host.hc[hc_num].ep_is_in = 0;  
000006  eb001c41          ADD      r12,r0,r1,LSL #5
00000a  2300              MOVS     r3,#0
00000c  f88c33ae          STRB     r3,[r12,#0x3ae]
;;;446      pdev->host.hc[hc_num].xfer_buff = buff;
000010  f8cc43b8          STR      r4,[r12,#0x3b8]
;;;447      pdev->host.hc[hc_num].xfer_len = length;
000014  f8cc23bc          STR      r2,[r12,#0x3bc]
;;;448      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
000018  f88c33b4          STRB     r3,[r12,#0x3b4]
;;;449      
;;;450      HCD_SubmitRequest (pdev , hc_num);  
00001c  f7fffffe          BL       HCD_SubmitRequest
;;;451      
;;;452      return USBH_OK;
000020  2000              MOVS     r0,#0
;;;453    }
000022  bd10              POP      {r4,pc}
;;;454    
                          ENDP


                          AREA ||i.USBH_SubmitSetupRequest||, CODE, READONLY, ALIGN=1

                  USBH_SubmitSetupRequest PROC
;;;385    */
;;;386    static USBH_Status USBH_SubmitSetupRequest(USBH_HOST *phost,
000000  7803              LDRB     r3,[r0,#0]
;;;387                                               uint8_t* buff, 
;;;388                                               uint16_t length)
;;;389    {
;;;390      
;;;391      /* Save Global State */
;;;392      phost->gStateBkp =   phost->gState; 
000002  7043              STRB     r3,[r0,#1]
;;;393      
;;;394      /* Prepare the Transactions */
;;;395      phost->gState = HOST_CTRL_XFER;
000004  2307              MOVS     r3,#7
000006  7003              STRB     r3,[r0,#0]
;;;396      phost->Control.buff = buff; 
000008  6081              STR      r1,[r0,#8]
;;;397      phost->Control.length = length;
00000a  8182              STRH     r2,[r0,#0xc]
;;;398      phost->Control.state = CTRL_SETUP;  
00000c  2101              MOVS     r1,#1
00000e  7701              STRB     r1,[r0,#0x1c]
;;;399    
;;;400      return USBH_OK;  
000010  2000              MOVS     r0,#0
;;;401    }
000012  4770              BX       lr
;;;402    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\USB\\STM32_USB_HOST_Library\\Core\\src\\usbh_ioreq.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_usbh_ioreq_c_4b12c4a6____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_usbh_ioreq_c_4b12c4a6____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_usbh_ioreq_c_4b12c4a6____REVSH|
#line 128
|__asm___12_usbh_ioreq_c_4b12c4a6____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
