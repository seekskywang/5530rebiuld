; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_hash_sha1.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_hash_sha1.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\output\stm32f4xx_hash_sha1.crf --no_multibyte_chars ..\Libraries\FWlib\src\stm32f4xx_hash_sha1.c]
                          THUMB

                          AREA ||i.HASH_SHA1||, CODE, READONLY, ALIGN=1

                  HASH_SHA1 PROC
;;;92       */
;;;93     ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;94     {
000004  b08f              SUB      sp,sp,#0x3c
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
00000a  4616              MOV      r6,r2
;;;95       HASH_InitTypeDef SHA1_HASH_InitStructure;
;;;96       HASH_MsgDigest SHA1_MessageDigest;
;;;97       __IO uint16_t nbvalidbitsdata = 0;
00000c  f04f0900          MOV      r9,#0
000010  f8cd9008          STR      r9,[sp,#8]
;;;98       uint32_t i = 0;
000014  2500              MOVS     r5,#0
;;;99       __IO uint32_t counter = 0;
000016  f8cd9004          STR      r9,[sp,#4]
;;;100      uint32_t busystatus = 0;
;;;101      ErrorStatus status = SUCCESS;
00001a  2701              MOVS     r7,#1
;;;102      uint32_t inputaddr  = (uint32_t)Input;
;;;103      uint32_t outputaddr = (uint32_t)Output;
;;;104    
;;;105      /* Number of valid bits in last word of the Input data */
;;;106      nbvalidbitsdata = 8 * (Ilen % 4);
00001c  ea4f7088          LSL      r0,r8,#30
000020  0ec0              LSRS     r0,r0,#27
000022  9002              STR      r0,[sp,#8]
;;;107    
;;;108      /* HASH peripheral initialization */
;;;109      HASH_DeInit();
000024  f7fffffe          BL       HASH_DeInit
;;;110    
;;;111      /* HASH Configuration */
;;;112      SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
000028  f8cd902c          STR      r9,[sp,#0x2c]
;;;113      SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
00002c  f8cd9030          STR      r9,[sp,#0x30]
;;;114      SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000030  2020              MOVS     r0,#0x20
000032  900d              STR      r0,[sp,#0x34]
;;;115      HASH_Init(&SHA1_HASH_InitStructure);
000034  a80b              ADD      r0,sp,#0x2c
000036  f7fffffe          BL       HASH_Init
;;;116    
;;;117      /* Configure the number of valid bits in last word of the data */
;;;118      HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
00003a  f8bd0008          LDRH     r0,[sp,#8]
00003e  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;119    
;;;120      /* Write the Input block in the IN FIFO */
;;;121      for(i=0; i<Ilen; i+=4)
000042  e004              B        |L1.78|
                  |L1.68|
;;;122      {
;;;123        HASH_DataIn(*(uint32_t*)inputaddr);
000044  6820              LDR      r0,[r4,#0]
000046  f7fffffe          BL       HASH_DataIn
;;;124        inputaddr+=4;
00004a  1d24              ADDS     r4,r4,#4
00004c  1d2d              ADDS     r5,r5,#4              ;121
                  |L1.78|
00004e  4545              CMP      r5,r8                 ;121
000050  d3f8              BCC      |L1.68|
;;;125      }
;;;126    
;;;127      /* Start the HASH processor */
;;;128      HASH_StartDigest();
000052  f7fffffe          BL       HASH_StartDigest
;;;129    
;;;130      /* wait until the Busy flag is RESET */
;;;131      do
;;;132      {
;;;133        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
;;;134        counter++;
;;;135      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
000056  f44f3480          MOV      r4,#0x10000
                  |L1.90|
00005a  2008              MOVS     r0,#8                 ;133
00005c  f7fffffe          BL       HASH_GetFlagStatus
000060  9901              LDR      r1,[sp,#4]            ;134
000062  1c49              ADDS     r1,r1,#1              ;134
000064  9101              STR      r1,[sp,#4]            ;134
000066  9901              LDR      r1,[sp,#4]
000068  42a1              CMP      r1,r4
00006a  d001              BEQ      |L1.112|
00006c  2800              CMP      r0,#0
00006e  d1f4              BNE      |L1.90|
                  |L1.112|
;;;136    
;;;137      if (busystatus != RESET)
000070  b108              CBZ      r0,|L1.118|
;;;138      {
;;;139         status = ERROR;
000072  2700              MOVS     r7,#0
000074  e011              B        |L1.154|
                  |L1.118|
;;;140      }
;;;141      else
;;;142      {
;;;143        /* Read the message digest */
;;;144        HASH_GetDigest(&SHA1_MessageDigest);
000076  a803              ADD      r0,sp,#0xc
000078  f7fffffe          BL       HASH_GetDigest
;;;145        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
00007c  9803              LDR      r0,[sp,#0xc]
00007e  ba00              REV      r0,r0
000080  6030              STR      r0,[r6,#0]
;;;146        outputaddr+=4;
;;;147        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
000082  9804              LDR      r0,[sp,#0x10]
000084  ba00              REV      r0,r0
000086  6070              STR      r0,[r6,#4]
;;;148        outputaddr+=4;
;;;149        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
000088  9805              LDR      r0,[sp,#0x14]
00008a  ba00              REV      r0,r0
00008c  60b0              STR      r0,[r6,#8]
;;;150        outputaddr+=4;
;;;151        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
00008e  9806              LDR      r0,[sp,#0x18]
000090  ba00              REV      r0,r0
000092  60f0              STR      r0,[r6,#0xc]
;;;152        outputaddr+=4;
;;;153        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
000094  9807              LDR      r0,[sp,#0x1c]
000096  ba00              REV      r0,r0
000098  6130              STR      r0,[r6,#0x10]
                  |L1.154|
;;;154      }
;;;155      return status;
;;;156    }
00009a  b00f              ADD      sp,sp,#0x3c
00009c  4638              MOV      r0,r7                 ;155
00009e  e8bd83f0          POP      {r4-r9,pc}
;;;157    
                          ENDP


                          AREA ||i.HMAC_SHA1||, CODE, READONLY, ALIGN=1

                  HMAC_SHA1 PROC
;;;168      */
;;;169    ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;170                          uint32_t Ilen, uint8_t Output[20])
;;;171    {
000004  b08f              SUB      sp,sp,#0x3c
000006  460f              MOV      r7,r1
000008  f8dd9070          LDR      r9,[sp,#0x70]
00000c  4614              MOV      r4,r2
00000e  469b              MOV      r11,r3
;;;172      HASH_InitTypeDef SHA1_HASH_InitStructure;
;;;173      HASH_MsgDigest SHA1_MessageDigest;
;;;174      __IO uint16_t nbvalidbitsdata = 0;
000010  f04f0a00          MOV      r10,#0
000014  f8cda008          STR      r10,[sp,#8]
;;;175      __IO uint16_t nbvalidbitskey = 0;
000018  f8cda004          STR      r10,[sp,#4]
;;;176      uint32_t i = 0;
00001c  2600              MOVS     r6,#0
;;;177      __IO uint32_t counter = 0;
00001e  f8cda000          STR      r10,[sp,#0]
;;;178      uint32_t busystatus = 0;
;;;179      ErrorStatus status = SUCCESS;
000022  f04f0801          MOV      r8,#1
;;;180      uint32_t keyaddr    = (uint32_t)Key;
000026  9d0f              LDR      r5,[sp,#0x3c]
;;;181      uint32_t inputaddr  = (uint32_t)Input;
;;;182      uint32_t outputaddr = (uint32_t)Output;
;;;183    
;;;184      /* Number of valid bits in last word of the Input data */
;;;185      nbvalidbitsdata = 8 * (Ilen % 4);
000028  ea4f708b          LSL      r0,r11,#30
00002c  0ec0              LSRS     r0,r0,#27
00002e  9002              STR      r0,[sp,#8]
;;;186    
;;;187      /* Number of valid bits in last word of the Key */
;;;188      nbvalidbitskey = 8 * (Keylen % 4);
000030  07b8              LSLS     r0,r7,#30
000032  0ec0              LSRS     r0,r0,#27
000034  9001              STR      r0,[sp,#4]
;;;189    
;;;190      /* HASH peripheral initialization */
;;;191      HASH_DeInit();
000036  f7fffffe          BL       HASH_DeInit
;;;192    
;;;193      /* HASH Configuration */
;;;194      SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
00003a  f8cda02c          STR      r10,[sp,#0x2c]
;;;195      SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
00003e  2040              MOVS     r0,#0x40
000040  900c              STR      r0,[sp,#0x30]
;;;196      SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000042  2020              MOVS     r0,#0x20
000044  900d              STR      r0,[sp,#0x34]
;;;197      if(Keylen > 64)
000046  2f40              CMP      r7,#0x40
000048  d902              BLS      |L2.80|
;;;198      {
;;;199        /* HMAC long Key */
;;;200        SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
00004a  02c0              LSLS     r0,r0,#11
00004c  900e              STR      r0,[sp,#0x38]
00004e  e001              B        |L2.84|
                  |L2.80|
;;;201      }
;;;202      else
;;;203      {
;;;204        /* HMAC short Key */
;;;205        SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
000050  f8cda038          STR      r10,[sp,#0x38]
                  |L2.84|
;;;206      }
;;;207      HASH_Init(&SHA1_HASH_InitStructure);
000054  a80b              ADD      r0,sp,#0x2c
000056  f7fffffe          BL       HASH_Init
;;;208    
;;;209      /* Configure the number of valid bits in last word of the Key */
;;;210      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
00005a  f8bd0004          LDRH     r0,[sp,#4]
00005e  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;211    
;;;212      /* Write the Key */
;;;213      for(i=0; i<Keylen; i+=4)
000062  e004              B        |L2.110|
                  |L2.100|
;;;214      {
;;;215        HASH_DataIn(*(uint32_t*)keyaddr);
000064  6828              LDR      r0,[r5,#0]
000066  f7fffffe          BL       HASH_DataIn
;;;216        keyaddr+=4;
00006a  1d2d              ADDS     r5,r5,#4
00006c  1d36              ADDS     r6,r6,#4              ;213
                  |L2.110|
00006e  42be              CMP      r6,r7                 ;213
000070  d3f8              BCC      |L2.100|
;;;217      }
;;;218    
;;;219      /* Start the HASH processor */
;;;220      HASH_StartDigest();
000072  f7fffffe          BL       HASH_StartDigest
000076  f44f3580          MOV      r5,#0x10000           ;200
                  |L2.122|
;;;221    
;;;222      /* wait until the Busy flag is RESET */
;;;223      do
;;;224      {
;;;225        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
00007a  2008              MOVS     r0,#8
00007c  f7fffffe          BL       HASH_GetFlagStatus
;;;226        counter++;
000080  9900              LDR      r1,[sp,#0]
000082  1c49              ADDS     r1,r1,#1
000084  9100              STR      r1,[sp,#0]
;;;227      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
000086  9900              LDR      r1,[sp,#0]
000088  42a9              CMP      r1,r5
00008a  d001              BEQ      |L2.144|
00008c  2800              CMP      r0,#0
00008e  d1f4              BNE      |L2.122|
                  |L2.144|
;;;228    
;;;229      if (busystatus != RESET)
000090  b110              CBZ      r0,|L2.152|
;;;230      {
;;;231         status = ERROR;
000092  f04f0800          MOV      r8,#0
000096  e057              B        |L2.328|
                  |L2.152|
;;;232      }
;;;233      else
;;;234      {
;;;235        /* Configure the number of valid bits in last word of the Input data */
;;;236        HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
000098  f8bd0008          LDRH     r0,[sp,#8]
00009c  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;237    
;;;238        /* Write the Input block in the IN FIFO */
;;;239        for(i=0; i<Ilen; i+=4)
0000a0  2600              MOVS     r6,#0
0000a2  e004              B        |L2.174|
                  |L2.164|
;;;240        {
;;;241          HASH_DataIn(*(uint32_t*)inputaddr);
0000a4  6820              LDR      r0,[r4,#0]
0000a6  f7fffffe          BL       HASH_DataIn
;;;242          inputaddr+=4;
0000aa  1d24              ADDS     r4,r4,#4
0000ac  1d36              ADDS     r6,r6,#4              ;239
                  |L2.174|
0000ae  455e              CMP      r6,r11                ;239
0000b0  d3f8              BCC      |L2.164|
;;;243        }
;;;244    
;;;245        /* Start the HASH processor */
;;;246        HASH_StartDigest();
0000b2  f7fffffe          BL       HASH_StartDigest
;;;247    
;;;248    
;;;249        /* wait until the Busy flag is RESET */
;;;250        counter =0;
0000b6  f8cda000          STR      r10,[sp,#0]
                  |L2.186|
;;;251        do
;;;252        {
;;;253          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000ba  2008              MOVS     r0,#8
0000bc  f7fffffe          BL       HASH_GetFlagStatus
;;;254          counter++;
0000c0  9900              LDR      r1,[sp,#0]
0000c2  1c49              ADDS     r1,r1,#1
0000c4  9100              STR      r1,[sp,#0]
;;;255        }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
0000c6  9900              LDR      r1,[sp,#0]
0000c8  42a9              CMP      r1,r5
0000ca  d001              BEQ      |L2.208|
0000cc  2800              CMP      r0,#0
0000ce  d1f4              BNE      |L2.186|
                  |L2.208|
;;;256    
;;;257        if (busystatus != RESET)
0000d0  b110              CBZ      r0,|L2.216|
;;;258        {
;;;259          status = ERROR;
0000d2  f04f0800          MOV      r8,#0
0000d6  e037              B        |L2.328|
                  |L2.216|
;;;260        }
;;;261        else
;;;262        {  
;;;263          /* Configure the number of valid bits in last word of the Key */
;;;264          HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
0000d8  f8bd0004          LDRH     r0,[sp,#4]
0000dc  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;265    
;;;266          /* Write the Key */
;;;267          keyaddr = (uint32_t)Key;
0000e0  9c0f              LDR      r4,[sp,#0x3c]
;;;268          for(i=0; i<Keylen; i+=4)
0000e2  2600              MOVS     r6,#0
0000e4  e004              B        |L2.240|
                  |L2.230|
;;;269          {
;;;270            HASH_DataIn(*(uint32_t*)keyaddr);
0000e6  6820              LDR      r0,[r4,#0]
0000e8  f7fffffe          BL       HASH_DataIn
;;;271            keyaddr+=4;
0000ec  1d24              ADDS     r4,r4,#4
0000ee  1d36              ADDS     r6,r6,#4              ;268
                  |L2.240|
0000f0  42be              CMP      r6,r7                 ;268
0000f2  d3f8              BCC      |L2.230|
;;;272          }
;;;273    
;;;274          /* Start the HASH processor */
;;;275          HASH_StartDigest();
0000f4  f7fffffe          BL       HASH_StartDigest
;;;276    
;;;277          /* wait until the Busy flag is RESET */
;;;278          counter =0;
0000f8  f8cda000          STR      r10,[sp,#0]
                  |L2.252|
;;;279          do
;;;280          {
;;;281            busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000fc  2008              MOVS     r0,#8
0000fe  f7fffffe          BL       HASH_GetFlagStatus
;;;282            counter++;
000102  9900              LDR      r1,[sp,#0]
000104  1c49              ADDS     r1,r1,#1
000106  9100              STR      r1,[sp,#0]
;;;283          }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
000108  9900              LDR      r1,[sp,#0]
00010a  42a9              CMP      r1,r5
00010c  d001              BEQ      |L2.274|
00010e  2800              CMP      r0,#0
000110  d1f4              BNE      |L2.252|
                  |L2.274|
;;;284    
;;;285          if (busystatus != RESET)
000112  b110              CBZ      r0,|L2.282|
;;;286          {
;;;287            status = ERROR;
000114  f04f0800          MOV      r8,#0
000118  e016              B        |L2.328|
                  |L2.282|
;;;288          }
;;;289          else
;;;290          {
;;;291            /* Read the message digest */
;;;292            HASH_GetDigest(&SHA1_MessageDigest);
00011a  a803              ADD      r0,sp,#0xc
00011c  f7fffffe          BL       HASH_GetDigest
;;;293            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
000120  9803              LDR      r0,[sp,#0xc]
000122  ba00              REV      r0,r0
000124  f8c90000          STR      r0,[r9,#0]
;;;294            outputaddr+=4;
;;;295            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
000128  9804              LDR      r0,[sp,#0x10]
00012a  ba00              REV      r0,r0
00012c  f8c90004          STR      r0,[r9,#4]
;;;296            outputaddr+=4;
;;;297            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
000130  9805              LDR      r0,[sp,#0x14]
000132  ba00              REV      r0,r0
000134  f8c90008          STR      r0,[r9,#8]
;;;298            outputaddr+=4;
;;;299            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
000138  9806              LDR      r0,[sp,#0x18]
00013a  ba00              REV      r0,r0
00013c  f8c9000c          STR      r0,[r9,#0xc]
;;;300            outputaddr+=4;
;;;301            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
000140  9807              LDR      r0,[sp,#0x1c]
000142  ba00              REV      r0,r0
000144  f8c90010          STR      r0,[r9,#0x10]
                  |L2.328|
;;;302          }
;;;303        }  
;;;304      }
;;;305      return status;  
;;;306    }
000148  b013              ADD      sp,sp,#0x4c
00014a  4640              MOV      r0,r8                 ;305
00014c  e8bd8ff0          POP      {r4-r11,pc}
;;;307    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_hash_sha1.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REVSH|
#line 144
|__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
