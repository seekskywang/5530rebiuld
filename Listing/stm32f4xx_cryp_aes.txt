; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\stm32f4xx_cryp_aes.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\stm32f4xx_cryp_aes.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\stm32f4xx_cryp_aes.crf ..\Libraries\FWlib\src\stm32f4xx_cryp_aes.c]
                          THUMB

                          AREA ||i.CRYP_AES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CBC PROC
;;;293      */
;;;294    ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;295                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;296                             uint8_t *Output)
;;;297    {
000004  b091              SUB      sp,sp,#0x44
000006  4689              MOV      r9,r1
000008  e9ddb61f          LDRD     r11,r6,[sp,#0x7c]
00000c  9d1e              LDR      r5,[sp,#0x78]
00000e  4614              MOV      r4,r2
000010  469a              MOV      r10,r3
;;;298      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;299      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;300      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;301      __IO uint32_t counter = 0;
000012  2700              MOVS     r7,#0
;;;302      uint32_t busystatus = 0;
;;;303      ErrorStatus status = SUCCESS;
000014  f04f0801          MOV      r8,#1
;;;304      uint32_t keyaddr    = (uint32_t)Key;
;;;305      uint32_t inputaddr  = (uint32_t)Input;
;;;306      uint32_t outputaddr = (uint32_t)Output;
;;;307      uint32_t ivaddr = (uint32_t)InitVectors;
;;;308      uint32_t i = 0;
;;;309    
;;;310      /* Crypto structures initialisation*/
;;;311      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000018  a805              ADD      r0,sp,#0x14
00001a  f7fffffe          BL       CRYP_KeyStructInit
;;;312    
;;;313      switch(Keysize)
00001e  4650              MOV      r0,r10
000020  46ba              MOV      r10,r7                ;301
000022  2880              CMP      r0,#0x80
000024  d04c              BEQ      |L1.192|
000026  f44f7180          MOV      r1,#0x100
00002a  28c0              CMP      r0,#0xc0
00002c  d057              BEQ      |L1.222|
00002e  4288              CMP      r0,r1
000030  d119              BNE      |L1.102|
;;;314      {
;;;315        case 128:
;;;316        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;317        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;318        keyaddr+=4;
;;;319        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;320        keyaddr+=4;
;;;321        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;322        keyaddr+=4;
;;;323        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;324        break;
;;;325        case 192:
;;;326        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;327        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;328        keyaddr+=4;
;;;329        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;330        keyaddr+=4;
;;;331        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;332        keyaddr+=4;
;;;333        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;334        keyaddr+=4;
;;;335        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;336        keyaddr+=4;
;;;337        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;338        break;
;;;339        case 256:
;;;340        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000032  0040              LSLS     r0,r0,#1
000034  9010              STR      r0,[sp,#0x40]
;;;341        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000036  6820              LDR      r0,[r4,#0]
000038  ba00              REV      r0,r0
00003a  9005              STR      r0,[sp,#0x14]
;;;342        keyaddr+=4;
;;;343        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00003c  6860              LDR      r0,[r4,#4]
00003e  ba00              REV      r0,r0
000040  9006              STR      r0,[sp,#0x18]
;;;344        keyaddr+=4;
;;;345        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000042  68a0              LDR      r0,[r4,#8]
000044  ba00              REV      r0,r0
000046  9007              STR      r0,[sp,#0x1c]
;;;346        keyaddr+=4;
;;;347        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000048  68e0              LDR      r0,[r4,#0xc]
00004a  ba00              REV      r0,r0
00004c  9008              STR      r0,[sp,#0x20]
;;;348        keyaddr+=4;
;;;349        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004e  6920              LDR      r0,[r4,#0x10]
000050  ba00              REV      r0,r0
000052  9009              STR      r0,[sp,#0x24]
;;;350        keyaddr+=4;
;;;351        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000054  6960              LDR      r0,[r4,#0x14]
000056  ba00              REV      r0,r0
000058  900a              STR      r0,[sp,#0x28]
;;;352        keyaddr+=4;
;;;353        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005a  69a0              LDR      r0,[r4,#0x18]
00005c  ba00              REV      r0,r0
00005e  900b              STR      r0,[sp,#0x2c]
;;;354        keyaddr+=4;
;;;355        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000060  69e0              LDR      r0,[r4,#0x1c]
000062  ba00              REV      r0,r0
000064  900c              STR      r0,[sp,#0x30]
                  |L1.102|
;;;356        break;
;;;357        default:
;;;358        break;
;;;359      }
;;;360    
;;;361      /* CRYP Initialization Vectors */
;;;362      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000066  f8d90000          LDR      r0,[r9,#0]
00006a  ba00              REV      r0,r0
00006c  9001              STR      r0,[sp,#4]
;;;363      ivaddr+=4;
;;;364      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00006e  f8d90004          LDR      r0,[r9,#4]
000072  ba00              REV      r0,r0
000074  9002              STR      r0,[sp,#8]
;;;365      ivaddr+=4;
;;;366      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
000076  f8d90008          LDR      r0,[r9,#8]
00007a  ba00              REV      r0,r0
00007c  9003              STR      r0,[sp,#0xc]
;;;367      ivaddr+=4;
;;;368      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
00007e  f8d9000c          LDR      r0,[r9,#0xc]
000082  ba00              REV      r0,r0
000084  9004              STR      r0,[sp,#0x10]
;;;369    
;;;370    
;;;371      /*------------------ AES Decryption ------------------*/
;;;372      if(Mode == MODE_DECRYPT) /* AES decryption */
000086  9811              LDR      r0,[sp,#0x44]
;;;373      {
;;;374        /* Flush IN/OUT FIFOs */
;;;375        CRYP_FIFOFlush();
;;;376    
;;;377        /* Crypto Init for Key preparation for decryption process */
;;;378        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;379        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
;;;380        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
;;;381    
;;;382        CRYP_Init(&AES_CRYP_InitStructure);
;;;383    
;;;384        /* Key Initialisation */
;;;385        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;386    
;;;387        /* Enable Crypto processor */
;;;388        CRYP_Cmd(ENABLE);
;;;389    
;;;390        /* wait until the Busy flag is RESET */
;;;391        do
;;;392        {
;;;393          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;394          counter++;
;;;395        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000088  f44f3980          MOV      r9,#0x10000
00008c  b3d8              CBZ      r0,|L1.262|
;;;396    
;;;397        if (busystatus != RESET)
;;;398       {
;;;399           status = ERROR;
;;;400        }
;;;401        else
;;;402        {
;;;403          /* Crypto Init for decryption process */  
;;;404          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;405        }
;;;406      }
;;;407      /*------------------ AES Encryption ------------------*/
;;;408      else /* AES encryption */
;;;409      {
;;;410        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
00008e  a805              ADD      r0,sp,#0x14
000090  f7fffffe          BL       CRYP_KeyInit
;;;411    
;;;412        /* Crypto Init for Encryption process */
;;;413        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
000094  f8cda034          STR      r10,[sp,#0x34]
                  |L1.152|
;;;414      }
;;;415      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
000098  2028              MOVS     r0,#0x28
00009a  900e              STR      r0,[sp,#0x38]
;;;416      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00009c  2080              MOVS     r0,#0x80
00009e  900f              STR      r0,[sp,#0x3c]
;;;417      CRYP_Init(&AES_CRYP_InitStructure);
0000a0  a80d              ADD      r0,sp,#0x34
0000a2  f7fffffe          BL       CRYP_Init
;;;418    
;;;419      /* CRYP Initialization Vectors */
;;;420      CRYP_IVInit(&AES_CRYP_IVInitStructure);
0000a6  a801              ADD      r0,sp,#4
0000a8  f7fffffe          BL       CRYP_IVInit
;;;421    
;;;422      /* Flush IN/OUT FIFOs */
;;;423      CRYP_FIFOFlush();
0000ac  f7fffffe          BL       CRYP_FIFOFlush
;;;424    
;;;425      /* Enable Crypto processor */
;;;426      CRYP_Cmd(ENABLE);
0000b0  2001              MOVS     r0,#1
0000b2  f7fffffe          BL       CRYP_Cmd
;;;427    
;;;428      if(CRYP_GetCmdStatus() == DISABLE)
0000b6  f7fffffe          BL       CRYP_GetCmdStatus
0000ba  b3e8              CBZ      r0,|L1.312|
;;;429      {
;;;430        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;431           the CRYP peripheral (please check the device sales type. */
;;;432        return(ERROR);
;;;433      }
;;;434      
;;;435      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
0000bc  2700              MOVS     r7,#0
0000be  e073              B        |L1.424|
                  |L1.192|
0000c0  f8cda040          STR      r10,[sp,#0x40]        ;316
0000c4  6820              LDR      r0,[r4,#0]            ;317
0000c6  ba00              REV      r0,r0                 ;317
0000c8  9009              STR      r0,[sp,#0x24]         ;317
0000ca  6860              LDR      r0,[r4,#4]            ;319
0000cc  ba00              REV      r0,r0                 ;319
0000ce  900a              STR      r0,[sp,#0x28]         ;319
0000d0  68a0              LDR      r0,[r4,#8]            ;321
0000d2  ba00              REV      r0,r0                 ;321
0000d4  900b              STR      r0,[sp,#0x2c]         ;321
0000d6  68e0              LDR      r0,[r4,#0xc]          ;323
0000d8  ba00              REV      r0,r0                 ;323
0000da  900c              STR      r0,[sp,#0x30]         ;323
0000dc  e7c3              B        |L1.102|
                  |L1.222|
0000de  9110              STR      r1,[sp,#0x40]         ;326
0000e0  6820              LDR      r0,[r4,#0]            ;327
0000e2  ba00              REV      r0,r0                 ;327
0000e4  9007              STR      r0,[sp,#0x1c]         ;327
0000e6  6860              LDR      r0,[r4,#4]            ;329
0000e8  ba00              REV      r0,r0                 ;329
0000ea  9008              STR      r0,[sp,#0x20]         ;329
0000ec  68a0              LDR      r0,[r4,#8]            ;331
0000ee  ba00              REV      r0,r0                 ;331
0000f0  9009              STR      r0,[sp,#0x24]         ;331
0000f2  68e0              LDR      r0,[r4,#0xc]          ;333
0000f4  ba00              REV      r0,r0                 ;333
0000f6  900a              STR      r0,[sp,#0x28]         ;333
0000f8  6920              LDR      r0,[r4,#0x10]         ;335
0000fa  ba00              REV      r0,r0                 ;335
0000fc  900b              STR      r0,[sp,#0x2c]         ;335
0000fe  6960              LDR      r0,[r4,#0x14]         ;337
000100  ba00              REV      r0,r0                 ;337
000102  900c              STR      r0,[sp,#0x30]         ;337
000104  e7af              B        |L1.102|
                  |L1.262|
000106  e7ff              B        |L1.264|
                  |L1.264|
000108  f7fffffe          BL       CRYP_FIFOFlush
00010c  2404              MOVS     r4,#4                 ;378
00010e  940d              STR      r4,[sp,#0x34]         ;378
000110  2038              MOVS     r0,#0x38              ;379
000112  900e              STR      r0,[sp,#0x38]         ;379
000114  f8cda03c          STR      r10,[sp,#0x3c]        ;380
000118  a80d              ADD      r0,sp,#0x34           ;382
00011a  f7fffffe          BL       CRYP_Init
00011e  a805              ADD      r0,sp,#0x14           ;385
000120  f7fffffe          BL       CRYP_KeyInit
000124  2001              MOVS     r0,#1                 ;388
000126  f7fffffe          BL       CRYP_Cmd
                  |L1.298|
00012a  2010              MOVS     r0,#0x10              ;393
00012c  f7fffffe          BL       CRYP_GetFlagStatus
000130  1c7f              ADDS     r7,r7,#1              ;394
000132  454f              CMP      r7,r9                 ;395
000134  d003              BEQ      |L1.318|
000136  e000              B        |L1.314|
                  |L1.312|
000138  e007              B        |L1.330|
                  |L1.314|
00013a  2800              CMP      r0,#0                 ;395
00013c  d1f5              BNE      |L1.298|
                  |L1.318|
00013e  b110              CBZ      r0,|L1.326|
000140  f04f0800          MOV      r8,#0                 ;399
000144  e7a8              B        |L1.152|
                  |L1.326|
000146  940d              STR      r4,[sp,#0x34]         ;404
000148  e7a6              B        |L1.152|
                  |L1.330|
00014a  2000              MOVS     r0,#0                 ;432
                  |L1.332|
;;;436      {
;;;437    
;;;438        /* Write the Input block in the IN FIFO */
;;;439        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;440        inputaddr+=4;
;;;441        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;442        inputaddr+=4;
;;;443        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;444        inputaddr+=4;
;;;445        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;446        inputaddr+=4;
;;;447        /* Wait until the complete message has been processed */
;;;448        counter = 0;
;;;449        do
;;;450        {
;;;451          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;452          counter++;
;;;453        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;454    
;;;455        if (busystatus != RESET)
;;;456       {
;;;457           status = ERROR;
;;;458        }
;;;459        else
;;;460        {
;;;461    
;;;462          /* Read the Output block from the Output FIFO */
;;;463          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;464          outputaddr+=4;
;;;465          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;466          outputaddr+=4;
;;;467          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;468          outputaddr+=4;
;;;469          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;470          outputaddr+=4;
;;;471        }
;;;472      }
;;;473    
;;;474      /* Disable Crypto */
;;;475      CRYP_Cmd(DISABLE);
;;;476    
;;;477      return status;
;;;478    }
00014c  b015              ADD      sp,sp,#0x54
00014e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.338|
000152  6828              LDR      r0,[r5,#0]            ;439
000154  f7fffffe          BL       CRYP_DataIn
000158  1d2d              ADDS     r5,r5,#4              ;440
00015a  6828              LDR      r0,[r5,#0]            ;441
00015c  f7fffffe          BL       CRYP_DataIn
000160  1d2d              ADDS     r5,r5,#4              ;442
000162  6828              LDR      r0,[r5,#0]            ;443
000164  f7fffffe          BL       CRYP_DataIn
000168  1d2d              ADDS     r5,r5,#4              ;444
00016a  6828              LDR      r0,[r5,#0]            ;445
00016c  f7fffffe          BL       CRYP_DataIn
000170  1d2d              ADDS     r5,r5,#4              ;446
000172  2400              MOVS     r4,#0                 ;448
                  |L1.372|
000174  2010              MOVS     r0,#0x10              ;451
000176  f7fffffe          BL       CRYP_GetFlagStatus
00017a  1c64              ADDS     r4,r4,#1              ;452
00017c  454c              CMP      r4,r9                 ;453
00017e  d001              BEQ      |L1.388|
000180  2800              CMP      r0,#0                 ;453
000182  d1f7              BNE      |L1.372|
                  |L1.388|
000184  b110              CBZ      r0,|L1.396|
000186  f04f0800          MOV      r8,#0                 ;457
00018a  e00c              B        |L1.422|
                  |L1.396|
00018c  f7fffffe          BL       CRYP_DataOut
000190  6030              STR      r0,[r6,#0]            ;463
000192  f7fffffe          BL       CRYP_DataOut
000196  6070              STR      r0,[r6,#4]            ;465
000198  f7fffffe          BL       CRYP_DataOut
00019c  60b0              STR      r0,[r6,#8]            ;467
00019e  f7fffffe          BL       CRYP_DataOut
0001a2  60f0              STR      r0,[r6,#0xc]          ;469
0001a4  3610              ADDS     r6,r6,#0x10           ;469
                  |L1.422|
0001a6  3710              ADDS     r7,r7,#0x10           ;435
                  |L1.424|
0001a8  455f              CMP      r7,r11                ;435
0001aa  d202              BCS      |L1.434|
0001ac  f1b80f00          CMP      r8,#0                 ;435
0001b0  d1cf              BNE      |L1.338|
                  |L1.434|
0001b2  2000              MOVS     r0,#0                 ;475
0001b4  f7fffffe          BL       CRYP_Cmd
0001b8  4640              MOV      r0,r8                 ;477
0001ba  e7c7              B        |L1.332|
;;;479    
                          ENDP


                          AREA ||i.CRYP_AES_CCM||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CCM PROC
;;;1134     */
;;;1135   ErrorStatus CRYP_AES_CCM(uint8_t Mode, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1136                            uint8_t* Nonce, uint32_t NonceSize,
;;;1137                            uint8_t *Key, uint16_t Keysize,
;;;1138                            uint8_t *Input, uint32_t ILength,
;;;1139                            uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
;;;1140                            uint8_t *Output,
;;;1141                            uint8_t *AuthTAG, uint32_t TAGSize)
;;;1142   {
000004  b09d              SUB      sp,sp,#0x74
000006  469a              MOV      r10,r3
000008  e9dd1c2d          LDRD     r1,r12,[sp,#0xb4]
00000c  e9dd692b          LDRD     r6,r9,[sp,#0xac]
000010  e9dd7430          LDRD     r7,r4,[sp,#0xc0]
000014  982f              LDR      r0,[sp,#0xbc]
;;;1143     CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;1144     CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;1145     CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;1146     __IO uint32_t counter = 0;
;;;1147     uint32_t busystatus = 0;
;;;1148     ErrorStatus status = SUCCESS;
000016  f04f0801          MOV      r8,#1
;;;1149     uint32_t keyaddr    = (uint32_t)Key;
;;;1150     uint32_t inputaddr  = (uint32_t)Input;
;;;1151     uint32_t outputaddr = (uint32_t)Output;
;;;1152     uint32_t headeraddr = (uint32_t)Header;
00001a  460d              MOV      r5,r1
;;;1153     uint32_t tagaddr = (uint32_t)AuthTAG;
00001c  940c              STR      r4,[sp,#0x30]
;;;1154     uint32_t headersize = HLength;
00001e  4664              MOV      r4,r12
;;;1155     uint32_t loopcounter = 0;
000020  2300              MOVS     r3,#0
;;;1156     uint32_t bufferidx = 0;
;;;1157     uint8_t blockb0[16] = {0};/* Block B0 */
000022  469b              MOV      r11,r3
000024  f8cdb020          STR      r11,[sp,#0x20]
000028  f8cdb024          STR      r11,[sp,#0x24]
00002c  f8cdb028          STR      r11,[sp,#0x28]
000030  f8cdb02c          STR      r11,[sp,#0x2c]
;;;1158     uint8_t ctr[16] = {0}; /* Counter */
000034  f8cdb010          STR      r11,[sp,#0x10]
000038  f8cdb014          STR      r11,[sp,#0x14]
00003c  f8cdb018          STR      r11,[sp,#0x18]
000040  f8cdb01c          STR      r11,[sp,#0x1c]
;;;1159     uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
000044  f8cdb000          STR      r11,[sp,#0]
000048  f8cdb004          STR      r11,[sp,#4]
00004c  f8cdb008          STR      r11,[sp,#8]
000050  f8cdb00c          STR      r11,[sp,#0xc]
;;;1160     uint32_t ctraddr = (uint32_t)ctr;
000054  f10d0b10          ADD      r11,sp,#0x10
;;;1161     uint32_t b0addr = (uint32_t)blockb0;
;;;1162     
;;;1163     /************************ Formatting the header block ***********************/
;;;1164     if(headersize != 0)
000058  b37c              CBZ      r4,|L2.186|
;;;1165     {
;;;1166       /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
;;;1167       if(headersize < 65280)
;;;1168       {
;;;1169         HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
;;;1170         HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
00005a  f00c0cff          AND      r12,r12,#0xff
00005e  f5b44f7f          CMP      r4,#0xff00            ;1167
000062  d206              BCS      |L2.114|
000064  0a25              LSRS     r5,r4,#8              ;1169
000066  7005              STRB     r5,[r0,#0]            ;1169
000068  2502              MOVS     r5,#2
00006a  f880c001          STRB     r12,[r0,#1]
;;;1171         headersize += 2;
00006e  1ca4              ADDS     r4,r4,#2
000070  e013              B        |L2.154|
                  |L2.114|
;;;1172       }
;;;1173       else
;;;1174       {
;;;1175         /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
;;;1176         HBuffer[bufferidx++] = 0xFF;
000072  25ff              MOVS     r5,#0xff
000074  7005              STRB     r5,[r0,#0]
;;;1177         HBuffer[bufferidx++] = 0xFE;
000076  25fe              MOVS     r5,#0xfe
000078  7045              STRB     r5,[r0,#1]
;;;1178         HBuffer[bufferidx++] = headersize & 0xff000000;
00007a  2500              MOVS     r5,#0
00007c  7085              STRB     r5,[r0,#2]
;;;1179         HBuffer[bufferidx++] = headersize & 0x00ff0000;
00007e  70c5              STRB     r5,[r0,#3]
;;;1180         HBuffer[bufferidx++] = headersize & 0x0000ff00;
000080  7105              STRB     r5,[r0,#4]
;;;1181         HBuffer[bufferidx++] = headersize & 0x000000ff;
000082  2506              MOVS     r5,#6
000084  f880c005          STRB     r12,[r0,#5]
;;;1182         headersize += 6;
000088  1da4              ADDS     r4,r4,#6
00008a  e006              B        |L2.154|
                  |L2.140|
;;;1183       }
;;;1184       /* Copy the header buffer in internal buffer "HBuffer" */
;;;1185       for(loopcounter = 0; loopcounter < headersize; loopcounter++)
;;;1186       {
;;;1187         HBuffer[bufferidx++] = Header[loopcounter];
00008c  46ac              MOV      r12,r5
00008e  f811e003          LDRB     lr,[r1,r3]
000092  1c6d              ADDS     r5,r5,#1
000094  f800e00c          STRB     lr,[r0,r12]
000098  1c5b              ADDS     r3,r3,#1              ;1185
                  |L2.154|
00009a  42a3              CMP      r3,r4                 ;1185
00009c  d3f6              BCC      |L2.140|
;;;1188       }
;;;1189       /* Check if the header size is modulo 16 */
;;;1190       if ((headersize % 16) != 0)
00009e  0721              LSLS     r1,r4,#28
0000a0  d00a              BEQ      |L2.184|
0000a2  2101              MOVS     r1,#1                 ;1148
;;;1191       {
;;;1192         /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
;;;1193         for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
0000a4  eb011314          ADD      r3,r1,r4,LSR #4
0000a8  2500              MOVS     r5,#0                 ;1146
0000aa  e001              B        |L2.176|
                  |L2.172|
;;;1194         {
;;;1195           HBuffer[loopcounter] = 0;
0000ac  5505              STRB     r5,[r0,r4]
0000ae  1c64              ADDS     r4,r4,#1              ;1193
                  |L2.176|
0000b0  ebb41f03          CMP      r4,r3,LSL #4          ;1193
0000b4  d9fa              BLS      |L2.172|
;;;1196         }
;;;1197         /* Set the header size to modulo 16 */
;;;1198         headersize = ((headersize/16) + 1) * 16;
0000b6  011c              LSLS     r4,r3,#4
                  |L2.184|
;;;1199       }
;;;1200       /* set the pointer headeraddr to HBuffer */
;;;1201       headeraddr = (uint32_t)HBuffer;
0000b8  4605              MOV      r5,r0
                  |L2.186|
;;;1202     }
;;;1203     /************************* Formatting the block B0 **************************/
;;;1204     if(headersize != 0)
0000ba  b114              CBZ      r4,|L2.194|
;;;1205     {
;;;1206       blockb0[0] = 0x40;
0000bc  2040              MOVS     r0,#0x40
0000be  f88d0020          STRB     r0,[sp,#0x20]
                  |L2.194|
;;;1207     }
;;;1208     /* Flags byte */
;;;1209     blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
0000c2  9832              LDR      r0,[sp,#0xc8]
0000c4  b2c0              UXTB     r0,r0
0000c6  1e80              SUBS     r0,r0,#2
0000c8  eb0070d0          ADD      r0,r0,r0,LSR #31
0000cc  f3c00042          UBFX     r0,r0,#1,#3
0000d0  00c1              LSLS     r1,r0,#3
0000d2  f1c2000e          RSB      r0,r2,#0xe
0000d6  f0000007          AND      r0,r0,#7
0000da  4301              ORRS     r1,r1,r0
0000dc  f89d0020          LDRB     r0,[sp,#0x20]
0000e0  4301              ORRS     r1,r1,r0
0000e2  f88d1020          STRB     r1,[sp,#0x20]
;;;1210     
;;;1211     for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
0000e6  2000              MOVS     r0,#0
0000e8  ab08              ADD      r3,sp,#0x20           ;1157
0000ea  e007              B        |L2.252|
                  |L2.236|
;;;1212     {
;;;1213       blockb0[loopcounter+1] = Nonce[loopcounter];
0000ec  991e              LDR      r1,[sp,#0x78]
0000ee  eb030e00          ADD      lr,r3,r0
0000f2  f811c000          LDRB     r12,[r1,r0]
0000f6  f88ec001          STRB     r12,[lr,#1]
0000fa  1c40              ADDS     r0,r0,#1              ;1211
                  |L2.252|
0000fc  4290              CMP      r0,r2                 ;1211
0000fe  d3f5              BCC      |L2.236|
000100  e005              B        |L2.270|
                  |L2.258|
;;;1214     }
;;;1215     for ( ; loopcounter < 13; loopcounter++)
;;;1216     {
;;;1217       blockb0[loopcounter+1] = 0;
000102  eb030c00          ADD      r12,r3,r0
000106  2100              MOVS     r1,#0
000108  f88c1001          STRB     r1,[r12,#1]
00010c  1c40              ADDS     r0,r0,#1              ;1215
                  |L2.270|
00010e  280d              CMP      r0,#0xd               ;1215
000110  d3f7              BCC      |L2.258|
;;;1218     }
;;;1219     
;;;1220     blockb0[14] = ((ILength >> 8) & 0xFF);
000112  ea4f2019          LSR      r0,r9,#8
000116  f88d002e          STRB     r0,[sp,#0x2e]
;;;1221     blockb0[15] = (ILength & 0xFF);
00011a  f88d902f          STRB     r9,[sp,#0x2f]
;;;1222     
;;;1223     /************************* Formatting the initial counter *******************/
;;;1224     /* Byte 0:
;;;1225        Bits 7 and 6 are reserved and shall be set to 0
;;;1226        Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
;;;1227        are distinct from B0
;;;1228        Bits 0, 1, and 2 contain the same encoding of q as in B0
;;;1229     */
;;;1230     ctr[0] = blockb0[0] & 0x07;
00011e  f89d0020          LDRB     r0,[sp,#0x20]
000122  f0000007          AND      r0,r0,#7
000126  f88d0010          STRB     r0,[sp,#0x10]
;;;1231     /* byte 1 to NonceSize is the IV (Nonce) */
;;;1232     for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
00012a  2001              MOVS     r0,#1
00012c  a904              ADD      r1,sp,#0x10           ;1158
00012e  1c52              ADDS     r2,r2,#1
000130  e004              B        |L2.316|
                  |L2.306|
;;;1233     {
;;;1234       ctr[loopcounter] = blockb0[loopcounter];
000132  f813c000          LDRB     r12,[r3,r0]
000136  f801c000          STRB     r12,[r1,r0]
00013a  1c40              ADDS     r0,r0,#1              ;1232
                  |L2.316|
00013c  4290              CMP      r0,r2                 ;1232
00013e  d3f8              BCC      |L2.306|
;;;1235     }
;;;1236     /* Set the LSB to 1 */
;;;1237     ctr[15] |= 0x01;
000140  f89d001f          LDRB     r0,[sp,#0x1f]
000144  f0400001          ORR      r0,r0,#1
000148  f88d001f          STRB     r0,[sp,#0x1f]
;;;1238     
;;;1239     /* Crypto structures initialisation*/
;;;1240     CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
00014c  a811              ADD      r0,sp,#0x44
00014e  f7fffffe          BL       CRYP_KeyStructInit
;;;1241     
;;;1242     switch(Keysize)
000152  982a              LDR      r0,[sp,#0xa8]
000154  2880              CMP      r0,#0x80
000156  d076              BEQ      |L2.582|
000158  f44f7180          MOV      r1,#0x100
00015c  28c0              CMP      r0,#0xc0
00015e  d071              BEQ      |L2.580|
000160  4288              CMP      r0,r1
000162  d121              BNE      |L2.424|
;;;1243     {
;;;1244       case 128:
;;;1245       AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;1246       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;1247       keyaddr+=4;
;;;1248       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;1249       keyaddr+=4;
;;;1250       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;1251       keyaddr+=4;
;;;1252       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;1253       break;
;;;1254       case 192:
;;;1255       AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;1256       AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;1257       keyaddr+=4;
;;;1258       AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;1259       keyaddr+=4;
;;;1260       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;1261       keyaddr+=4;
;;;1262       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;1263       keyaddr+=4;
;;;1264       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;1265       keyaddr+=4;
;;;1266       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;1267       break;
;;;1268       case 256:
;;;1269       AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000164  0040              LSLS     r0,r0,#1
000166  901c              STR      r0,[sp,#0x70]
;;;1270       AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000168  f8da0000          LDR      r0,[r10,#0]
00016c  ba00              REV      r0,r0
00016e  9011              STR      r0,[sp,#0x44]
;;;1271       keyaddr+=4;
;;;1272       AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
000170  f8da0004          LDR      r0,[r10,#4]
000174  ba00              REV      r0,r0
000176  9012              STR      r0,[sp,#0x48]
;;;1273       keyaddr+=4;
;;;1274       AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000178  f8da0008          LDR      r0,[r10,#8]
00017c  ba00              REV      r0,r0
00017e  9013              STR      r0,[sp,#0x4c]
;;;1275       keyaddr+=4;
;;;1276       AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000180  f8da000c          LDR      r0,[r10,#0xc]
000184  ba00              REV      r0,r0
000186  9014              STR      r0,[sp,#0x50]
;;;1277       keyaddr+=4;
;;;1278       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000188  f8da0010          LDR      r0,[r10,#0x10]
00018c  ba00              REV      r0,r0
00018e  9015              STR      r0,[sp,#0x54]
;;;1279       keyaddr+=4;
;;;1280       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000190  f8da0014          LDR      r0,[r10,#0x14]
000194  ba00              REV      r0,r0
000196  9016              STR      r0,[sp,#0x58]
;;;1281       keyaddr+=4;
;;;1282       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000198  f8da0018          LDR      r0,[r10,#0x18]
00019c  ba00              REV      r0,r0
00019e  9017              STR      r0,[sp,#0x5c]
;;;1283       keyaddr+=4;
;;;1284       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0001a0  f8da001c          LDR      r0,[r10,#0x1c]
0001a4  ba00              REV      r0,r0
0001a6  9018              STR      r0,[sp,#0x60]
                  |L2.424|
;;;1285       break;
;;;1286       default:
;;;1287       break;
;;;1288     }
;;;1289     
;;;1290     /* CRYP Initialization Vectors */
;;;1291     AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
0001a8  f8db0000          LDR      r0,[r11,#0]
0001ac  ba00              REV      r0,r0
0001ae  900d              STR      r0,[sp,#0x34]
;;;1292     ctraddr+=4;
;;;1293     AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
0001b0  f8db0004          LDR      r0,[r11,#4]
0001b4  ba00              REV      r0,r0
0001b6  900e              STR      r0,[sp,#0x38]
;;;1294     ctraddr+=4;
;;;1295     AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
0001b8  f8db0008          LDR      r0,[r11,#8]
0001bc  ba00              REV      r0,r0
0001be  900f              STR      r0,[sp,#0x3c]
;;;1296     ctraddr+=4;
;;;1297     AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
0001c0  f8db000c          LDR      r0,[r11,#0xc]
0001c4  ba00              REV      r0,r0
0001c6  9010              STR      r0,[sp,#0x40]
;;;1298     
;;;1299     /*------------------ AES Encryption ------------------*/
;;;1300     if(Mode == MODE_ENCRYPT) /* AES encryption */
0001c8  981d              LDR      r0,[sp,#0x74]
;;;1301     {
;;;1302       /* Flush IN/OUT FIFOs */
;;;1303       CRYP_FIFOFlush();
;;;1304       
;;;1305       /* Key Initialisation */
;;;1306       CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;1307       
;;;1308       /* CRYP Initialization Vectors */
;;;1309       CRYP_IVInit(&AES_CRYP_IVInitStructure);
;;;1310       
;;;1311       /* Crypto Init for Key preparation for decryption process */
;;;1312       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;1313       AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
0001ca  f04f1a08          MOV      r10,#0x80008
;;;1314       AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;1315       CRYP_Init(&AES_CRYP_InitStructure);
;;;1316       
;;;1317       /***************************** Init phase *********************************/
;;;1318       /* Select init phase */
;;;1319       CRYP_PhaseConfig(CRYP_Phase_Init);
;;;1320       
;;;1321       b0addr = (uint32_t)blockb0;
;;;1322       /* Write the blockb0 block in the IN FIFO */
;;;1323       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1324       b0addr+=4;
;;;1325       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1326       b0addr+=4;
;;;1327       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1328       b0addr+=4;
;;;1329       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1330       
;;;1331       /* Enable Crypto processor */
;;;1332       CRYP_Cmd(ENABLE);
;;;1333       
;;;1334       /* Wait for CRYPEN bit to be 0 */
;;;1335       while(CRYP_GetCmdStatus() == ENABLE)
;;;1336       {
;;;1337       }
;;;1338       /***************************** header phase *******************************/
;;;1339       if(headersize != 0)
;;;1340       {
;;;1341         /* Select header phase */
;;;1342         CRYP_PhaseConfig(CRYP_Phase_Header);
0001ce  f44f3b80          MOV      r11,#0x10000
0001d2  2801              CMP      r0,#1                 ;1300
0001d4  d064              BEQ      |L2.672|
;;;1343         
;;;1344         /* Enable Crypto processor */
;;;1345         CRYP_Cmd(ENABLE);
;;;1346         
;;;1347         if(CRYP_GetCmdStatus() == DISABLE)
;;;1348         {
;;;1349            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1350               the CRYP peripheral (please check the device sales type. */
;;;1351            return(ERROR);
;;;1352         }
;;;1353         
;;;1354         for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
;;;1355         {
;;;1356           /* Wait until the IFEM flag is reset */
;;;1357           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1358           {
;;;1359           }
;;;1360           
;;;1361           /* Write the Input block in the IN FIFO */
;;;1362           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1363           headeraddr+=4;
;;;1364           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1365           headeraddr+=4;
;;;1366           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1367           headeraddr+=4;
;;;1368           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1369           headeraddr+=4;
;;;1370         }
;;;1371         
;;;1372         /* Wait until the complete message has been processed */
;;;1373         counter = 0;
;;;1374         do
;;;1375         {
;;;1376           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1377           counter++;
;;;1378         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1379   
;;;1380         if (busystatus != RESET)
;;;1381         {
;;;1382           status = ERROR;
;;;1383         }
;;;1384       }
;;;1385       
;;;1386       /**************************** payload phase *******************************/
;;;1387       if(ILength != 0)
;;;1388       {
;;;1389         /* Select payload phase */
;;;1390         CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;1391         
;;;1392         /* Enable Crypto processor */
;;;1393         CRYP_Cmd(ENABLE);
;;;1394         
;;;1395         if(CRYP_GetCmdStatus() == DISABLE)
;;;1396         {
;;;1397           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1398              the CRYP peripheral (please check the device sales type. */
;;;1399           return(ERROR);
;;;1400         }
;;;1401         
;;;1402         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;1403         {
;;;1404           /* Wait until the IFEM flag is reset */
;;;1405           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1406           {
;;;1407           }
;;;1408           
;;;1409           /* Write the Input block in the IN FIFO */
;;;1410           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1411           inputaddr+=4;
;;;1412           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1413           inputaddr+=4;
;;;1414           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1415           inputaddr+=4;
;;;1416           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1417           inputaddr+=4;
;;;1418           
;;;1419           /* Wait until the complete message has been processed */
;;;1420           counter = 0;
;;;1421           do
;;;1422           {
;;;1423             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1424             counter++;
;;;1425           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1426   
;;;1427           if (busystatus != RESET)
;;;1428           {
;;;1429             status = ERROR;
;;;1430           }
;;;1431           else
;;;1432           {
;;;1433             /* Wait until the OFNE flag is reset */
;;;1434             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1435             {
;;;1436             }
;;;1437             
;;;1438             /* Read the Output block from the Output FIFO */
;;;1439             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1440             outputaddr+=4;
;;;1441             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1442             outputaddr+=4;
;;;1443             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1444             outputaddr+=4;
;;;1445             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1446             outputaddr+=4;
;;;1447           }
;;;1448         }
;;;1449       }
;;;1450       
;;;1451       /***************************** final phase ********************************/
;;;1452       /* Select final phase */
;;;1453       CRYP_PhaseConfig(CRYP_Phase_Final);
;;;1454       
;;;1455       /* Enable Crypto processor */
;;;1456       CRYP_Cmd(ENABLE);
;;;1457       
;;;1458       if(CRYP_GetCmdStatus() == DISABLE)
;;;1459       {
;;;1460         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1461            the CRYP peripheral (please check the device sales type. */
;;;1462         return(ERROR);
;;;1463       }
;;;1464       
;;;1465       ctraddr = (uint32_t)ctr;
;;;1466       /* Write the counter block in the IN FIFO */
;;;1467       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1468       ctraddr+=4;
;;;1469       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1470       ctraddr+=4;
;;;1471       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1472       ctraddr+=4;
;;;1473       /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
;;;1474       CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
;;;1475       
;;;1476       /* Wait until the OFNE flag is reset */
;;;1477       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1478       {
;;;1479       }
;;;1480       
;;;1481       /* Read the Auth TAG in the IN FIFO */
;;;1482       temptag[0] = CRYP_DataOut();
;;;1483       temptag[1] = CRYP_DataOut();
;;;1484       temptag[2] = CRYP_DataOut();
;;;1485       temptag[3] = CRYP_DataOut();
;;;1486     }
;;;1487     /*------------------ AES Decryption ------------------*/
;;;1488     else /* AES decryption */
;;;1489     {
;;;1490       /* Flush IN/OUT FIFOs */
;;;1491       CRYP_FIFOFlush();
0001d6  f7fffffe          BL       CRYP_FIFOFlush
;;;1492       
;;;1493       /* Key Initialisation */
;;;1494       CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0001da  a811              ADD      r0,sp,#0x44
0001dc  f7fffffe          BL       CRYP_KeyInit
;;;1495       
;;;1496       /* CRYP Initialization Vectors */
;;;1497       CRYP_IVInit(&AES_CRYP_IVInitStructure);
0001e0  a80d              ADD      r0,sp,#0x34
0001e2  f7fffffe          BL       CRYP_IVInit
;;;1498       
;;;1499       /* Crypto Init for Key preparation for decryption process */
;;;1500       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
0001e6  2004              MOVS     r0,#4
0001e8  9019              STR      r0,[sp,#0x64]
;;;1501       AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
0001ea  f8cda068          STR      r10,[sp,#0x68]
;;;1502       AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0001ee  2080              MOVS     r0,#0x80
0001f0  901b              STR      r0,[sp,#0x6c]
;;;1503       CRYP_Init(&AES_CRYP_InitStructure);
0001f2  a819              ADD      r0,sp,#0x64
0001f4  f7fffffe          BL       CRYP_Init
;;;1504       
;;;1505       /***************************** Init phase *********************************/
;;;1506       /* Select init phase */
;;;1507       CRYP_PhaseConfig(CRYP_Phase_Init);
0001f8  2000              MOVS     r0,#0
0001fa  f7fffffe          BL       CRYP_PhaseConfig
;;;1508       
;;;1509       b0addr = (uint32_t)blockb0;
;;;1510       /* Write the blockb0 block in the IN FIFO */
;;;1511       CRYP_DataIn((*(uint32_t*)(b0addr)));
0001fe  9808              LDR      r0,[sp,#0x20]
000200  f7fffffe          BL       CRYP_DataIn
;;;1512       b0addr+=4;
;;;1513       CRYP_DataIn((*(uint32_t*)(b0addr)));
000204  9809              LDR      r0,[sp,#0x24]
000206  f7fffffe          BL       CRYP_DataIn
;;;1514       b0addr+=4;
;;;1515       CRYP_DataIn((*(uint32_t*)(b0addr)));
00020a  980a              LDR      r0,[sp,#0x28]
00020c  f7fffffe          BL       CRYP_DataIn
;;;1516       b0addr+=4;
;;;1517       CRYP_DataIn((*(uint32_t*)(b0addr)));
000210  980b              LDR      r0,[sp,#0x2c]
000212  f7fffffe          BL       CRYP_DataIn
;;;1518       
;;;1519       /* Enable Crypto processor */
;;;1520       CRYP_Cmd(ENABLE);
000216  2001              MOVS     r0,#1
000218  f7fffffe          BL       CRYP_Cmd
                  |L2.540|
;;;1521       
;;;1522       /* Wait for CRYPEN bit to be 0 */
;;;1523       while(CRYP_GetCmdStatus() == ENABLE)
00021c  f7fffffe          BL       CRYP_GetCmdStatus
000220  2801              CMP      r0,#1
000222  d0fb              BEQ      |L2.540|
;;;1524       {
;;;1525       }
;;;1526       
;;;1527       /***************************** header phase *******************************/
;;;1528       if(headersize != 0)
000224  2c00              CMP      r4,#0
000226  d06f              BEQ      |L2.776|
;;;1529       {
;;;1530         /* Select header phase */
;;;1531         CRYP_PhaseConfig(CRYP_Phase_Header);
000228  4658              MOV      r0,r11
00022a  f7fffffe          BL       CRYP_PhaseConfig
;;;1532         
;;;1533         /* Enable Crypto processor */
;;;1534         CRYP_Cmd(ENABLE);
00022e  2001              MOVS     r0,#1
000230  f7fffffe          BL       CRYP_Cmd
;;;1535         
;;;1536         if(CRYP_GetCmdStatus() == DISABLE)
000234  f7fffffe          BL       CRYP_GetCmdStatus
000238  2800              CMP      r0,#0
00023a  d07d              BEQ      |L2.824|
;;;1537         {
;;;1538           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1539              the CRYP peripheral (please check the device sales type. */
;;;1540           return(ERROR);
;;;1541         }
;;;1542         
;;;1543         for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
00023c  f04f0a00          MOV      r10,#0
000240  e11e              B        |L2.1152|
000242  e000              B        |L2.582|
                  |L2.580|
000244  e012              B        |L2.620|
                  |L2.582|
000246  2000              MOVS     r0,#0                 ;1245
000248  901c              STR      r0,[sp,#0x70]         ;1245
00024a  f8da0000          LDR      r0,[r10,#0]           ;1246
00024e  ba00              REV      r0,r0                 ;1246
000250  9015              STR      r0,[sp,#0x54]         ;1246
000252  f8da0004          LDR      r0,[r10,#4]           ;1248
000256  ba00              REV      r0,r0                 ;1248
000258  9016              STR      r0,[sp,#0x58]         ;1248
00025a  f8da0008          LDR      r0,[r10,#8]           ;1250
00025e  ba00              REV      r0,r0                 ;1250
000260  9017              STR      r0,[sp,#0x5c]         ;1250
000262  f8da000c          LDR      r0,[r10,#0xc]         ;1252
000266  ba00              REV      r0,r0                 ;1252
000268  9018              STR      r0,[sp,#0x60]         ;1252
00026a  e79d              B        |L2.424|
                  |L2.620|
00026c  911c              STR      r1,[sp,#0x70]         ;1255
00026e  f8da0000          LDR      r0,[r10,#0]           ;1256
000272  ba00              REV      r0,r0                 ;1256
000274  9013              STR      r0,[sp,#0x4c]         ;1256
000276  f8da0004          LDR      r0,[r10,#4]           ;1258
00027a  ba00              REV      r0,r0                 ;1258
00027c  9014              STR      r0,[sp,#0x50]         ;1258
00027e  f8da0008          LDR      r0,[r10,#8]           ;1260
000282  ba00              REV      r0,r0                 ;1260
000284  9015              STR      r0,[sp,#0x54]         ;1260
000286  f8da000c          LDR      r0,[r10,#0xc]         ;1262
00028a  ba00              REV      r0,r0                 ;1262
00028c  9016              STR      r0,[sp,#0x58]         ;1262
00028e  f8da0010          LDR      r0,[r10,#0x10]        ;1264
000292  ba00              REV      r0,r0                 ;1264
000294  9017              STR      r0,[sp,#0x5c]         ;1264
000296  f8da0014          LDR      r0,[r10,#0x14]        ;1266
00029a  ba00              REV      r0,r0                 ;1266
00029c  9018              STR      r0,[sp,#0x60]         ;1266
00029e  e783              B        |L2.424|
                  |L2.672|
0002a0  f7fffffe          BL       CRYP_FIFOFlush
0002a4  a811              ADD      r0,sp,#0x44           ;1306
0002a6  f7fffffe          BL       CRYP_KeyInit
0002aa  a80d              ADD      r0,sp,#0x34           ;1309
0002ac  f7fffffe          BL       CRYP_IVInit
0002b0  2000              MOVS     r0,#0                 ;1312
0002b2  9019              STR      r0,[sp,#0x64]         ;1312
0002b4  f8cda068          STR      r10,[sp,#0x68]        ;1313
0002b8  2080              MOVS     r0,#0x80              ;1314
0002ba  901b              STR      r0,[sp,#0x6c]         ;1314
0002bc  a819              ADD      r0,sp,#0x64           ;1315
0002be  f7fffffe          BL       CRYP_Init
0002c2  2000              MOVS     r0,#0                 ;1319
0002c4  f7fffffe          BL       CRYP_PhaseConfig
0002c8  9808              LDR      r0,[sp,#0x20]         ;1323
0002ca  f7fffffe          BL       CRYP_DataIn
0002ce  9809              LDR      r0,[sp,#0x24]         ;1325
0002d0  f7fffffe          BL       CRYP_DataIn
0002d4  980a              LDR      r0,[sp,#0x28]         ;1327
0002d6  f7fffffe          BL       CRYP_DataIn
0002da  980b              LDR      r0,[sp,#0x2c]         ;1329
0002dc  f7fffffe          BL       CRYP_DataIn
0002e0  2001              MOVS     r0,#1                 ;1332
0002e2  f7fffffe          BL       CRYP_Cmd
                  |L2.742|
0002e6  f7fffffe          BL       CRYP_GetCmdStatus
0002ea  2801              CMP      r0,#1                 ;1335
0002ec  d0fb              BEQ      |L2.742|
0002ee  b3bc              CBZ      r4,|L2.864|
0002f0  4658              MOV      r0,r11                ;1342
0002f2  f7fffffe          BL       CRYP_PhaseConfig
0002f6  2001              MOVS     r0,#1                 ;1345
0002f8  f7fffffe          BL       CRYP_Cmd
0002fc  f7fffffe          BL       CRYP_GetCmdStatus
000300  b118              CBZ      r0,|L2.778|
000302  f04f0a00          MOV      r10,#0                ;1354
000306  e01d              B        |L2.836|
                  |L2.776|
000308  e0c8              B        |L2.1180|
                  |L2.778|
00030a  2000              MOVS     r0,#0                 ;1351
                  |L2.780|
;;;1544         {
;;;1545           /* Wait until the IFEM flag is reset */
;;;1546           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1547           {
;;;1548           }
;;;1549           
;;;1550           /* Write the Input block in the IN FIFO */
;;;1551           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1552           headeraddr+=4;
;;;1553           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1554           headeraddr+=4;
;;;1555           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1556           headeraddr+=4;
;;;1557           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1558           headeraddr+=4;
;;;1559         }
;;;1560         
;;;1561         /* Wait until the complete message has been processed */
;;;1562         counter = 0;
;;;1563         do
;;;1564         {
;;;1565           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1566           counter++;
;;;1567         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1568   
;;;1569         if (busystatus != RESET)
;;;1570         {
;;;1571           status = ERROR;
;;;1572         }
;;;1573       }
;;;1574       
;;;1575       /**************************** payload phase *******************************/
;;;1576       if(ILength != 0)
;;;1577       {
;;;1578         /* Select payload phase */
;;;1579         CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;1580   
;;;1581         /* Enable Crypto processor */
;;;1582         CRYP_Cmd(ENABLE);
;;;1583         
;;;1584         if(CRYP_GetCmdStatus() == DISABLE)
;;;1585         {
;;;1586           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1587              the CRYP peripheral (please check the device sales type. */
;;;1588           return(ERROR);
;;;1589         }
;;;1590         
;;;1591         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;1592         {
;;;1593           /* Wait until the IFEM flag is reset */
;;;1594           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1595           {
;;;1596           }
;;;1597           
;;;1598           /* Write the Input block in the IN FIFO */
;;;1599           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1600           inputaddr+=4;
;;;1601           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1602           inputaddr+=4;
;;;1603           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1604           inputaddr+=4;
;;;1605           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1606           inputaddr+=4;
;;;1607           
;;;1608           /* Wait until the complete message has been processed */
;;;1609           counter = 0;
;;;1610           do
;;;1611           {
;;;1612             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1613             counter++;
;;;1614           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1615   
;;;1616           if (busystatus != RESET)
;;;1617           {
;;;1618             status = ERROR;
;;;1619           }
;;;1620           else
;;;1621           {
;;;1622             /* Wait until the OFNE flag is reset */
;;;1623             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1624             {
;;;1625             }
;;;1626             
;;;1627             /* Read the Output block from the Output FIFO */
;;;1628             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1629             outputaddr+=4;
;;;1630             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1631             outputaddr+=4;
;;;1632             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1633             outputaddr+=4;
;;;1634             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1635             outputaddr+=4;
;;;1636           }
;;;1637         }
;;;1638       }
;;;1639       
;;;1640       /***************************** final phase ********************************/
;;;1641       /* Select final phase */
;;;1642       CRYP_PhaseConfig(CRYP_Phase_Final);
;;;1643       
;;;1644       /* Enable Crypto processor */
;;;1645       CRYP_Cmd(ENABLE);
;;;1646       
;;;1647       if(CRYP_GetCmdStatus() == DISABLE)
;;;1648       {
;;;1649         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1650            the CRYP peripheral (please check the device sales type. */
;;;1651         return(ERROR);
;;;1652       }
;;;1653       
;;;1654       ctraddr = (uint32_t)ctr;
;;;1655       /* Write the counter block in the IN FIFO */
;;;1656       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1657       ctraddr+=4;
;;;1658       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1659       ctraddr+=4;
;;;1660       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1661       ctraddr+=4;
;;;1662       /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
;;;1663       CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
;;;1664       
;;;1665       /* Wait until the OFNE flag is reset */
;;;1666       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1667       {
;;;1668       }
;;;1669       
;;;1670       /* Read the Authentaication TAG (MAC) in the IN FIFO */
;;;1671       temptag[0] = CRYP_DataOut();
;;;1672       temptag[1] = CRYP_DataOut();
;;;1673       temptag[2] = CRYP_DataOut();
;;;1674       temptag[3] = CRYP_DataOut();
;;;1675     }
;;;1676     
;;;1677     /* Copy temporary authentication TAG in user TAG buffer */
;;;1678     for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
;;;1679     {
;;;1680       /* Set the authentication TAG buffer */
;;;1681       *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
;;;1682     }
;;;1683     
;;;1684     /* Disable Crypto */
;;;1685     CRYP_Cmd(DISABLE);
;;;1686   
;;;1687     return status;
;;;1688   }
00030c  b021              ADD      sp,sp,#0x84
00030e  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.786|
000312  2001              MOVS     r0,#1                 ;1357
000314  f7fffffe          BL       CRYP_GetFlagStatus
000318  2800              CMP      r0,#0                 ;1357
00031a  d0fa              BEQ      |L2.786|
00031c  6828              LDR      r0,[r5,#0]            ;1362
00031e  f7fffffe          BL       CRYP_DataIn
000322  1d2d              ADDS     r5,r5,#4              ;1363
000324  6828              LDR      r0,[r5,#0]            ;1364
000326  f7fffffe          BL       CRYP_DataIn
00032a  1d2d              ADDS     r5,r5,#4              ;1365
00032c  6828              LDR      r0,[r5,#0]            ;1366
00032e  f7fffffe          BL       CRYP_DataIn
000332  1d2d              ADDS     r5,r5,#4              ;1367
000334  6828              LDR      r0,[r5,#0]            ;1368
000336  e000              B        |L2.826|
                  |L2.824|
000338  e089              B        |L2.1102|
                  |L2.826|
00033a  f7fffffe          BL       CRYP_DataIn
00033e  1d2d              ADDS     r5,r5,#4              ;1369
000340  f10a0a10          ADD      r10,r10,#0x10         ;1354
                  |L2.836|
000344  45a2              CMP      r10,r4                ;1354
000346  d3e4              BCC      |L2.786|
000348  2400              MOVS     r4,#0                 ;1373
                  |L2.842|
00034a  2010              MOVS     r0,#0x10              ;1376
00034c  f7fffffe          BL       CRYP_GetFlagStatus
000350  1c64              ADDS     r4,r4,#1              ;1377
000352  455c              CMP      r4,r11                ;1378
000354  d001              BEQ      |L2.858|
000356  2800              CMP      r0,#0                 ;1378
000358  d1f7              BNE      |L2.842|
                  |L2.858|
00035a  b108              CBZ      r0,|L2.864|
00035c  f04f0800          MOV      r8,#0                 ;1382
                  |L2.864|
000360  f1b90f00          CMP      r9,#0                 ;1387
000364  d047              BEQ      |L2.1014|
000366  f44f3000          MOV      r0,#0x20000           ;1390
00036a  f7fffffe          BL       CRYP_PhaseConfig
00036e  2001              MOVS     r0,#1                 ;1393
000370  f7fffffe          BL       CRYP_Cmd
000374  f7fffffe          BL       CRYP_GetCmdStatus
000378  b108              CBZ      r0,|L2.894|
00037a  2500              MOVS     r5,#0                 ;1402
00037c  e036              B        |L2.1004|
                  |L2.894|
00037e  2000              MOVS     r0,#0                 ;1399
000380  e7c4              B        |L2.780|
                  |L2.898|
000382  2001              MOVS     r0,#1                 ;1405
000384  f7fffffe          BL       CRYP_GetFlagStatus
000388  2800              CMP      r0,#0                 ;1405
00038a  d0fa              BEQ      |L2.898|
00038c  6830              LDR      r0,[r6,#0]            ;1410
00038e  f7fffffe          BL       CRYP_DataIn
000392  1d36              ADDS     r6,r6,#4              ;1411
000394  6830              LDR      r0,[r6,#0]            ;1412
000396  f7fffffe          BL       CRYP_DataIn
00039a  1d36              ADDS     r6,r6,#4              ;1413
00039c  6830              LDR      r0,[r6,#0]            ;1414
00039e  f7fffffe          BL       CRYP_DataIn
0003a2  1d36              ADDS     r6,r6,#4              ;1415
0003a4  6830              LDR      r0,[r6,#0]            ;1416
0003a6  f7fffffe          BL       CRYP_DataIn
0003aa  1d36              ADDS     r6,r6,#4              ;1417
0003ac  2400              MOVS     r4,#0                 ;1420
                  |L2.942|
0003ae  2010              MOVS     r0,#0x10              ;1423
0003b0  f7fffffe          BL       CRYP_GetFlagStatus
0003b4  1c64              ADDS     r4,r4,#1              ;1424
0003b6  455c              CMP      r4,r11                ;1425
0003b8  d001              BEQ      |L2.958|
0003ba  2800              CMP      r0,#0                 ;1425
0003bc  d1f7              BNE      |L2.942|
                  |L2.958|
0003be  b110              CBZ      r0,|L2.966|
0003c0  f04f0800          MOV      r8,#0                 ;1429
0003c4  e011              B        |L2.1002|
                  |L2.966|
0003c6  2004              MOVS     r0,#4                 ;1434
0003c8  f7fffffe          BL       CRYP_GetFlagStatus
0003cc  2800              CMP      r0,#0                 ;1434
0003ce  d0fa              BEQ      |L2.966|
0003d0  f7fffffe          BL       CRYP_DataOut
0003d4  6038              STR      r0,[r7,#0]            ;1439
0003d6  f7fffffe          BL       CRYP_DataOut
0003da  6078              STR      r0,[r7,#4]            ;1441
0003dc  f7fffffe          BL       CRYP_DataOut
0003e0  60b8              STR      r0,[r7,#8]            ;1443
0003e2  f7fffffe          BL       CRYP_DataOut
0003e6  60f8              STR      r0,[r7,#0xc]          ;1445
0003e8  3710              ADDS     r7,r7,#0x10           ;1445
                  |L2.1002|
0003ea  3510              ADDS     r5,r5,#0x10           ;1402
                  |L2.1004|
0003ec  454d              CMP      r5,r9                 ;1402
0003ee  d202              BCS      |L2.1014|
0003f0  f1b80f00          CMP      r8,#0                 ;1402
0003f4  d1c5              BNE      |L2.898|
                  |L2.1014|
0003f6  f44f3040          MOV      r0,#0x30000           ;1453
0003fa  f7fffffe          BL       CRYP_PhaseConfig
0003fe  2001              MOVS     r0,#1                 ;1456
000400  f7fffffe          BL       CRYP_Cmd
000404  f7fffffe          BL       CRYP_GetCmdStatus
000408  b1f8              CBZ      r0,|L2.1098|
00040a  9804              LDR      r0,[sp,#0x10]         ;1467
00040c  f7fffffe          BL       CRYP_DataIn
000410  9805              LDR      r0,[sp,#0x14]         ;1469
000412  f7fffffe          BL       CRYP_DataIn
000416  9806              LDR      r0,[sp,#0x18]         ;1471
000418  f7fffffe          BL       CRYP_DataIn
00041c  9807              LDR      r0,[sp,#0x1c]         ;1474
00041e  f0207080          BIC      r0,r0,#0x1000000      ;1474
000422  f7fffffe          BL       CRYP_DataIn
                  |L2.1062|
000426  2004              MOVS     r0,#4                 ;1477
000428  f7fffffe          BL       CRYP_GetFlagStatus
00042c  2800              CMP      r0,#0                 ;1477
00042e  d0fa              BEQ      |L2.1062|
000430  f7fffffe          BL       CRYP_DataOut
000434  9000              STR      r0,[sp,#0]            ;1482
000436  f7fffffe          BL       CRYP_DataOut
00043a  9001              STR      r0,[sp,#4]            ;1483
00043c  f7fffffe          BL       CRYP_DataOut
000440  9002              STR      r0,[sp,#8]            ;1484
000442  f7fffffe          BL       CRYP_DataOut
000446  9003              STR      r0,[sp,#0xc]          ;1485
000448  e09c              B        |L2.1412|
                  |L2.1098|
00044a  2000              MOVS     r0,#0                 ;1462
00044c  e75e              B        |L2.780|
                  |L2.1102|
00044e  2000              MOVS     r0,#0                 ;1540
000450  e75c              B        |L2.780|
                  |L2.1106|
000452  2001              MOVS     r0,#1                 ;1546
000454  f7fffffe          BL       CRYP_GetFlagStatus
000458  2800              CMP      r0,#0                 ;1546
00045a  d0fa              BEQ      |L2.1106|
00045c  6828              LDR      r0,[r5,#0]            ;1551
00045e  f7fffffe          BL       CRYP_DataIn
000462  1d2d              ADDS     r5,r5,#4              ;1552
000464  6828              LDR      r0,[r5,#0]            ;1553
000466  f7fffffe          BL       CRYP_DataIn
00046a  1d2d              ADDS     r5,r5,#4              ;1554
00046c  6828              LDR      r0,[r5,#0]            ;1555
00046e  f7fffffe          BL       CRYP_DataIn
000472  1d2d              ADDS     r5,r5,#4              ;1556
000474  6828              LDR      r0,[r5,#0]            ;1557
000476  f7fffffe          BL       CRYP_DataIn
00047a  1d2d              ADDS     r5,r5,#4              ;1558
00047c  f10a0a10          ADD      r10,r10,#0x10         ;1543
                  |L2.1152|
000480  45a2              CMP      r10,r4                ;1543
000482  d3e6              BCC      |L2.1106|
000484  2400              MOVS     r4,#0                 ;1562
                  |L2.1158|
000486  2010              MOVS     r0,#0x10              ;1565
000488  f7fffffe          BL       CRYP_GetFlagStatus
00048c  1c64              ADDS     r4,r4,#1              ;1566
00048e  455c              CMP      r4,r11                ;1567
000490  d001              BEQ      |L2.1174|
000492  2800              CMP      r0,#0                 ;1567
000494  d1f7              BNE      |L2.1158|
                  |L2.1174|
000496  b108              CBZ      r0,|L2.1180|
000498  f04f0800          MOV      r8,#0                 ;1571
                  |L2.1180|
00049c  f1b90f00          CMP      r9,#0                 ;1576
0004a0  d047              BEQ      |L2.1330|
0004a2  f44f3000          MOV      r0,#0x20000           ;1579
0004a6  f7fffffe          BL       CRYP_PhaseConfig
0004aa  2001              MOVS     r0,#1                 ;1582
0004ac  f7fffffe          BL       CRYP_Cmd
0004b0  f7fffffe          BL       CRYP_GetCmdStatus
0004b4  b108              CBZ      r0,|L2.1210|
0004b6  2500              MOVS     r5,#0                 ;1591
0004b8  e036              B        |L2.1320|
                  |L2.1210|
0004ba  2000              MOVS     r0,#0                 ;1588
0004bc  e726              B        |L2.780|
                  |L2.1214|
0004be  2001              MOVS     r0,#1                 ;1594
0004c0  f7fffffe          BL       CRYP_GetFlagStatus
0004c4  2800              CMP      r0,#0                 ;1594
0004c6  d0fa              BEQ      |L2.1214|
0004c8  6830              LDR      r0,[r6,#0]            ;1599
0004ca  f7fffffe          BL       CRYP_DataIn
0004ce  1d36              ADDS     r6,r6,#4              ;1600
0004d0  6830              LDR      r0,[r6,#0]            ;1601
0004d2  f7fffffe          BL       CRYP_DataIn
0004d6  1d36              ADDS     r6,r6,#4              ;1602
0004d8  6830              LDR      r0,[r6,#0]            ;1603
0004da  f7fffffe          BL       CRYP_DataIn
0004de  1d36              ADDS     r6,r6,#4              ;1604
0004e0  6830              LDR      r0,[r6,#0]            ;1605
0004e2  f7fffffe          BL       CRYP_DataIn
0004e6  1d36              ADDS     r6,r6,#4              ;1606
0004e8  2400              MOVS     r4,#0                 ;1609
                  |L2.1258|
0004ea  2010              MOVS     r0,#0x10              ;1612
0004ec  f7fffffe          BL       CRYP_GetFlagStatus
0004f0  1c64              ADDS     r4,r4,#1              ;1613
0004f2  455c              CMP      r4,r11                ;1614
0004f4  d001              BEQ      |L2.1274|
0004f6  2800              CMP      r0,#0                 ;1614
0004f8  d1f7              BNE      |L2.1258|
                  |L2.1274|
0004fa  b110              CBZ      r0,|L2.1282|
0004fc  f04f0800          MOV      r8,#0                 ;1618
000500  e011              B        |L2.1318|
                  |L2.1282|
000502  2004              MOVS     r0,#4                 ;1623
000504  f7fffffe          BL       CRYP_GetFlagStatus
000508  2800              CMP      r0,#0                 ;1623
00050a  d0fa              BEQ      |L2.1282|
00050c  f7fffffe          BL       CRYP_DataOut
000510  6038              STR      r0,[r7,#0]            ;1628
000512  f7fffffe          BL       CRYP_DataOut
000516  6078              STR      r0,[r7,#4]            ;1630
000518  f7fffffe          BL       CRYP_DataOut
00051c  60b8              STR      r0,[r7,#8]            ;1632
00051e  f7fffffe          BL       CRYP_DataOut
000522  60f8              STR      r0,[r7,#0xc]          ;1634
000524  3710              ADDS     r7,r7,#0x10           ;1634
                  |L2.1318|
000526  3510              ADDS     r5,r5,#0x10           ;1591
                  |L2.1320|
000528  454d              CMP      r5,r9                 ;1591
00052a  d202              BCS      |L2.1330|
00052c  f1b80f00          CMP      r8,#0                 ;1591
000530  d1c5              BNE      |L2.1214|
                  |L2.1330|
000532  f44f3040          MOV      r0,#0x30000           ;1642
000536  f7fffffe          BL       CRYP_PhaseConfig
00053a  2001              MOVS     r0,#1                 ;1645
00053c  f7fffffe          BL       CRYP_Cmd
000540  f7fffffe          BL       CRYP_GetCmdStatus
000544  b308              CBZ      r0,|L2.1418|
000546  9804              LDR      r0,[sp,#0x10]         ;1656
000548  f7fffffe          BL       CRYP_DataIn
00054c  9805              LDR      r0,[sp,#0x14]         ;1658
00054e  f7fffffe          BL       CRYP_DataIn
000552  9806              LDR      r0,[sp,#0x18]         ;1660
000554  f7fffffe          BL       CRYP_DataIn
000558  9807              LDR      r0,[sp,#0x1c]         ;1663
00055a  f0207080          BIC      r0,r0,#0x1000000      ;1663
00055e  f7fffffe          BL       CRYP_DataIn
                  |L2.1378|
000562  2004              MOVS     r0,#4                 ;1666
000564  f7fffffe          BL       CRYP_GetFlagStatus
000568  2800              CMP      r0,#0                 ;1666
00056a  d0fa              BEQ      |L2.1378|
00056c  f7fffffe          BL       CRYP_DataOut
000570  9000              STR      r0,[sp,#0]            ;1671
000572  f7fffffe          BL       CRYP_DataOut
000576  9001              STR      r0,[sp,#4]            ;1672
000578  f7fffffe          BL       CRYP_DataOut
00057c  9002              STR      r0,[sp,#8]            ;1673
00057e  f7fffffe          BL       CRYP_DataOut
000582  9003              STR      r0,[sp,#0xc]          ;1674
                  |L2.1412|
000584  2000              MOVS     r0,#0                 ;1678
000586  4669              MOV      r1,sp                 ;1159
000588  e005              B        |L2.1430|
                  |L2.1418|
00058a  2000              MOVS     r0,#0                 ;1651
00058c  e6be              B        |L2.780|
                  |L2.1422|
00058e  9a0c              LDR      r2,[sp,#0x30]         ;1681
000590  5c0b              LDRB     r3,[r1,r0]            ;1681
000592  5413              STRB     r3,[r2,r0]            ;1681
000594  1c40              ADDS     r0,r0,#1              ;1678
                  |L2.1430|
000596  9a32              LDR      r2,[sp,#0xc8]         ;1678
000598  4290              CMP      r0,r2                 ;1678
00059a  d3f8              BCC      |L2.1422|
00059c  2000              MOVS     r0,#0                 ;1685
00059e  f7fffffe          BL       CRYP_Cmd
0005a2  4640              MOV      r0,r8                 ;1687
0005a4  e6b2              B        |L2.780|
;;;1689   
                          ENDP


                          AREA ||i.CRYP_AES_CTR||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CTR PROC
;;;495      */
;;;496    ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;497                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;498                             uint8_t *Output)
;;;499    {
000004  b091              SUB      sp,sp,#0x44
000006  4689              MOV      r9,r1
000008  e9dda61f          LDRD     r10,r6,[sp,#0x7c]
00000c  9d1e              LDR      r5,[sp,#0x78]
00000e  4614              MOV      r4,r2
000010  469b              MOV      r11,r3
;;;500      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;501      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;502      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;503      __IO uint32_t counter = 0;
;;;504      uint32_t busystatus = 0;
;;;505      ErrorStatus status = SUCCESS;
000012  f04f0801          MOV      r8,#1
;;;506      uint32_t keyaddr    = (uint32_t)Key;
;;;507      uint32_t inputaddr  = (uint32_t)Input;
;;;508      uint32_t outputaddr = (uint32_t)Output;
;;;509      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;510      uint32_t i = 0;
000016  2700              MOVS     r7,#0
;;;511    
;;;512      /* Crypto structures initialisation*/
;;;513      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000018  a805              ADD      r0,sp,#0x14
00001a  f7fffffe          BL       CRYP_KeyStructInit
;;;514    
;;;515      switch(Keysize)
00001e  4658              MOV      r0,r11
000020  46bb              MOV      r11,r7                ;503
000022  2880              CMP      r0,#0x80
000024  d049              BEQ      |L3.186|
000026  f44f7180          MOV      r1,#0x100
00002a  28c0              CMP      r0,#0xc0
00002c  d054              BEQ      |L3.216|
00002e  4288              CMP      r0,r1
000030  d119              BNE      |L3.102|
;;;516      {
;;;517        case 128:
;;;518        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;519        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;520        keyaddr+=4;
;;;521        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;522        keyaddr+=4;
;;;523        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;524        keyaddr+=4;
;;;525        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;526        break;
;;;527        case 192:
;;;528        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;529        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;530        keyaddr+=4;
;;;531        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;532        keyaddr+=4;
;;;533        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;534        keyaddr+=4;
;;;535        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;536        keyaddr+=4;
;;;537        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;538        keyaddr+=4;
;;;539        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;540        break;
;;;541        case 256:
;;;542        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000032  0040              LSLS     r0,r0,#1
000034  9010              STR      r0,[sp,#0x40]
;;;543        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000036  6820              LDR      r0,[r4,#0]
000038  ba00              REV      r0,r0
00003a  9005              STR      r0,[sp,#0x14]
;;;544        keyaddr+=4;
;;;545        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00003c  6860              LDR      r0,[r4,#4]
00003e  ba00              REV      r0,r0
000040  9006              STR      r0,[sp,#0x18]
;;;546        keyaddr+=4;
;;;547        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000042  68a0              LDR      r0,[r4,#8]
000044  ba00              REV      r0,r0
000046  9007              STR      r0,[sp,#0x1c]
;;;548        keyaddr+=4;
;;;549        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000048  68e0              LDR      r0,[r4,#0xc]
00004a  ba00              REV      r0,r0
00004c  9008              STR      r0,[sp,#0x20]
;;;550        keyaddr+=4;
;;;551        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004e  6920              LDR      r0,[r4,#0x10]
000050  ba00              REV      r0,r0
000052  9009              STR      r0,[sp,#0x24]
;;;552        keyaddr+=4;
;;;553        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000054  6960              LDR      r0,[r4,#0x14]
000056  ba00              REV      r0,r0
000058  900a              STR      r0,[sp,#0x28]
;;;554        keyaddr+=4;
;;;555        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005a  69a0              LDR      r0,[r4,#0x18]
00005c  ba00              REV      r0,r0
00005e  900b              STR      r0,[sp,#0x2c]
;;;556        keyaddr+=4;
;;;557        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000060  69e0              LDR      r0,[r4,#0x1c]
000062  ba00              REV      r0,r0
000064  900c              STR      r0,[sp,#0x30]
                  |L3.102|
;;;558        break;
;;;559        default:
;;;560        break;
;;;561      }
;;;562      /* CRYP Initialization Vectors */
;;;563      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000066  f8d90000          LDR      r0,[r9,#0]
00006a  ba00              REV      r0,r0
00006c  9001              STR      r0,[sp,#4]
;;;564      ivaddr+=4;
;;;565      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00006e  f8d90004          LDR      r0,[r9,#4]
000072  ba00              REV      r0,r0
000074  9002              STR      r0,[sp,#8]
;;;566      ivaddr+=4;
;;;567      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
000076  f8d90008          LDR      r0,[r9,#8]
00007a  ba00              REV      r0,r0
00007c  9003              STR      r0,[sp,#0xc]
;;;568      ivaddr+=4;
;;;569      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
00007e  f8d9000c          LDR      r0,[r9,#0xc]
000082  ba00              REV      r0,r0
000084  9004              STR      r0,[sp,#0x10]
;;;570    
;;;571      /* Key Initialisation */
;;;572      CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000086  a805              ADD      r0,sp,#0x14
000088  f7fffffe          BL       CRYP_KeyInit
;;;573    
;;;574      /*------------------ AES Decryption ------------------*/
;;;575      if(Mode == MODE_DECRYPT) /* AES decryption */
00008c  9811              LDR      r0,[sp,#0x44]
00008e  b3b8              CBZ      r0,|L3.256|
;;;576      {
;;;577        /* Crypto Init for decryption process */
;;;578        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;579      }
;;;580      /*------------------ AES Encryption ------------------*/
;;;581      else /* AES encryption */
;;;582      {
;;;583        /* Crypto Init for Encryption process */
;;;584        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
000090  f8cdb034          STR      r11,[sp,#0x34]
                  |L3.148|
;;;585      }
;;;586      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
000094  2030              MOVS     r0,#0x30
000096  900e              STR      r0,[sp,#0x38]
;;;587      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000098  2080              MOVS     r0,#0x80
00009a  900f              STR      r0,[sp,#0x3c]
;;;588      CRYP_Init(&AES_CRYP_InitStructure);
00009c  a80d              ADD      r0,sp,#0x34
00009e  f7fffffe          BL       CRYP_Init
;;;589    
;;;590      /* CRYP Initialization Vectors */
;;;591      CRYP_IVInit(&AES_CRYP_IVInitStructure);
0000a2  a801              ADD      r0,sp,#4
0000a4  f7fffffe          BL       CRYP_IVInit
;;;592    
;;;593      /* Flush IN/OUT FIFOs */
;;;594      CRYP_FIFOFlush();
0000a8  f7fffffe          BL       CRYP_FIFOFlush
;;;595    
;;;596      /* Enable Crypto processor */
;;;597      CRYP_Cmd(ENABLE);
0000ac  2001              MOVS     r0,#1
0000ae  f7fffffe          BL       CRYP_Cmd
;;;598    
;;;599      if(CRYP_GetCmdStatus() == DISABLE)
0000b2  f7fffffe          BL       CRYP_GetCmdStatus
0000b6  b338              CBZ      r0,|L3.264|
0000b8  e057              B        |L3.362|
                  |L3.186|
0000ba  f8cdb040          STR      r11,[sp,#0x40]        ;518
0000be  6820              LDR      r0,[r4,#0]            ;519
0000c0  ba00              REV      r0,r0                 ;519
0000c2  9009              STR      r0,[sp,#0x24]         ;519
0000c4  6860              LDR      r0,[r4,#4]            ;521
0000c6  ba00              REV      r0,r0                 ;521
0000c8  900a              STR      r0,[sp,#0x28]         ;521
0000ca  68a0              LDR      r0,[r4,#8]            ;523
0000cc  ba00              REV      r0,r0                 ;523
0000ce  900b              STR      r0,[sp,#0x2c]         ;523
0000d0  68e0              LDR      r0,[r4,#0xc]          ;525
0000d2  ba00              REV      r0,r0                 ;525
0000d4  900c              STR      r0,[sp,#0x30]         ;525
0000d6  e7c6              B        |L3.102|
                  |L3.216|
0000d8  9110              STR      r1,[sp,#0x40]         ;528
0000da  6820              LDR      r0,[r4,#0]            ;529
0000dc  ba00              REV      r0,r0                 ;529
0000de  9007              STR      r0,[sp,#0x1c]         ;529
0000e0  6860              LDR      r0,[r4,#4]            ;531
0000e2  ba00              REV      r0,r0                 ;531
0000e4  9008              STR      r0,[sp,#0x20]         ;531
0000e6  68a0              LDR      r0,[r4,#8]            ;533
0000e8  ba00              REV      r0,r0                 ;533
0000ea  9009              STR      r0,[sp,#0x24]         ;533
0000ec  68e0              LDR      r0,[r4,#0xc]          ;535
0000ee  ba00              REV      r0,r0                 ;535
0000f0  900a              STR      r0,[sp,#0x28]         ;535
0000f2  6920              LDR      r0,[r4,#0x10]         ;537
0000f4  ba00              REV      r0,r0                 ;537
0000f6  900b              STR      r0,[sp,#0x2c]         ;537
0000f8  6960              LDR      r0,[r4,#0x14]         ;539
0000fa  ba00              REV      r0,r0                 ;539
0000fc  900c              STR      r0,[sp,#0x30]         ;539
0000fe  e7b2              B        |L3.102|
                  |L3.256|
000100  e7ff              B        |L3.258|
                  |L3.258|
000102  2004              MOVS     r0,#4                 ;578
000104  900d              STR      r0,[sp,#0x34]         ;578
000106  e7c5              B        |L3.148|
                  |L3.264|
;;;600      {
;;;601        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;602           the CRYP peripheral (please check the device sales type. */
;;;603        return(ERROR);
000108  2000              MOVS     r0,#0
                  |L3.266|
;;;604      }
;;;605      
;;;606      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
;;;607      {
;;;608    
;;;609        /* Write the Input block in the IN FIFO */
;;;610        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;611        inputaddr+=4;
;;;612        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;613        inputaddr+=4;
;;;614        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;615        inputaddr+=4;
;;;616        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;617        inputaddr+=4;
;;;618        /* Wait until the complete message has been processed */
;;;619        counter = 0;
;;;620        do
;;;621        {
;;;622          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;623          counter++;
;;;624        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;625    
;;;626        if (busystatus != RESET)
;;;627       {
;;;628           status = ERROR;
;;;629        }
;;;630        else
;;;631        {
;;;632    
;;;633          /* Read the Output block from the Output FIFO */
;;;634          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;635          outputaddr+=4;
;;;636          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;637          outputaddr+=4;
;;;638          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;639          outputaddr+=4;
;;;640          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;641          outputaddr+=4;
;;;642        }
;;;643      }
;;;644      /* Disable Crypto */
;;;645      CRYP_Cmd(DISABLE);
;;;646    
;;;647      return status;
;;;648    }
00010a  b015              ADD      sp,sp,#0x54
00010c  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.272|
000110  6828              LDR      r0,[r5,#0]            ;610
000112  f7fffffe          BL       CRYP_DataIn
000116  1d2d              ADDS     r5,r5,#4              ;611
000118  6828              LDR      r0,[r5,#0]            ;612
00011a  f7fffffe          BL       CRYP_DataIn
00011e  1d2d              ADDS     r5,r5,#4              ;613
000120  6828              LDR      r0,[r5,#0]            ;614
000122  f7fffffe          BL       CRYP_DataIn
000126  1d2d              ADDS     r5,r5,#4              ;615
000128  6828              LDR      r0,[r5,#0]            ;616
00012a  f7fffffe          BL       CRYP_DataIn
00012e  1d2d              ADDS     r5,r5,#4              ;617
000130  2400              MOVS     r4,#0                 ;619
000132  f44f3980          MOV      r9,#0x10000           ;624
                  |L3.310|
000136  2010              MOVS     r0,#0x10              ;622
000138  f7fffffe          BL       CRYP_GetFlagStatus
00013c  1c64              ADDS     r4,r4,#1              ;623
00013e  454c              CMP      r4,r9                 ;624
000140  d001              BEQ      |L3.326|
000142  2800              CMP      r0,#0                 ;624
000144  d1f7              BNE      |L3.310|
                  |L3.326|
000146  b110              CBZ      r0,|L3.334|
000148  f04f0800          MOV      r8,#0                 ;628
00014c  e00c              B        |L3.360|
                  |L3.334|
00014e  f7fffffe          BL       CRYP_DataOut
000152  6030              STR      r0,[r6,#0]            ;634
000154  f7fffffe          BL       CRYP_DataOut
000158  6070              STR      r0,[r6,#4]            ;636
00015a  f7fffffe          BL       CRYP_DataOut
00015e  60b0              STR      r0,[r6,#8]            ;638
000160  f7fffffe          BL       CRYP_DataOut
000164  60f0              STR      r0,[r6,#0xc]          ;640
000166  3610              ADDS     r6,r6,#0x10           ;640
                  |L3.360|
000168  3710              ADDS     r7,r7,#0x10           ;606
                  |L3.362|
00016a  4557              CMP      r7,r10                ;606
00016c  d202              BCS      |L3.372|
00016e  f1b80f00          CMP      r8,#0                 ;606
000172  d1cd              BNE      |L3.272|
                  |L3.372|
000174  2000              MOVS     r0,#0                 ;645
000176  f7fffffe          BL       CRYP_Cmd
00017a  4640              MOV      r0,r8                 ;647
00017c  e7c5              B        |L3.266|
;;;649    
                          ENDP


                          AREA ||i.CRYP_AES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_AES_ECB PROC
;;;105      */
;;;106    ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;107                             uint8_t* Input, uint32_t Ilength, uint8_t* Output)
;;;108    {
000004  b08d              SUB      sp,sp,#0x34
000006  460c              MOV      r4,r1
000008  e9dda61a          LDRD     r10,r6,[sp,#0x68]
00000c  4691              MOV      r9,r2
00000e  461d              MOV      r5,r3
;;;109      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;110      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;111      __IO uint32_t counter = 0;
000010  2700              MOVS     r7,#0
;;;112      uint32_t busystatus = 0;
;;;113      ErrorStatus status = SUCCESS;
000012  f04f0801          MOV      r8,#1
;;;114      uint32_t keyaddr    = (uint32_t)Key;
;;;115      uint32_t inputaddr  = (uint32_t)Input;
;;;116      uint32_t outputaddr = (uint32_t)Output;
;;;117      uint32_t i = 0;
;;;118    
;;;119      /* Crypto structures initialisation*/
;;;120      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       CRYP_KeyStructInit
00001c  46bb              MOV      r11,r7                ;111
;;;121    
;;;122      switch(Keysize)
00001e  f1b90f80          CMP      r9,#0x80
000022  d03a              BEQ      |L4.154|
000024  f44f7080          MOV      r0,#0x100
000028  f1b90fc0          CMP      r9,#0xc0
00002c  d044              BEQ      |L4.184|
00002e  4581              CMP      r9,r0
000030  d119              BNE      |L4.102|
;;;123      {
;;;124        case 128:
;;;125        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;126        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;127        keyaddr+=4;
;;;128        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;129        keyaddr+=4;
;;;130        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;131        keyaddr+=4;
;;;132        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;133        break;
;;;134        case 192:
;;;135        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;136        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;137        keyaddr+=4;
;;;138        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;139        keyaddr+=4;
;;;140        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;141        keyaddr+=4;
;;;142        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;143        keyaddr+=4;
;;;144        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;145        keyaddr+=4;
;;;146        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;147        break;
;;;148        case 256:
;;;149        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000032  0040              LSLS     r0,r0,#1
000034  900c              STR      r0,[sp,#0x30]
;;;150        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000036  6820              LDR      r0,[r4,#0]
000038  ba00              REV      r0,r0
00003a  9001              STR      r0,[sp,#4]
;;;151        keyaddr+=4;
;;;152        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00003c  6860              LDR      r0,[r4,#4]
00003e  ba00              REV      r0,r0
000040  9002              STR      r0,[sp,#8]
;;;153        keyaddr+=4;
;;;154        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000042  68a0              LDR      r0,[r4,#8]
000044  ba00              REV      r0,r0
000046  9003              STR      r0,[sp,#0xc]
;;;155        keyaddr+=4;
;;;156        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000048  68e0              LDR      r0,[r4,#0xc]
00004a  ba00              REV      r0,r0
00004c  9004              STR      r0,[sp,#0x10]
;;;157        keyaddr+=4;
;;;158        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004e  6920              LDR      r0,[r4,#0x10]
000050  ba00              REV      r0,r0
000052  9005              STR      r0,[sp,#0x14]
;;;159        keyaddr+=4;
;;;160        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000054  6960              LDR      r0,[r4,#0x14]
000056  ba00              REV      r0,r0
000058  9006              STR      r0,[sp,#0x18]
;;;161        keyaddr+=4;
;;;162        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005a  69a0              LDR      r0,[r4,#0x18]
00005c  ba00              REV      r0,r0
00005e  9007              STR      r0,[sp,#0x1c]
;;;163        keyaddr+=4;
;;;164        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000060  69e0              LDR      r0,[r4,#0x1c]
000062  ba00              REV      r0,r0
000064  9008              STR      r0,[sp,#0x20]
                  |L4.102|
;;;165        break;
;;;166        default:
;;;167        break;
;;;168      }
;;;169    
;;;170      /*------------------ AES Decryption ------------------*/
;;;171      if(Mode == MODE_DECRYPT) /* AES decryption */
000066  980d              LDR      r0,[sp,#0x34]
;;;172      {
;;;173        /* Flush IN/OUT FIFOs */
;;;174        CRYP_FIFOFlush();
;;;175    
;;;176        /* Crypto Init for Key preparation for decryption process */
;;;177        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;178        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
;;;179        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
;;;180        CRYP_Init(&AES_CRYP_InitStructure);
;;;181    
;;;182        /* Key Initialisation */
;;;183        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;184    
;;;185        /* Enable Crypto processor */
;;;186        CRYP_Cmd(ENABLE);
;;;187    
;;;188        /* wait until the Busy flag is RESET */
;;;189        do
;;;190        {
;;;191          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;192          counter++;
;;;193        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000068  f44f3980          MOV      r9,#0x10000
00006c  b3c0              CBZ      r0,|L4.224|
;;;194    
;;;195        if (busystatus != RESET)
;;;196       {
;;;197           status = ERROR;
;;;198        }
;;;199        else
;;;200        {
;;;201          /* Crypto Init for decryption process */  
;;;202          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;203        }
;;;204      }
;;;205      /*------------------ AES Encryption ------------------*/
;;;206      else /* AES encryption */
;;;207      {
;;;208    
;;;209        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
00006e  a801              ADD      r0,sp,#4
000070  f7fffffe          BL       CRYP_KeyInit
;;;210    
;;;211        /* Crypto Init for Encryption process */
;;;212        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
000074  f8cdb024          STR      r11,[sp,#0x24]
                  |L4.120|
;;;213      }
;;;214    
;;;215      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
000078  2020              MOVS     r0,#0x20
00007a  900a              STR      r0,[sp,#0x28]
;;;216      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00007c  2080              MOVS     r0,#0x80
00007e  900b              STR      r0,[sp,#0x2c]
;;;217      CRYP_Init(&AES_CRYP_InitStructure);
000080  a809              ADD      r0,sp,#0x24
000082  f7fffffe          BL       CRYP_Init
;;;218    
;;;219      /* Flush IN/OUT FIFOs */
;;;220      CRYP_FIFOFlush();
000086  f7fffffe          BL       CRYP_FIFOFlush
;;;221    
;;;222      /* Enable Crypto processor */
;;;223      CRYP_Cmd(ENABLE);
00008a  2001              MOVS     r0,#1
00008c  f7fffffe          BL       CRYP_Cmd
;;;224    
;;;225      if(CRYP_GetCmdStatus() == DISABLE)
000090  f7fffffe          BL       CRYP_GetCmdStatus
000094  b3f0              CBZ      r0,|L4.276|
;;;226      {
;;;227        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;228           the CRYP peripheral (please check the device sales type. */
;;;229        return(ERROR);
;;;230      }
;;;231      
;;;232      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
000096  2700              MOVS     r7,#0
000098  e073              B        |L4.386|
                  |L4.154|
00009a  f8cdb030          STR      r11,[sp,#0x30]        ;125
00009e  6820              LDR      r0,[r4,#0]            ;126
0000a0  ba00              REV      r0,r0                 ;126
0000a2  9005              STR      r0,[sp,#0x14]         ;126
0000a4  6860              LDR      r0,[r4,#4]            ;128
0000a6  ba00              REV      r0,r0                 ;128
0000a8  9006              STR      r0,[sp,#0x18]         ;128
0000aa  68a0              LDR      r0,[r4,#8]            ;130
0000ac  ba00              REV      r0,r0                 ;130
0000ae  9007              STR      r0,[sp,#0x1c]         ;130
0000b0  68e0              LDR      r0,[r4,#0xc]          ;132
0000b2  ba00              REV      r0,r0                 ;132
0000b4  9008              STR      r0,[sp,#0x20]         ;132
0000b6  e7d6              B        |L4.102|
                  |L4.184|
0000b8  900c              STR      r0,[sp,#0x30]         ;135
0000ba  6820              LDR      r0,[r4,#0]            ;136
0000bc  ba00              REV      r0,r0                 ;136
0000be  9003              STR      r0,[sp,#0xc]          ;136
0000c0  6860              LDR      r0,[r4,#4]            ;138
0000c2  ba00              REV      r0,r0                 ;138
0000c4  9004              STR      r0,[sp,#0x10]         ;138
0000c6  68a0              LDR      r0,[r4,#8]            ;140
0000c8  ba00              REV      r0,r0                 ;140
0000ca  9005              STR      r0,[sp,#0x14]         ;140
0000cc  68e0              LDR      r0,[r4,#0xc]          ;142
0000ce  ba00              REV      r0,r0                 ;142
0000d0  9006              STR      r0,[sp,#0x18]         ;142
0000d2  6920              LDR      r0,[r4,#0x10]         ;144
0000d4  ba00              REV      r0,r0                 ;144
0000d6  9007              STR      r0,[sp,#0x1c]         ;144
0000d8  6960              LDR      r0,[r4,#0x14]         ;146
0000da  ba00              REV      r0,r0                 ;146
0000dc  9008              STR      r0,[sp,#0x20]         ;146
0000de  e7c2              B        |L4.102|
                  |L4.224|
0000e0  e7ff              B        |L4.226|
                  |L4.226|
0000e2  f7fffffe          BL       CRYP_FIFOFlush
0000e6  2404              MOVS     r4,#4                 ;177
0000e8  9409              STR      r4,[sp,#0x24]         ;177
0000ea  2038              MOVS     r0,#0x38              ;178
0000ec  900a              STR      r0,[sp,#0x28]         ;178
0000ee  f8cdb02c          STR      r11,[sp,#0x2c]        ;179
0000f2  a809              ADD      r0,sp,#0x24           ;180
0000f4  f7fffffe          BL       CRYP_Init
0000f8  a801              ADD      r0,sp,#4              ;183
0000fa  f7fffffe          BL       CRYP_KeyInit
0000fe  2001              MOVS     r0,#1                 ;186
000100  f7fffffe          BL       CRYP_Cmd
                  |L4.260|
000104  2010              MOVS     r0,#0x10              ;191
000106  f7fffffe          BL       CRYP_GetFlagStatus
00010a  1c7f              ADDS     r7,r7,#1              ;192
00010c  454f              CMP      r7,r9                 ;193
00010e  d003              BEQ      |L4.280|
000110  2800              CMP      r0,#0                 ;193
000112  e000              B        |L4.278|
                  |L4.276|
000114  e006              B        |L4.292|
                  |L4.278|
000116  d1f5              BNE      |L4.260|
                  |L4.280|
000118  b110              CBZ      r0,|L4.288|
00011a  f04f0800          MOV      r8,#0                 ;197
00011e  e7ab              B        |L4.120|
                  |L4.288|
000120  9409              STR      r4,[sp,#0x24]         ;202
000122  e7a9              B        |L4.120|
                  |L4.292|
000124  2000              MOVS     r0,#0                 ;229
                  |L4.294|
;;;233      {
;;;234    
;;;235        /* Write the Input block in the IN FIFO */
;;;236        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;237        inputaddr+=4;
;;;238        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;239        inputaddr+=4;
;;;240        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;241        inputaddr+=4;
;;;242        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;243        inputaddr+=4;
;;;244    
;;;245        /* Wait until the complete message has been processed */
;;;246        counter = 0;
;;;247        do
;;;248        {
;;;249          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;250          counter++;
;;;251        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;252    
;;;253        if (busystatus != RESET)
;;;254       {
;;;255           status = ERROR;
;;;256        }
;;;257        else
;;;258        {
;;;259    
;;;260          /* Read the Output block from the Output FIFO */
;;;261          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;262          outputaddr+=4;
;;;263          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;264          outputaddr+=4;
;;;265          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;266          outputaddr+=4;
;;;267          *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
;;;268          outputaddr+=4;
;;;269        }
;;;270      }
;;;271    
;;;272      /* Disable Crypto */
;;;273      CRYP_Cmd(DISABLE);
;;;274    
;;;275      return status; 
;;;276    }
000126  b011              ADD      sp,sp,#0x44
000128  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.300|
00012c  6828              LDR      r0,[r5,#0]            ;236
00012e  f7fffffe          BL       CRYP_DataIn
000132  1d2d              ADDS     r5,r5,#4              ;237
000134  6828              LDR      r0,[r5,#0]            ;238
000136  f7fffffe          BL       CRYP_DataIn
00013a  1d2d              ADDS     r5,r5,#4              ;239
00013c  6828              LDR      r0,[r5,#0]            ;240
00013e  f7fffffe          BL       CRYP_DataIn
000142  1d2d              ADDS     r5,r5,#4              ;241
000144  6828              LDR      r0,[r5,#0]            ;242
000146  f7fffffe          BL       CRYP_DataIn
00014a  1d2d              ADDS     r5,r5,#4              ;243
00014c  2400              MOVS     r4,#0                 ;246
                  |L4.334|
00014e  2010              MOVS     r0,#0x10              ;249
000150  f7fffffe          BL       CRYP_GetFlagStatus
000154  1c64              ADDS     r4,r4,#1              ;250
000156  454c              CMP      r4,r9                 ;251
000158  d001              BEQ      |L4.350|
00015a  2800              CMP      r0,#0                 ;251
00015c  d1f7              BNE      |L4.334|
                  |L4.350|
00015e  b110              CBZ      r0,|L4.358|
000160  f04f0800          MOV      r8,#0                 ;255
000164  e00c              B        |L4.384|
                  |L4.358|
000166  f7fffffe          BL       CRYP_DataOut
00016a  6030              STR      r0,[r6,#0]            ;261
00016c  f7fffffe          BL       CRYP_DataOut
000170  6070              STR      r0,[r6,#4]            ;263
000172  f7fffffe          BL       CRYP_DataOut
000176  60b0              STR      r0,[r6,#8]            ;265
000178  f7fffffe          BL       CRYP_DataOut
00017c  60f0              STR      r0,[r6,#0xc]          ;267
00017e  3610              ADDS     r6,r6,#0x10           ;267
                  |L4.384|
000180  3710              ADDS     r7,r7,#0x10           ;232
                  |L4.386|
000182  4557              CMP      r7,r10                ;232
000184  d202              BCS      |L4.396|
000186  f1b80f00          CMP      r8,#0                 ;232
00018a  d1cf              BNE      |L4.300|
                  |L4.396|
00018c  2000              MOVS     r0,#0                 ;273
00018e  f7fffffe          BL       CRYP_Cmd
000192  4640              MOV      r0,r8                 ;275
000194  e7c7              B        |L4.294|
;;;277    
                          ENDP


                          AREA ||i.CRYP_AES_GCM||, CODE, READONLY, ALIGN=1

                  CRYP_AES_GCM PROC
;;;669      */
;;;670    ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;671                             uint8_t *Key, uint16_t Keysize,
;;;672                             uint8_t *Input, uint32_t ILength,
;;;673                             uint8_t *Header, uint32_t HLength,
;;;674                             uint8_t *Output, uint8_t *AuthTAG)
;;;675    {
000004  b093              SUB      sp,sp,#0x4c
000006  9e22              LDR      r6,[sp,#0x88]
000008  9d24              LDR      r5,[sp,#0x90]
00000a  9c20              LDR      r4,[sp,#0x80]
;;;676      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;677      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;678      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;679      __IO uint32_t counter = 0;
;;;680      uint32_t busystatus = 0;
;;;681      ErrorStatus status = SUCCESS;
00000c  f04f0b01          MOV      r11,#1
;;;682      uint32_t keyaddr    = (uint32_t)Key;
000010  9202              STR      r2,[sp,#8]
;;;683      uint32_t inputaddr  = (uint32_t)Input;
;;;684      uint32_t outputaddr = (uint32_t)Output;
;;;685      uint32_t ivaddr     = (uint32_t)InitVectors;
000012  9101              STR      r1,[sp,#4]
;;;686      uint32_t headeraddr = (uint32_t)Header;
;;;687      uint32_t tagaddr = (uint32_t)AuthTAG;
;;;688      uint64_t headerlength = HLength * 8;/* header length in bits */
000014  9823              LDR      r0,[sp,#0x8c]
000016  f04f0800          MOV      r8,#0
00001a  00c7              LSLS     r7,r0,#3
;;;689      uint64_t inputlength = ILength * 8;/* input length in bits */
00001c  9821              LDR      r0,[sp,#0x84]
00001e  46c2              MOV      r10,r8
000020  ea4f09c0          LSL      r9,r0,#3
;;;690      uint32_t loopcounter = 0;
;;;691    
;;;692      /* Crypto structures initialisation*/
;;;693      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000024  a807              ADD      r0,sp,#0x1c
000026  f7fffffe          BL       CRYP_KeyStructInit
;;;694    
;;;695      switch(Keysize)
00002a  9b16              LDR      r3,[sp,#0x58]
00002c  2b80              CMP      r3,#0x80
00002e  d05e              BEQ      |L5.238|
000030  f44f7080          MOV      r0,#0x100
000034  2bc0              CMP      r3,#0xc0
000036  d06b              BEQ      |L5.272|
000038  4283              CMP      r3,r0
00003a  d11b              BNE      |L5.116|
;;;696      {
;;;697        case 128:
;;;698        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;699        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;700        keyaddr+=4;
;;;701        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;702        keyaddr+=4;
;;;703        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;704        keyaddr+=4;
;;;705        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;706        break;
;;;707        case 192:
;;;708        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;709        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;710        keyaddr+=4;
;;;711        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;712        keyaddr+=4;
;;;713        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;714        keyaddr+=4;
;;;715        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;716        keyaddr+=4;
;;;717        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;718        keyaddr+=4;
;;;719        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;720        break;
;;;721        case 256:
;;;722        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
00003c  0040              LSLS     r0,r0,#1
00003e  9012              STR      r0,[sp,#0x48]
;;;723        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000040  9802              LDR      r0,[sp,#8]
000042  6800              LDR      r0,[r0,#0]
000044  ba00              REV      r0,r0
000046  9007              STR      r0,[sp,#0x1c]
;;;724        keyaddr+=4;
000048  9802              LDR      r0,[sp,#8]
;;;725        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00004a  6841              LDR      r1,[r0,#4]
00004c  ba09              REV      r1,r1
00004e  9108              STR      r1,[sp,#0x20]
;;;726        keyaddr+=4;
;;;727        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000050  6881              LDR      r1,[r0,#8]
000052  ba09              REV      r1,r1
000054  9109              STR      r1,[sp,#0x24]
;;;728        keyaddr+=4;
;;;729        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000056  68c1              LDR      r1,[r0,#0xc]
000058  ba09              REV      r1,r1
00005a  910a              STR      r1,[sp,#0x28]
;;;730        keyaddr+=4;
;;;731        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00005c  6901              LDR      r1,[r0,#0x10]
00005e  ba09              REV      r1,r1
000060  910b              STR      r1,[sp,#0x2c]
;;;732        keyaddr+=4;
;;;733        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000062  6941              LDR      r1,[r0,#0x14]
000064  ba09              REV      r1,r1
000066  910c              STR      r1,[sp,#0x30]
;;;734        keyaddr+=4;
;;;735        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000068  6981              LDR      r1,[r0,#0x18]
00006a  ba09              REV      r1,r1
00006c  910d              STR      r1,[sp,#0x34]
;;;736        keyaddr+=4;
;;;737        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00006e  69c0              LDR      r0,[r0,#0x1c]
000070  ba00              REV      r0,r0
000072  900e              STR      r0,[sp,#0x38]
                  |L5.116|
;;;738        break;
;;;739        default:
;;;740        break;
;;;741      }
;;;742      
;;;743      /* CRYP Initialization Vectors */
;;;744      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000074  9801              LDR      r0,[sp,#4]
000076  6800              LDR      r0,[r0,#0]
000078  ba00              REV      r0,r0
00007a  9003              STR      r0,[sp,#0xc]
;;;745      ivaddr+=4;
00007c  9801              LDR      r0,[sp,#4]
;;;746      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00007e  6841              LDR      r1,[r0,#4]
000080  ba09              REV      r1,r1
000082  9104              STR      r1,[sp,#0x10]
;;;747      ivaddr+=4;
;;;748      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
000084  6881              LDR      r1,[r0,#8]
000086  ba09              REV      r1,r1
000088  9105              STR      r1,[sp,#0x14]
;;;749      ivaddr+=4;
;;;750      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
00008a  68c0              LDR      r0,[r0,#0xc]
00008c  ba00              REV      r0,r0
00008e  9006              STR      r0,[sp,#0x18]
;;;751      
;;;752      /*------------------ AES Encryption ------------------*/
;;;753      if(Mode == MODE_ENCRYPT) /* AES encryption */
000090  9813              LDR      r0,[sp,#0x4c]
000092  2801              CMP      r0,#1
000094  d052              BEQ      |L5.316|
;;;754      {
;;;755        /* Flush IN/OUT FIFOs */
;;;756        CRYP_FIFOFlush();
;;;757        
;;;758        /* Key Initialisation */
;;;759        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;760        
;;;761        /* CRYP Initialization Vectors */
;;;762        CRYP_IVInit(&AES_CRYP_IVInitStructure);
;;;763        
;;;764        /* Crypto Init for Key preparation for decryption process */
;;;765        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;766        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
;;;767        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;768        CRYP_Init(&AES_CRYP_InitStructure);
;;;769        
;;;770        /***************************** Init phase *********************************/
;;;771        /* Select init phase */
;;;772        CRYP_PhaseConfig(CRYP_Phase_Init);
;;;773        
;;;774        /* Enable Crypto processor */
;;;775        CRYP_Cmd(ENABLE);
;;;776        
;;;777        /* Wait for CRYPEN bit to be 0 */
;;;778        while(CRYP_GetCmdStatus() == ENABLE)
;;;779        {
;;;780        }
;;;781        
;;;782        /***************************** header phase *******************************/
;;;783        if(HLength != 0)
;;;784        {
;;;785          /* Select header phase */
;;;786          CRYP_PhaseConfig(CRYP_Phase_Header);
;;;787          
;;;788          /* Enable Crypto processor */
;;;789          CRYP_Cmd(ENABLE);
;;;790          
;;;791          if(CRYP_GetCmdStatus() == DISABLE)
;;;792          {
;;;793             /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;794                the CRYP peripheral (please check the device sales type. */
;;;795             return(ERROR);
;;;796          }
;;;797          
;;;798          for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
;;;799          {
;;;800            /* Wait until the IFEM flag is reset */
;;;801            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;802            {
;;;803            }
;;;804            
;;;805            /* Write the Input block in the IN FIFO */
;;;806            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;807            headeraddr+=4;
;;;808            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;809            headeraddr+=4;
;;;810            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;811            headeraddr+=4;
;;;812            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;813            headeraddr+=4;
;;;814          }
;;;815          
;;;816          /* Wait until the complete message has been processed */
;;;817          counter = 0;
;;;818          do
;;;819          {
;;;820            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;821            counter++;
;;;822          }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;823    
;;;824          if (busystatus != RESET)
;;;825          {
;;;826            status = ERROR;
;;;827          }
;;;828        }
;;;829        
;;;830        /**************************** payload phase *******************************/
;;;831        if(ILength != 0)
;;;832        {
;;;833          /* Select payload phase */
;;;834          CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;835          
;;;836          /* Enable Crypto processor */
;;;837          CRYP_Cmd(ENABLE);
;;;838          
;;;839          if(CRYP_GetCmdStatus() == DISABLE)
;;;840          {
;;;841            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;842               the CRYP peripheral (please check the device sales type. */
;;;843            return(ERROR);
;;;844          }
;;;845          
;;;846          for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;847          {
;;;848            /* Wait until the IFEM flag is reset */
;;;849            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;850            {
;;;851            }
;;;852            /* Write the Input block in the IN FIFO */
;;;853            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;854            inputaddr+=4;
;;;855            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;856            inputaddr+=4;
;;;857            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;858            inputaddr+=4;
;;;859            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;860            inputaddr+=4;
;;;861            
;;;862            /* Wait until the complete message has been processed */
;;;863            counter = 0;
;;;864            do
;;;865            {
;;;866              busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;867              counter++;
;;;868            }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;869    
;;;870            if (busystatus != RESET)
;;;871            {
;;;872              status = ERROR;
;;;873            }
;;;874            else
;;;875            {
;;;876              /* Wait until the OFNE flag is reset */
;;;877              while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;878              {
;;;879              }
;;;880              
;;;881              /* Read the Output block from the Output FIFO */
;;;882              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;883              outputaddr+=4;
;;;884              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;885              outputaddr+=4;
;;;886              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;887              outputaddr+=4;
;;;888              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;889              outputaddr+=4;
;;;890            }
;;;891          }
;;;892        }
;;;893        
;;;894        /***************************** final phase ********************************/
;;;895        /* Select final phase */
;;;896        CRYP_PhaseConfig(CRYP_Phase_Final);
;;;897        
;;;898        /* Enable Crypto processor */
;;;899        CRYP_Cmd(ENABLE);
;;;900        
;;;901        if(CRYP_GetCmdStatus() == DISABLE)
;;;902        {
;;;903          /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;904             the CRYP peripheral (please check the device sales type. */
;;;905          return(ERROR);
;;;906        }
;;;907        
;;;908        /* Write number of bits concatenated with header in the IN FIFO */
;;;909        CRYP_DataIn(__REV(headerlength>>32));
;;;910        CRYP_DataIn(__REV(headerlength));
;;;911        CRYP_DataIn(__REV(inputlength>>32));
;;;912        CRYP_DataIn(__REV(inputlength));
;;;913        /* Wait until the OFNE flag is reset */
;;;914        while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;915        {
;;;916        }
;;;917        
;;;918        tagaddr = (uint32_t)AuthTAG;
;;;919        /* Read the Auth TAG in the IN FIFO */
;;;920        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;921        tagaddr+=4;
;;;922        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;923        tagaddr+=4;
;;;924        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;925        tagaddr+=4;
;;;926        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;927        tagaddr+=4;
;;;928      }
;;;929      /*------------------ AES Decryption ------------------*/
;;;930      else /* AES decryption */
;;;931      {
;;;932        /* Flush IN/OUT FIFOs */
;;;933        CRYP_FIFOFlush();
000096  f7fffffe          BL       CRYP_FIFOFlush
;;;934        
;;;935        /* Key Initialisation */
;;;936        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
00009a  a807              ADD      r0,sp,#0x1c
00009c  f7fffffe          BL       CRYP_KeyInit
;;;937        
;;;938        /* CRYP Initialization Vectors */
;;;939        CRYP_IVInit(&AES_CRYP_IVInitStructure);
0000a0  a803              ADD      r0,sp,#0xc
0000a2  f7fffffe          BL       CRYP_IVInit
;;;940        
;;;941        /* Crypto Init for Key preparation for decryption process */
;;;942        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
0000a6  2004              MOVS     r0,#4
0000a8  900f              STR      r0,[sp,#0x3c]
;;;943        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
0000aa  0440              LSLS     r0,r0,#17
0000ac  9010              STR      r0,[sp,#0x40]
;;;944        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000ae  2080              MOVS     r0,#0x80
0000b0  9011              STR      r0,[sp,#0x44]
;;;945        CRYP_Init(&AES_CRYP_InitStructure);
0000b2  a80f              ADD      r0,sp,#0x3c
0000b4  f7fffffe          BL       CRYP_Init
;;;946        
;;;947        /***************************** Init phase *********************************/
;;;948        /* Select init phase */
;;;949        CRYP_PhaseConfig(CRYP_Phase_Init);
0000b8  2000              MOVS     r0,#0
0000ba  f7fffffe          BL       CRYP_PhaseConfig
;;;950        
;;;951        /* Enable Crypto processor */
;;;952        CRYP_Cmd(ENABLE);
0000be  2001              MOVS     r0,#1
0000c0  f7fffffe          BL       CRYP_Cmd
                  |L5.196|
;;;953        
;;;954        /* Wait for CRYPEN bit to be 0 */
;;;955        while(CRYP_GetCmdStatus() == ENABLE)
0000c4  f7fffffe          BL       CRYP_GetCmdStatus
0000c8  2801              CMP      r0,#1
0000ca  d0fb              BEQ      |L5.196|
;;;956        {
;;;957        }
;;;958        
;;;959        /***************************** header phase *******************************/
;;;960        if(HLength != 0)
0000cc  9823              LDR      r0,[sp,#0x8c]
0000ce  2800              CMP      r0,#0
0000d0  d07e              BEQ      |L5.464|
;;;961        {
;;;962          /* Select header phase */
;;;963          CRYP_PhaseConfig(CRYP_Phase_Header);
0000d2  f44f3080          MOV      r0,#0x10000
0000d6  f7fffffe          BL       CRYP_PhaseConfig
;;;964          
;;;965          /* Enable Crypto processor */
;;;966          CRYP_Cmd(ENABLE);
0000da  2001              MOVS     r0,#1
0000dc  f7fffffe          BL       CRYP_Cmd
;;;967          
;;;968          if(CRYP_GetCmdStatus() == DISABLE)
0000e0  f7fffffe          BL       CRYP_GetCmdStatus
0000e4  2800              CMP      r0,#0
0000e6  d074              BEQ      |L5.466|
;;;969          {
;;;970            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;971               the CRYP peripheral (please check the device sales type. */
;;;972            return(ERROR);
;;;973          }
;;;974          
;;;975          for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
0000e8  2000              MOVS     r0,#0
0000ea  9000              STR      r0,[sp,#0]
0000ec  e11b              B        |L5.806|
                  |L5.238|
0000ee  2000              MOVS     r0,#0                 ;698
0000f0  9012              STR      r0,[sp,#0x48]         ;698
0000f2  9802              LDR      r0,[sp,#8]            ;699
0000f4  6800              LDR      r0,[r0,#0]            ;699
0000f6  ba00              REV      r0,r0                 ;699
0000f8  900b              STR      r0,[sp,#0x2c]         ;699
0000fa  9802              LDR      r0,[sp,#8]            ;700
0000fc  6841              LDR      r1,[r0,#4]            ;701
0000fe  ba09              REV      r1,r1                 ;701
000100  910c              STR      r1,[sp,#0x30]         ;701
000102  6881              LDR      r1,[r0,#8]            ;703
000104  ba09              REV      r1,r1                 ;703
000106  910d              STR      r1,[sp,#0x34]         ;703
000108  68c0              LDR      r0,[r0,#0xc]          ;705
00010a  ba00              REV      r0,r0                 ;705
00010c  900e              STR      r0,[sp,#0x38]         ;705
00010e  e7b1              B        |L5.116|
                  |L5.272|
000110  9012              STR      r0,[sp,#0x48]         ;708
000112  9802              LDR      r0,[sp,#8]            ;709
000114  6800              LDR      r0,[r0,#0]            ;709
000116  ba00              REV      r0,r0                 ;709
000118  9009              STR      r0,[sp,#0x24]         ;709
00011a  9802              LDR      r0,[sp,#8]            ;710
00011c  6841              LDR      r1,[r0,#4]            ;711
00011e  ba09              REV      r1,r1                 ;711
000120  910a              STR      r1,[sp,#0x28]         ;711
000122  6881              LDR      r1,[r0,#8]            ;713
000124  ba09              REV      r1,r1                 ;713
000126  910b              STR      r1,[sp,#0x2c]         ;713
000128  68c1              LDR      r1,[r0,#0xc]          ;715
00012a  ba09              REV      r1,r1                 ;715
00012c  910c              STR      r1,[sp,#0x30]         ;715
00012e  6901              LDR      r1,[r0,#0x10]         ;717
000130  ba09              REV      r1,r1                 ;717
000132  910d              STR      r1,[sp,#0x34]         ;717
000134  6940              LDR      r0,[r0,#0x14]         ;719
000136  ba00              REV      r0,r0                 ;719
000138  900e              STR      r0,[sp,#0x38]         ;719
00013a  e79b              B        |L5.116|
                  |L5.316|
00013c  f7fffffe          BL       CRYP_FIFOFlush
000140  a807              ADD      r0,sp,#0x1c           ;759
000142  f7fffffe          BL       CRYP_KeyInit
000146  a803              ADD      r0,sp,#0xc            ;762
000148  f7fffffe          BL       CRYP_IVInit
00014c  2000              MOVS     r0,#0                 ;765
00014e  900f              STR      r0,[sp,#0x3c]         ;765
000150  f44f2000          MOV      r0,#0x80000           ;766
000154  9010              STR      r0,[sp,#0x40]         ;766
000156  2080              MOVS     r0,#0x80              ;767
000158  9011              STR      r0,[sp,#0x44]         ;767
00015a  a80f              ADD      r0,sp,#0x3c           ;768
00015c  f7fffffe          BL       CRYP_Init
000160  2000              MOVS     r0,#0                 ;772
000162  f7fffffe          BL       CRYP_PhaseConfig
000166  2001              MOVS     r0,#1                 ;775
000168  f7fffffe          BL       CRYP_Cmd
                  |L5.364|
00016c  f7fffffe          BL       CRYP_GetCmdStatus
000170  2801              CMP      r0,#1                 ;778
000172  d0fb              BEQ      |L5.364|
000174  9823              LDR      r0,[sp,#0x8c]         ;783
000176  b368              CBZ      r0,|L5.468|
000178  f44f3080          MOV      r0,#0x10000           ;786
00017c  f7fffffe          BL       CRYP_PhaseConfig
000180  2001              MOVS     r0,#1                 ;789
000182  f7fffffe          BL       CRYP_Cmd
000186  f7fffffe          BL       CRYP_GetCmdStatus
00018a  b110              CBZ      r0,|L5.402|
00018c  2000              MOVS     r0,#0                 ;798
00018e  9000              STR      r0,[sp,#0]            ;798
000190  e01b              B        |L5.458|
                  |L5.402|
000192  2000              MOVS     r0,#0                 ;795
                  |L5.404|
;;;976          {
;;;977            /* Wait until the IFEM flag is reset */
;;;978            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;979            {
;;;980            }
;;;981            
;;;982            /* Write the Input block in the IN FIFO */
;;;983            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;984            headeraddr+=4;
;;;985            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;986            headeraddr+=4;
;;;987            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;988            headeraddr+=4;
;;;989            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;990            headeraddr+=4;
;;;991          }
;;;992          
;;;993          /* Wait until the complete message has been processed */
;;;994          counter = 0;
;;;995          do
;;;996          {
;;;997            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;998            counter++;
;;;999          }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1000   
;;;1001         if (busystatus != RESET)
;;;1002         {
;;;1003           status = ERROR;
;;;1004         }
;;;1005       }
;;;1006       
;;;1007       /**************************** payload phase *******************************/
;;;1008       if(ILength != 0)
;;;1009       {
;;;1010         /* Select payload phase */
;;;1011         CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;1012   
;;;1013         /* Enable Crypto processor */
;;;1014         CRYP_Cmd(ENABLE);
;;;1015         
;;;1016         if(CRYP_GetCmdStatus() == DISABLE)
;;;1017         {
;;;1018           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1019              the CRYP peripheral (please check the device sales type. */
;;;1020           return(ERROR);
;;;1021         }
;;;1022         
;;;1023         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;1024         {
;;;1025           /* Wait until the IFEM flag is reset */
;;;1026           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1027           {
;;;1028           }
;;;1029           /* Write the Input block in the IN FIFO */
;;;1030           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1031           inputaddr+=4;
;;;1032           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1033           inputaddr+=4;
;;;1034           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1035           inputaddr+=4;
;;;1036           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1037           inputaddr+=4;
;;;1038           
;;;1039           /* Wait until the complete message has been processed */
;;;1040           counter = 0;
;;;1041           do
;;;1042           {
;;;1043             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1044             counter++;
;;;1045           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1046   
;;;1047           if (busystatus != RESET)
;;;1048           {
;;;1049             status = ERROR;
;;;1050           }
;;;1051           else
;;;1052           {
;;;1053             /* Wait until the OFNE flag is reset */
;;;1054             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1055             {
;;;1056             }
;;;1057             
;;;1058             /* Read the Output block from the Output FIFO */
;;;1059             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1060             outputaddr+=4;
;;;1061             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1062             outputaddr+=4;
;;;1063             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1064             outputaddr+=4;
;;;1065             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1066             outputaddr+=4;
;;;1067           }
;;;1068         }
;;;1069       }
;;;1070       
;;;1071       /***************************** final phase ********************************/
;;;1072       /* Select final phase */
;;;1073       CRYP_PhaseConfig(CRYP_Phase_Final);
;;;1074   
;;;1075       /* Enable Crypto processor */
;;;1076       CRYP_Cmd(ENABLE);
;;;1077       
;;;1078       if(CRYP_GetCmdStatus() == DISABLE)
;;;1079       {
;;;1080         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1081            the CRYP peripheral (please check the device sales type. */
;;;1082         return(ERROR);
;;;1083       }
;;;1084       
;;;1085       /* Write number of bits concatenated with header in the IN FIFO */
;;;1086       CRYP_DataIn(__REV(headerlength>>32));
;;;1087       CRYP_DataIn(__REV(headerlength));
;;;1088       CRYP_DataIn(__REV(inputlength>>32));
;;;1089       CRYP_DataIn(__REV(inputlength));
;;;1090       /* Wait until the OFNE flag is reset */
;;;1091       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1092       {
;;;1093       }
;;;1094       
;;;1095       tagaddr = (uint32_t)AuthTAG;
;;;1096       /* Read the Auth TAG in the IN FIFO */
;;;1097       *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;1098       tagaddr+=4;
;;;1099       *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;1100       tagaddr+=4;
;;;1101       *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;1102       tagaddr+=4;
;;;1103       *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;1104       tagaddr+=4;
;;;1105     }
;;;1106     /* Disable Crypto */
;;;1107     CRYP_Cmd(DISABLE);
;;;1108   
;;;1109     return status;
;;;1110   }
000194  b017              ADD      sp,sp,#0x5c
000196  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.410|
00019a  2001              MOVS     r0,#1                 ;801
00019c  f7fffffe          BL       CRYP_GetFlagStatus
0001a0  2800              CMP      r0,#0                 ;801
0001a2  d0fa              BEQ      |L5.410|
0001a4  6830              LDR      r0,[r6,#0]            ;806
0001a6  f7fffffe          BL       CRYP_DataIn
0001aa  1d36              ADDS     r6,r6,#4              ;807
0001ac  6830              LDR      r0,[r6,#0]            ;808
0001ae  f7fffffe          BL       CRYP_DataIn
0001b2  1d36              ADDS     r6,r6,#4              ;809
0001b4  6830              LDR      r0,[r6,#0]            ;810
0001b6  f7fffffe          BL       CRYP_DataIn
0001ba  1d36              ADDS     r6,r6,#4              ;811
0001bc  6830              LDR      r0,[r6,#0]            ;812
0001be  f7fffffe          BL       CRYP_DataIn
0001c2  1d36              ADDS     r6,r6,#4              ;813
0001c4  9800              LDR      r0,[sp,#0]            ;798
0001c6  3010              ADDS     r0,r0,#0x10           ;798
0001c8  9000              STR      r0,[sp,#0]            ;798
                  |L5.458|
0001ca  9923              LDR      r1,[sp,#0x8c]         ;798
0001cc  9800              LDR      r0,[sp,#0]            ;798
0001ce  e002              B        |L5.470|
                  |L5.464|
0001d0  e0ba              B        |L5.840|
                  |L5.466|
0001d2  e08e              B        |L5.754|
                  |L5.468|
0001d4  e00e              B        |L5.500|
                  |L5.470|
0001d6  4288              CMP      r0,r1                 ;798
0001d8  d3df              BCC      |L5.410|
0001da  2600              MOVS     r6,#0                 ;817
                  |L5.476|
0001dc  2010              MOVS     r0,#0x10              ;820
0001de  f7fffffe          BL       CRYP_GetFlagStatus
0001e2  1c76              ADDS     r6,r6,#1              ;821
0001e4  f5b63f80          CMP      r6,#0x10000           ;822
0001e8  d001              BEQ      |L5.494|
0001ea  2800              CMP      r0,#0                 ;822
0001ec  d1f6              BNE      |L5.476|
                  |L5.494|
0001ee  b108              CBZ      r0,|L5.500|
0001f0  f04f0b00          MOV      r11,#0                ;826
                  |L5.500|
0001f4  9821              LDR      r0,[sp,#0x84]         ;831
0001f6  b388              CBZ      r0,|L5.604|
0001f8  f44f3000          MOV      r0,#0x20000           ;834
0001fc  f7fffffe          BL       CRYP_PhaseConfig
000200  2001              MOVS     r0,#1                 ;837
000202  f7fffffe          BL       CRYP_Cmd
000206  f7fffffe          BL       CRYP_GetCmdStatus
00020a  b110              CBZ      r0,|L5.530|
00020c  2000              MOVS     r0,#0                 ;846
00020e  9000              STR      r0,[sp,#0]            ;846
000210  e03a              B        |L5.648|
                  |L5.530|
000212  2000              MOVS     r0,#0                 ;843
000214  e7be              B        |L5.404|
                  |L5.534|
000216  2001              MOVS     r0,#1                 ;849
000218  f7fffffe          BL       CRYP_GetFlagStatus
00021c  2800              CMP      r0,#0                 ;849
00021e  d0fa              BEQ      |L5.534|
000220  6820              LDR      r0,[r4,#0]            ;853
000222  f7fffffe          BL       CRYP_DataIn
000226  1d24              ADDS     r4,r4,#4              ;854
000228  6820              LDR      r0,[r4,#0]            ;855
00022a  f7fffffe          BL       CRYP_DataIn
00022e  1d24              ADDS     r4,r4,#4              ;856
000230  6820              LDR      r0,[r4,#0]            ;857
000232  f7fffffe          BL       CRYP_DataIn
000236  1d24              ADDS     r4,r4,#4              ;858
000238  6820              LDR      r0,[r4,#0]            ;859
00023a  f7fffffe          BL       CRYP_DataIn
00023e  1d24              ADDS     r4,r4,#4              ;860
000240  2600              MOVS     r6,#0                 ;863
                  |L5.578|
000242  2010              MOVS     r0,#0x10              ;866
000244  f7fffffe          BL       CRYP_GetFlagStatus
000248  1c76              ADDS     r6,r6,#1              ;867
00024a  f5b63f80          CMP      r6,#0x10000           ;868
00024e  d001              BEQ      |L5.596|
000250  2800              CMP      r0,#0                 ;868
000252  d1f6              BNE      |L5.578|
                  |L5.596|
000254  b118              CBZ      r0,|L5.606|
000256  f04f0b00          MOV      r11,#0                ;872
00025a  e012              B        |L5.642|
                  |L5.604|
00025c  e01b              B        |L5.662|
                  |L5.606|
00025e  2004              MOVS     r0,#4                 ;877
000260  f7fffffe          BL       CRYP_GetFlagStatus
000264  2800              CMP      r0,#0                 ;877
000266  d0fa              BEQ      |L5.606|
000268  f7fffffe          BL       CRYP_DataOut
00026c  6028              STR      r0,[r5,#0]            ;882
00026e  f7fffffe          BL       CRYP_DataOut
000272  6068              STR      r0,[r5,#4]            ;884
000274  f7fffffe          BL       CRYP_DataOut
000278  60a8              STR      r0,[r5,#8]            ;886
00027a  f7fffffe          BL       CRYP_DataOut
00027e  60e8              STR      r0,[r5,#0xc]          ;888
000280  3510              ADDS     r5,r5,#0x10           ;888
                  |L5.642|
000282  9800              LDR      r0,[sp,#0]            ;846
000284  3010              ADDS     r0,r0,#0x10           ;846
000286  9000              STR      r0,[sp,#0]            ;846
                  |L5.648|
000288  9921              LDR      r1,[sp,#0x84]         ;846
00028a  9800              LDR      r0,[sp,#0]            ;846
00028c  4288              CMP      r0,r1                 ;846
00028e  d202              BCS      |L5.662|
000290  f1bb0f00          CMP      r11,#0                ;846
000294  d1bf              BNE      |L5.534|
                  |L5.662|
000296  f44f3040          MOV      r0,#0x30000           ;896
00029a  f7fffffe          BL       CRYP_PhaseConfig
00029e  2001              MOVS     r0,#1                 ;899
0002a0  f7fffffe          BL       CRYP_Cmd
0002a4  f7fffffe          BL       CRYP_GetCmdStatus
0002a8  b308              CBZ      r0,|L5.750|
0002aa  fa98f088          REV      r0,r8                 ;909
0002ae  f7fffffe          BL       CRYP_DataIn
0002b2  ba38              REV      r0,r7                 ;910
0002b4  f7fffffe          BL       CRYP_DataIn
0002b8  fa9af08a          REV      r0,r10                ;911
0002bc  f7fffffe          BL       CRYP_DataIn
0002c0  fa99f089          REV      r0,r9                 ;912
0002c4  f7fffffe          BL       CRYP_DataIn
                  |L5.712|
0002c8  2004              MOVS     r0,#4                 ;914
0002ca  f7fffffe          BL       CRYP_GetFlagStatus
0002ce  2800              CMP      r0,#0                 ;914
0002d0  d0fa              BEQ      |L5.712|
0002d2  9c25              LDR      r4,[sp,#0x94]         ;918
0002d4  f7fffffe          BL       CRYP_DataOut
0002d8  6020              STR      r0,[r4,#0]            ;920
0002da  f7fffffe          BL       CRYP_DataOut
0002de  6060              STR      r0,[r4,#4]            ;922
0002e0  f7fffffe          BL       CRYP_DataOut
0002e4  60a0              STR      r0,[r4,#8]            ;924
0002e6  f7fffffe          BL       CRYP_DataOut
0002ea  60e0              STR      r0,[r4,#0xc]          ;926
0002ec  e0a8              B        |L5.1088|
                  |L5.750|
0002ee  2000              MOVS     r0,#0                 ;905
0002f0  e750              B        |L5.404|
                  |L5.754|
0002f2  2000              MOVS     r0,#0                 ;972
0002f4  e74e              B        |L5.404|
                  |L5.758|
0002f6  2001              MOVS     r0,#1                 ;978
0002f8  f7fffffe          BL       CRYP_GetFlagStatus
0002fc  2800              CMP      r0,#0                 ;978
0002fe  d0fa              BEQ      |L5.758|
000300  6830              LDR      r0,[r6,#0]            ;983
000302  f7fffffe          BL       CRYP_DataIn
000306  1d36              ADDS     r6,r6,#4              ;984
000308  6830              LDR      r0,[r6,#0]            ;985
00030a  f7fffffe          BL       CRYP_DataIn
00030e  1d36              ADDS     r6,r6,#4              ;986
000310  6830              LDR      r0,[r6,#0]            ;987
000312  f7fffffe          BL       CRYP_DataIn
000316  1d36              ADDS     r6,r6,#4              ;988
000318  6830              LDR      r0,[r6,#0]            ;989
00031a  f7fffffe          BL       CRYP_DataIn
00031e  1d36              ADDS     r6,r6,#4              ;990
000320  9800              LDR      r0,[sp,#0]            ;975
000322  3010              ADDS     r0,r0,#0x10           ;975
000324  9000              STR      r0,[sp,#0]            ;975
                  |L5.806|
000326  9923              LDR      r1,[sp,#0x8c]         ;975
000328  9800              LDR      r0,[sp,#0]            ;975
00032a  4288              CMP      r0,r1                 ;975
00032c  d3e3              BCC      |L5.758|
00032e  2600              MOVS     r6,#0                 ;994
                  |L5.816|
000330  2010              MOVS     r0,#0x10              ;997
000332  f7fffffe          BL       CRYP_GetFlagStatus
000336  1c76              ADDS     r6,r6,#1              ;998
000338  f5b63f80          CMP      r6,#0x10000           ;999
00033c  d001              BEQ      |L5.834|
00033e  2800              CMP      r0,#0                 ;999
000340  d1f6              BNE      |L5.816|
                  |L5.834|
000342  b108              CBZ      r0,|L5.840|
000344  f04f0b00          MOV      r11,#0                ;1003
                  |L5.840|
000348  9821              LDR      r0,[sp,#0x84]         ;1008
00034a  b388              CBZ      r0,|L5.944|
00034c  f44f3000          MOV      r0,#0x20000           ;1011
000350  f7fffffe          BL       CRYP_PhaseConfig
000354  2001              MOVS     r0,#1                 ;1014
000356  f7fffffe          BL       CRYP_Cmd
00035a  f7fffffe          BL       CRYP_GetCmdStatus
00035e  b110              CBZ      r0,|L5.870|
000360  2000              MOVS     r0,#0                 ;1023
000362  9000              STR      r0,[sp,#0]            ;1023
000364  e03a              B        |L5.988|
                  |L5.870|
000366  2000              MOVS     r0,#0                 ;1020
000368  e714              B        |L5.404|
                  |L5.874|
00036a  2001              MOVS     r0,#1                 ;1026
00036c  f7fffffe          BL       CRYP_GetFlagStatus
000370  2800              CMP      r0,#0                 ;1026
000372  d0fa              BEQ      |L5.874|
000374  6820              LDR      r0,[r4,#0]            ;1030
000376  f7fffffe          BL       CRYP_DataIn
00037a  1d24              ADDS     r4,r4,#4              ;1031
00037c  6820              LDR      r0,[r4,#0]            ;1032
00037e  f7fffffe          BL       CRYP_DataIn
000382  1d24              ADDS     r4,r4,#4              ;1033
000384  6820              LDR      r0,[r4,#0]            ;1034
000386  f7fffffe          BL       CRYP_DataIn
00038a  1d24              ADDS     r4,r4,#4              ;1035
00038c  6820              LDR      r0,[r4,#0]            ;1036
00038e  f7fffffe          BL       CRYP_DataIn
000392  1d24              ADDS     r4,r4,#4              ;1037
000394  2600              MOVS     r6,#0                 ;1040
                  |L5.918|
000396  2010              MOVS     r0,#0x10              ;1043
000398  f7fffffe          BL       CRYP_GetFlagStatus
00039c  1c76              ADDS     r6,r6,#1              ;1044
00039e  f5b63f80          CMP      r6,#0x10000           ;1045
0003a2  d001              BEQ      |L5.936|
0003a4  2800              CMP      r0,#0                 ;1045
0003a6  d1f6              BNE      |L5.918|
                  |L5.936|
0003a8  b118              CBZ      r0,|L5.946|
0003aa  f04f0b00          MOV      r11,#0                ;1049
0003ae  e012              B        |L5.982|
                  |L5.944|
0003b0  e01b              B        |L5.1002|
                  |L5.946|
0003b2  2004              MOVS     r0,#4                 ;1054
0003b4  f7fffffe          BL       CRYP_GetFlagStatus
0003b8  2800              CMP      r0,#0                 ;1054
0003ba  d0fa              BEQ      |L5.946|
0003bc  f7fffffe          BL       CRYP_DataOut
0003c0  6028              STR      r0,[r5,#0]            ;1059
0003c2  f7fffffe          BL       CRYP_DataOut
0003c6  6068              STR      r0,[r5,#4]            ;1061
0003c8  f7fffffe          BL       CRYP_DataOut
0003cc  60a8              STR      r0,[r5,#8]            ;1063
0003ce  f7fffffe          BL       CRYP_DataOut
0003d2  60e8              STR      r0,[r5,#0xc]          ;1065
0003d4  3510              ADDS     r5,r5,#0x10           ;1065
                  |L5.982|
0003d6  9800              LDR      r0,[sp,#0]            ;1023
0003d8  3010              ADDS     r0,r0,#0x10           ;1023
0003da  9000              STR      r0,[sp,#0]            ;1023
                  |L5.988|
0003dc  9921              LDR      r1,[sp,#0x84]         ;1023
0003de  9800              LDR      r0,[sp,#0]            ;1023
0003e0  4288              CMP      r0,r1                 ;1023
0003e2  d202              BCS      |L5.1002|
0003e4  f1bb0f00          CMP      r11,#0                ;1023
0003e8  d1bf              BNE      |L5.874|
                  |L5.1002|
0003ea  f44f3040          MOV      r0,#0x30000           ;1073
0003ee  f7fffffe          BL       CRYP_PhaseConfig
0003f2  2001              MOVS     r0,#1                 ;1076
0003f4  f7fffffe          BL       CRYP_Cmd
0003f8  f7fffffe          BL       CRYP_GetCmdStatus
0003fc  b328              CBZ      r0,|L5.1098|
0003fe  fa98f088          REV      r0,r8                 ;1086
000402  f7fffffe          BL       CRYP_DataIn
000406  ba38              REV      r0,r7                 ;1087
000408  f7fffffe          BL       CRYP_DataIn
00040c  fa9af08a          REV      r0,r10                ;1088
000410  f7fffffe          BL       CRYP_DataIn
000414  fa99f089          REV      r0,r9                 ;1089
000418  f7fffffe          BL       CRYP_DataIn
                  |L5.1052|
00041c  2004              MOVS     r0,#4                 ;1091
00041e  f7fffffe          BL       CRYP_GetFlagStatus
000422  2800              CMP      r0,#0                 ;1091
000424  d0fa              BEQ      |L5.1052|
000426  9c25              LDR      r4,[sp,#0x94]         ;1095
000428  f7fffffe          BL       CRYP_DataOut
00042c  6020              STR      r0,[r4,#0]            ;1097
00042e  f7fffffe          BL       CRYP_DataOut
000432  6060              STR      r0,[r4,#4]            ;1099
000434  f7fffffe          BL       CRYP_DataOut
000438  60a0              STR      r0,[r4,#8]            ;1101
00043a  f7fffffe          BL       CRYP_DataOut
00043e  60e0              STR      r0,[r4,#0xc]          ;1103
                  |L5.1088|
000440  2000              MOVS     r0,#0                 ;1107
000442  f7fffffe          BL       CRYP_Cmd
000446  4658              MOV      r0,r11                ;1109
000448  e6a4              B        |L5.404|
                  |L5.1098|
00044a  2000              MOVS     r0,#0                 ;1082
00044c  e6a2              B        |L5.404|
;;;1111   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_cryp_aes.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REVSH|
#line 128
|__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
