; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_it.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\output\stm32f4xx_it.crf --no_multibyte_chars ..\User\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BEBufToUint16||, CODE, READONLY, ALIGN=1

                  BEBufToUint16 PROC
;;;254    */
;;;255    uint16_t BEBufToUint16(uint8_t *_pBuf)
000000  7841              LDRB     r1,[r0,#1]
;;;256    {
;;;257        return (((uint16_t)_pBuf[0] << 8) | _pBuf[1]);
000002  7800              LDRB     r0,[r0,#0]
000004  ea412000          ORR      r0,r1,r0,LSL #8
;;;258    }
000008  4770              BX       lr
;;;259    
                          ENDP


                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L2.0|
;;;103      */
;;;104    void BusFault_Handler(void)
000000  e7fe              B        |L2.0|
;;;105    {
;;;106      /* Go to infinite loop when Bus Fault exception occurs */
;;;107      while (1)
;;;108      {
;;;109      }
;;;110    }
;;;111    
                          ENDP


                          AREA ||i.CRC16||, CODE, READONLY, ALIGN=2

                  CRC16 PROC
;;;290    
;;;291    uint16_t CRC16(uint8_t *_pBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;292    {    
;;;293        uint8_t ucCRCHi = 0xFF; /* 高CRC字节初始化 */
000002  22ff              MOVS     r2,#0xff
;;;294    	uint8_t ucCRCLo = 0xFF; /* 低CRC 字节初始化 */
000004  23ff              MOVS     r3,#0xff
;;;295    	uint16_t usIndex;  /* CRC循环中的索引 */
;;;296    
;;;297        while (_usLen--)
;;;298        {
;;;299    		usIndex = ucCRCHi ^ *_pBuf++; /* 计算CRC */
;;;300    		ucCRCHi = ucCRCLo ^ s_CRCHi[usIndex];
000006  4d08              LDR      r5,|L3.40|
;;;301    		ucCRCLo = s_CRCLo[usIndex];
000008  f5057680          ADD      r6,r5,#0x100
00000c  e005              B        |L3.26|
                  |L3.14|
00000e  f8104b01          LDRB     r4,[r0],#1            ;299
000012  4054              EORS     r4,r4,r2              ;299
000014  5d2a              LDRB     r2,[r5,r4]            ;300
000016  405a              EORS     r2,r2,r3              ;300
000018  5d33              LDRB     r3,[r6,r4]
                  |L3.26|
00001a  1e49              SUBS     r1,r1,#1              ;297
00001c  b289              UXTH     r1,r1                 ;297
00001e  d2f6              BCS      |L3.14|
;;;302        }
;;;303        return ((uint16_t)ucCRCHi << 8 | ucCRCLo);
000020  ea432002          ORR      r0,r3,r2,LSL #8
;;;304    }
000024  bd70              POP      {r4-r6,pc}
;;;305    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      ||.constdata||

                          AREA ||i.DMA2_Stream0_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream0_IRQHandler PROC
;;;306    
;;;307    void  DMA2_Stream0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;308    {
;;;309    	DMA_ClearITPendingBit(DMA2_Stream0,DMA_IT_TCIF0);
000002  4905              LDR      r1,|L4.24|
000004  4805              LDR      r0,|L4.28|
000006  f7fffffe          BL       DMA_ClearITPendingBit
;;;310    	Flag_ADC_Full=1;
00000a  4805              LDR      r0,|L4.32|
00000c  6801              LDR      r1,[r0,#0]  ; flagA
00000e  f0410102          ORR      r1,r1,#2
000012  6001              STR      r1,[r0,#0]  ; flagA
;;;311    }
000014  bd10              POP      {r4,pc}
;;;312    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x10008020
                  |L4.28|
                          DCD      0x40026410
                  |L4.32|
                          DCD      flagA

                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;138      */
;;;139    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;140    {
;;;141    }
;;;142    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L6.0|
;;;77       */
;;;78     void HardFault_Handler(void)
000000  e7fe              B        |L6.0|
;;;79     {
;;;80       /* Go to infinite loop when Hard Fault exception occurs */
;;;81       while (1)
;;;82       {
;;;83       }
;;;84     }
;;;85     
                          ENDP


                          AREA ||i.MODS_03H||, CODE, READONLY, ALIGN=2

                  MODS_03H PROC
;;;476    
;;;477    static void MODS_03H(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;478    {
000004  b090              SUB      sp,sp,#0x40
;;;479        uint16_t reg;
;;;480    	uint16_t num;
;;;481    	uint16_t i;
;;;482    	uint8_t reg_value[64];
;;;483    
;;;484        
;;;485        g_tModS.RspCode = RSP_OK;
000006  4d2c              LDR      r5,|L7.184|
000008  2000              MOVS     r0,#0
00000a  f88500a1          STRB     r0,[r5,#0xa1]
;;;486    
;;;487    	if (g_tModS.RxCount != 8)								/* 03H命令必须是8个字节 */
00000e  f895009e          LDRB     r0,[r5,#0x9e]  ; g_tModS
;;;488    	{
;;;489    		g_tModS.RspCode = RSP_ERR_VALUE;					/* 数据值域错误 */
000012  f04f0903          MOV      r9,#3
;;;490    		goto err_ret;
;;;491    	}
;;;492    
;;;493    	reg = BEBufToUint16(&g_tModS.RxBuf[2]); 				/* 寄存器号 */
;;;494    	num = BEBufToUint16(&g_tModS.RxBuf[4]);					/* 寄存器个数 */
;;;495    	if (num > sizeof(reg_value) / 2)
;;;496    	{
;;;497    		g_tModS.RspCode = RSP_ERR_VALUE;					/* 数据值域错误 */
;;;498    		goto err_ret;
;;;499    	}
;;;500    
;;;501    	for (i = 0; i < num; i++)
;;;502    	{
;;;503    		if (MODS_ReadRegValue(reg, &reg_value[2 * i]) == 0)	/* 读出寄存器值放入reg_value */
;;;504    		{
;;;505    			g_tModS.RspCode = RSP_ERR_REG_ADDR;				/* 寄存器地址错误 */
000016  f04f0a02          MOV      r10,#2
00001a  46e8              MOV      r8,sp                 ;482
00001c  2808              CMP      r0,#8                 ;487
00001e  d002              BEQ      |L7.38|
000020  f88590a1          STRB     r9,[r5,#0xa1]         ;489
000024  e01a              B        |L7.92|
                  |L7.38|
000026  1ca8              ADDS     r0,r5,#2              ;493
000028  f7fffffe          BL       BEBufToUint16
00002c  4607              MOV      r7,r0                 ;493
00002e  1d28              ADDS     r0,r5,#4              ;494
000030  f7fffffe          BL       BEBufToUint16
000034  4606              MOV      r6,r0                 ;494
000036  2e20              CMP      r6,#0x20              ;495
000038  d902              BLS      |L7.64|
00003a  f88590a1          STRB     r9,[r5,#0xa1]         ;497
00003e  e00d              B        |L7.92|
                  |L7.64|
000040  2400              MOVS     r4,#0                 ;501
000042  e009              B        |L7.88|
                  |L7.68|
000044  eb080144          ADD      r1,r8,r4,LSL #1       ;503
000048  4638              MOV      r0,r7                 ;503
00004a  f7fffffe          BL       MODS_ReadRegValue
00004e  b1a8              CBZ      r0,|L7.124|
;;;506    			break;
;;;507    		}
;;;508    		reg++;
000050  1c7f              ADDS     r7,r7,#1
000052  b2bf              UXTH     r7,r7
000054  1c64              ADDS     r4,r4,#1              ;501
000056  b2a4              UXTH     r4,r4                 ;501
                  |L7.88|
000058  42b4              CMP      r4,r6                 ;501
00005a  d3f3              BCC      |L7.68|
                  |L7.92|
;;;509    	}
;;;510    
;;;511    err_ret:
;;;512    	if (g_tModS.RspCode == RSP_OK)							/* 正确应答 */
00005c  f89500a1          LDRB     r0,[r5,#0xa1]  ; g_tModS
000060  2800              CMP      r0,#0
000062  d125              BNE      |L7.176|
;;;513    	{
;;;514    		g_tModS.TxCount = 0;
;;;515    		g_tModS.TxBuf[g_tModS.TxCount++] = g_tModS.RxBuf[0];
000064  7828              LDRB     r0,[r5,#0]  ; g_tModS
000066  77a8              STRB     r0,[r5,#0x1e]
;;;516    		g_tModS.TxBuf[g_tModS.TxCount++] = g_tModS.RxBuf[1];
000068  4913              LDR      r1,|L7.184|
00006a  7868              LDRB     r0,[r5,#1]  ; g_tModS
00006c  77c8              STRB     r0,[r1,#0x1f]
;;;517    		g_tModS.TxBuf[g_tModS.TxCount++] = num * 2;			/* 返回字节数 */
00006e  0070              LSLS     r0,r6,#1
000070  f88590a2          STRB     r9,[r5,#0xa2]
000074  f8810020          STRB     r0,[r1,#0x20]
;;;518    
;;;519    		for (i = 0; i < num; i++)
000078  2100              MOVS     r1,#0
00007a  e017              B        |L7.172|
                  |L7.124|
00007c  f885a0a1          STRB     r10,[r5,#0xa1]        ;505
000080  e7ec              B        |L7.92|
                  |L7.130|
;;;520    		{
;;;521    			g_tModS.TxBuf[g_tModS.TxCount++] = reg_value[2*i];
000082  f89500a2          LDRB     r0,[r5,#0xa2]  ; g_tModS
000086  f8183011          LDRB     r3,[r8,r1,LSL #1]
00008a  1c42              ADDS     r2,r0,#1
00008c  4428              ADD      r0,r0,r5
00008e  f88520a2          STRB     r2,[r5,#0xa2]
000092  7783              STRB     r3,[r0,#0x1e]
;;;522    			g_tModS.TxBuf[g_tModS.TxCount++] = reg_value[2*i+1];
000094  eb080041          ADD      r0,r8,r1,LSL #1
000098  7843              LDRB     r3,[r0,#1]
00009a  f89500a2          LDRB     r0,[r5,#0xa2]  ; g_tModS
00009e  1c42              ADDS     r2,r0,#1
0000a0  4428              ADD      r0,r0,r5
0000a2  f88520a2          STRB     r2,[r5,#0xa2]
0000a6  7783              STRB     r3,[r0,#0x1e]
0000a8  1c49              ADDS     r1,r1,#1              ;519
0000aa  b289              UXTH     r1,r1                 ;519
                  |L7.172|
0000ac  42b1              CMP      r1,r6                 ;519
0000ae  d3e8              BCC      |L7.130|
                  |L7.176|
;;;523    		}
;;;524    //         if(usartocflag == 0)
;;;525    //         {
;;;526    //             MODS_SendWithCRC(g_tModS.TxBuf, g_tModS.TxCount);	/* 发送正确应答 */
;;;527    //         }
;;;528    	}
;;;529    	else
;;;530    	{
;;;531    //		MODS_SendAckErr(g_tModS.RspCode);					/* 发送错误应答 */
;;;532    	}
;;;533        
;;;534    }
0000b0  b010              ADD      sp,sp,#0x40
0000b2  e8bd87f0          POP      {r4-r10,pc}
;;;535    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L7.184|
                          DCD      ||.bss||

                          AREA ||i.MODS_ReadRegValue||, CODE, READONLY, ALIGN=2

                  MODS_ReadRegValue PROC
;;;390    */
;;;391    static uint8_t MODS_ReadRegValue(uint16_t reg_addr, uint8_t *reg_value)
000000  b510              PUSH     {r4,lr}
;;;392    {
000002  460c              MOV      r4,r1
000004  ed2d8b02          VPUSH    {d8}
;;;393        uint16_t value;
;;;394    	
;;;395    	switch (reg_addr)									/* 判断寄存器地址 */
000008  2813              CMP      r0,#0x13
;;;396    	{
;;;397            case SLAVE_REG_P00:
;;;398    			value =	R_VLUE;	
00000a  493c              LDR      r1,|L8.252|
;;;399    			break;
;;;400    		case SLAVE_REG_P01:
;;;401                shortv = DISS_Voltage;
;;;402    			value =	(int)(DISS_Voltage*1000);	
00000c  ed9f8a3c          VLDR     s16,|L8.256|
000010  d272              BCS      |L8.248|
000012  e8dff000          TBB      [pc,r0]               ;395
000016  0a0c              DCB      0x0a,0x0c
000018  1a25323d          DCB      0x1a,0x25,0x32,0x3d
00001c  50525456          DCB      0x50,0x52,0x54,0x56
000020  585a5c5e          DCB      0x58,0x5a,0x5c,0x5e
000024  60626466          DCB      0x60,0x62,0x64,0x66
000028  6800              DCB      0x68,0x00
00002a  8b48              LDRH     r0,[r1,#0x1a]         ;398  ; Run_Control
00002c  e05c              B        |L8.232|
00002e  4835              LDR      r0,|L8.260|
000030  ed900a00          VLDR     s0,[r0,#0]            ;401
000034  4834              LDR      r0,|L8.264|
000036  ed800a00          VSTR     s0,[r0,#0]            ;401
00003a  ee200a08          VMUL.F32 s0,s0,s16
00003e  eebd0ac0          VCVT.S32.F32 s0,s0
000042  ee100a10          VMOV     r0,s0
000046  b280              UXTH     r0,r0
;;;403    			break;
000048  e04e              B        |L8.232|
;;;404    
;;;405    		case SLAVE_REG_P02:
;;;406    			value =	(int)(DISS_Current*1000);       /* 将寄存器值读出 */
00004a  4830              LDR      r0,|L8.268|
00004c  ed900a00          VLDR     s0,[r0,#0]
000050  ee200a08          VMUL.F32 s0,s0,s16
000054  eebd0ac0          VCVT.S32.F32 s0,s0
000058  ee100a10          VMOV     r0,s0
00005c  b280              UXTH     r0,r0
;;;407    			break;
00005e  e043              B        |L8.232|
;;;408    		case SLAVE_REG_P03: 
;;;409    			value =	(int)(DISS_POW_Voltage*100);	
000060  482b              LDR      r0,|L8.272|
000062  eddf0a2c          VLDR     s1,|L8.276|
000066  ed900a00          VLDR     s0,[r0,#0]
00006a  ee200a20          VMUL.F32 s0,s0,s1
00006e  eebd0ac0          VCVT.S32.F32 s0,s0
000072  ee100a10          VMOV     r0,s0
000076  b280              UXTH     r0,r0
;;;410    			break;
000078  e036              B        |L8.232|
;;;411    
;;;412    		case SLAVE_REG_P04:
;;;413    			value =	(int)(DISS_POW_Current*1000);		/* 将寄存器值读出 */
00007a  4827              LDR      r0,|L8.280|
00007c  ed900a00          VLDR     s0,[r0,#0]
000080  ee200a08          VMUL.F32 s0,s0,s16
000084  eebd0ac0          VCVT.S32.F32 s0,s0
000088  ee100a10          VMOV     r0,s0
00008c  b280              UXTH     r0,r0
;;;414    			break;
00008e  e02b              B        |L8.232|
;;;415    		case SLAVE_REG_P05:
;;;416    //			IO_OFF();
;;;417               SET_Current_Laod = 100;
000090  2064              MOVS     r0,#0x64
000092  8108              STRH     r0,[r1,#8]
;;;418               usartocflag = 1; 
000094  4921              LDR      r1,|L8.284|
000096  2001              MOVS     r0,#1
000098  7008              STRB     r0,[r1,#0]
;;;419               Mode_SW_CONT(0x02);
00009a  2002              MOVS     r0,#2
00009c  f7fffffe          BL       Mode_SW_CONT
;;;420    //            while(usartocflag == 1);
;;;421                value = (int)(oc_data*1000);
0000a0  481f              LDR      r0,|L8.288|
0000a2  ed900a00          VLDR     s0,[r0,#0]
0000a6  ee200a08          VMUL.F32 s0,s0,s16
0000aa  eebd0ac0          VCVT.S32.F32 s0,s0
0000ae  ee100a10          VMOV     r0,s0
0000b2  b280              UXTH     r0,r0
;;;422    			break;
0000b4  e018              B        |L8.232|
;;;423    		case SLAVE_REG_P06:
;;;424    			value = 0;							/* 将寄存器值读出 */
0000b6  2000              MOVS     r0,#0
;;;425    			break;
0000b8  e016              B        |L8.232|
;;;426    		case SLAVE_REG_P07:
;;;427    			value =	0;							/* 将寄存器值读出 */
0000ba  2000              MOVS     r0,#0
;;;428    			break;
0000bc  e014              B        |L8.232|
;;;429    		case SLAVE_REG_P08:
;;;430    			value =	0;	
0000be  2000              MOVS     r0,#0
;;;431    			break;
0000c0  e012              B        |L8.232|
;;;432    
;;;433    		case SLAVE_REG_P09:
;;;434    			value =	0;							/* 将寄存器值读出 */
0000c2  2000              MOVS     r0,#0
;;;435    			break;
0000c4  e010              B        |L8.232|
;;;436    		case SLAVE_REG_P10:
;;;437    			value =	0;	
0000c6  2000              MOVS     r0,#0
;;;438    			break;
0000c8  e00e              B        |L8.232|
;;;439    
;;;440    		case SLAVE_REG_P11:
;;;441    			value =	0;							/* 将寄存器值读出 */
0000ca  2000              MOVS     r0,#0
;;;442    			break;
0000cc  e00c              B        |L8.232|
;;;443    		case SLAVE_REG_P12:
;;;444    			value =	0;	
0000ce  2000              MOVS     r0,#0
;;;445    			break;
0000d0  e00a              B        |L8.232|
;;;446    
;;;447    		case SLAVE_REG_P13:
;;;448    			value =	0;							/* 将寄存器值读出 */
0000d2  2000              MOVS     r0,#0
;;;449    			break;
0000d4  e008              B        |L8.232|
;;;450    		case SLAVE_REG_P14:
;;;451    			value =	0;	
0000d6  2000              MOVS     r0,#0
;;;452    			break;
0000d8  e006              B        |L8.232|
;;;453    
;;;454    		case SLAVE_REG_P15:
;;;455    			value =	0;							/* 将寄存器值读出 */
0000da  2000              MOVS     r0,#0
;;;456    			break;
0000dc  e004              B        |L8.232|
;;;457    		case SLAVE_REG_P16:
;;;458    			value =	0;	
0000de  2000              MOVS     r0,#0
;;;459    			break;
0000e0  e002              B        |L8.232|
;;;460    
;;;461    		case SLAVE_REG_P17:
;;;462    			value =	0;							/* 将寄存器值读出 */
0000e2  2000              MOVS     r0,#0
;;;463    			break;
0000e4  e000              B        |L8.232|
;;;464    		case SLAVE_REG_P18:
;;;465    			value =	0;							/* 将寄存器值读出 */
0000e6  2000              MOVS     r0,#0
                  |L8.232|
;;;466    			break;	
;;;467    		default:
;;;468    			return 0;
;;;469        }
;;;470    	reg_value[0] = value >> 8;
0000e8  0a01              LSRS     r1,r0,#8
0000ea  7021              STRB     r1,[r4,#0]
;;;471    	reg_value[1] = value;
0000ec  7060              STRB     r0,[r4,#1]
;;;472    
;;;473    	return 1;											/* 读取成功 */
0000ee  2001              MOVS     r0,#1
                  |L8.240|
;;;474    }
0000f0  ecbd8b02          VPOP     {d8}
0000f4  bd10              POP      {r4,pc}
0000f6  e7ff              B        |L8.248|
                  |L8.248|
0000f8  2000              MOVS     r0,#0                 ;468
0000fa  e7f9              B        |L8.240|
;;;475    
                          ENDP

                  |L8.252|
                          DCD      Run_Control
                  |L8.256|
000100  447a0000          DCFS     0x447a0000 ; 1000
                  |L8.260|
                          DCD      DISS_Voltage
                  |L8.264|
                          DCD      shortv
                  |L8.268|
                          DCD      DISS_Current
                  |L8.272|
                          DCD      DISS_POW_Voltage
                  |L8.276|
000114  42c80000          DCFS     0x42c80000 ; 100
                  |L8.280|
                          DCD      DISS_POW_Current
                  |L8.284|
                          DCD      usartocflag
                  |L8.288|
                          DCD      oc_data

                          AREA ||i.MODS_SendWithCRC||, CODE, READONLY, ALIGN=1

                  MODS_SendWithCRC PROC
;;;270    
;;;271    void MODS_SendWithCRC(uint8_t *_pBuf, uint8_t _ucLen)
000000  b530              PUSH     {r4,r5,lr}
;;;272    {
000002  b0a1              SUB      sp,sp,#0x84
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;273    	uint16_t crc;
;;;274    	uint8_t buf[S_TX_BUF_SIZE];
;;;275    
;;;276    	memcpy(buf, _pBuf, _ucLen);
000008  4622              MOV      r2,r4
00000a  4629              MOV      r1,r5
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memcpy
;;;277    	crc = CRC16(_pBuf, _ucLen);
000012  4621              MOV      r1,r4
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       CRC16
;;;278    	buf[_ucLen++] = crc >> 8;
00001a  0a05              LSRS     r5,r0,#8
00001c  4622              MOV      r2,r4
00001e  ab01              ADD      r3,sp,#4
000020  1c64              ADDS     r4,r4,#1
000022  b2e1              UXTB     r1,r4
000024  549d              STRB     r5,[r3,r2]
;;;279    	buf[_ucLen++] = crc;
000026  1c4a              ADDS     r2,r1,#1
000028  b2d2              UXTB     r2,r2
00002a  5458              STRB     r0,[r3,r1]
;;;280    //通过485发数据
;;;281    //	RS485_SendBuf(buf, _ucLen);
;;;282    
;;;283    	uart1SendChars(buf, _ucLen);
00002c  4611              MOV      r1,r2
00002e  a801              ADD      r0,sp,#4
000030  f7fffffe          BL       uart1SendChars
;;;284    	
;;;285    // #if 1									/* 此部分为了串口打印结果,实际运用中可不要 */
;;;286    // 	g_tPrint.Txlen = _ucLen;
;;;287    // 	memcpy(g_tPrint.TxBuf, buf, _ucLen);
;;;288    // #endif
;;;289    }
000034  b021              ADD      sp,sp,#0x84
000036  bd30              POP      {r4,r5,pc}
;;;290    
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L10.0|
;;;90       */
;;;91     void MemManage_Handler(void)
000000  e7fe              B        |L10.0|
;;;92     {
;;;93       /* Go to infinite loop when Memory Manage exception occurs */
;;;94       while (1)
;;;95       {
;;;96       }
;;;97     }
;;;98     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;68       */
;;;69     void NMI_Handler(void)
000000  4770              BX       lr
;;;70     {
;;;71     }
;;;72     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;147      */
;;;148    void PendSV_Handler(void)
000000  4770              BX       lr
;;;149    {
;;;150    }
;;;151    
                          ENDP


                          AREA ||i.RecHandle||, CODE, READONLY, ALIGN=2

                  RecHandle PROC
;;;357    
;;;358    void RecHandle(void)
000000  4803              LDR      r0,|L13.16|
;;;359    {
;;;360        u8 crec[6];
;;;361        u8 *csend;
;;;362        static u8 *sendbuf;
;;;363        u8 sendlen;
;;;364        static u16 recrc;
;;;365        static u16 scrc;
;;;366        u8 i;
;;;367        
;;;368        switch(g_tModS.RxBuf[1])
000002  7840              LDRB     r0,[r0,#1]  ; g_tModS
000004  2803              CMP      r0,#3
000006  d101              BNE      |L13.12|
;;;369        {
;;;370            case 0x03:
;;;371            {
;;;372                MODS_03H();
000008  f7ffbffe          B.W      MODS_03H
                  |L13.12|
;;;373            }break;
;;;374            case 0x06:
;;;375            {
;;;376                
;;;377            }break;
;;;378            default:break;
;;;379        }
;;;380    }
00000c  4770              BX       lr
;;;381    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      ||.bss||

                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;129      */
;;;130    void SVC_Handler(void)
000000  4770              BX       lr
;;;131    {
;;;132    }
;;;133    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;156      */
;;;157    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;158    {
;;;159    	TimingDelay_Decrement();
000002  f7fffffe          BL       TimingDelay_Decrement
;;;160    	OS_TimeMS++;
000006  4918              LDR      r1,|L15.104|
000008  6808              LDR      r0,[r1,#0]  ; OS_TimeMS
00000a  1c40              ADDS     r0,r0,#1
00000c  6008              STR      r0,[r1,#0]  ; OS_TimeMS
;;;161    	t_KeyScan++;
00000e  4817              LDR      r0,|L15.108|
000010  7801              LDRB     r1,[r0,#0]  ; t_KeyScan
000012  1c49              ADDS     r1,r1,#1
000014  7001              STRB     r1,[r0,#0]
;;;162    	if(t_KeyScan>10)
000016  7803              LDRB     r3,[r0,#0]  ; t_KeyScan
;;;163    	{
;;;164    		t_KeyScan=0;
;;;165    		Flag_Key_Scan=1;//按键消抖标志
000018  4a15              LDR      r2,|L15.112|
00001a  2100              MOVS     r1,#0
00001c  2b0a              CMP      r3,#0xa               ;162
00001e  d904              BLS      |L15.42|
000020  7001              STRB     r1,[r0,#0]            ;164
000022  6810              LDR      r0,[r2,#0]  ; flagA
000024  f0400008          ORR      r0,r0,#8
000028  6010              STR      r0,[r2,#0]  ; flagA
                  |L15.42|
;;;166    	}
;;;167    	t_0_5S++;
00002a  4812              LDR      r0,|L15.116|
00002c  8803              LDRH     r3,[r0,#0]  ; t_0_5S
00002e  1c5b              ADDS     r3,r3,#1
000030  8003              STRH     r3,[r0,#0]
;;;168    	if(t_0_5S>20)
000032  8803              LDRH     r3,[r0,#0]  ; t_0_5S
000034  2b14              CMP      r3,#0x14
000036  d904              BLS      |L15.66|
;;;169    	{
;;;170    		t_0_5S=0;
000038  8001              STRH     r1,[r0,#0]
;;;171    		Flag_0_5S =1;//蜂鸣器响一声标志
00003a  6810              LDR      r0,[r2,#0]  ; flagA
00003c  f0400080          ORR      r0,r0,#0x80
000040  6010              STR      r0,[r2,#0]  ; flagA
                  |L15.66|
;;;172    	}
;;;173    //--------------------------------------------
;;;174    	if(flag_Tim_USART==1)//串口清零计数
000042  4b0d              LDR      r3,|L15.120|
;;;175    	{
;;;176    		t_USART++;
000044  4a0d              LDR      r2,|L15.124|
000046  6818              LDR      r0,[r3,#0]            ;174  ; flagD
000048  07c4              LSLS     r4,r0,#31             ;174
00004a  d002              BEQ      |L15.82|
00004c  7814              LDRB     r4,[r2,#0]  ; t_USART
00004e  1c64              ADDS     r4,r4,#1
000050  7014              STRB     r4,[r2,#0]
                  |L15.82|
;;;177    	}
;;;178    	if(t_USART>40)//大约2.6ms
000052  7814              LDRB     r4,[r2,#0]  ; t_USART
000054  2c28              CMP      r4,#0x28
000056  d905              BLS      |L15.100|
;;;179    	{
;;;180    		t_USART=0;
000058  7011              STRB     r1,[r2,#0]
;;;181    		flag_Tim_USART=0;
00005a  f0200001          BIC      r0,r0,#1
00005e  6018              STR      r0,[r3,#0]  ; flagD
;;;182    		UART_Buffer_Size=0;	
000060  4807              LDR      r0,|L15.128|
000062  7001              STRB     r1,[r0,#0]
                  |L15.100|
;;;183    	}
;;;184    }
000064  bd10              POP      {r4,pc}
;;;185    
                          ENDP

000066  0000              DCW      0x0000
                  |L15.104|
                          DCD      OS_TimeMS
                  |L15.108|
                          DCD      t_KeyScan
                  |L15.112|
                          DCD      flagA
                  |L15.116|
                          DCD      t_0_5S
                  |L15.120|
                          DCD      flagD
                  |L15.124|
                          DCD      t_USART
                  |L15.128|
                          DCD      UART_Buffer_Size

                          AREA ||i.TIM6_DAC_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM6_DAC_IRQHandler PROC
;;;312    
;;;313    void  TIM6_DAC_IRQHandler (void)
000000  2101              MOVS     r1,#1
;;;314    {
;;;315    	TIM_ClearITPendingBit(TIM6,TIM_IT_Update);//清中断标志位
000002  4801              LDR      r0,|L16.8|
000004  f7ffbffe          B.W      TIM_ClearITPendingBit
;;;316    }
;;;317    
                          ENDP

                  |L16.8|
                          DCD      0x40001000

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;318    
;;;319    void USART1_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;320    {
;;;321        if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
000002  4d0d              LDR      r5,|L17.56|
000004  f2405125          MOV      r1,#0x525
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d010              BEQ      |L17.52|
;;;322    	{
;;;323            g_mods_timeout = 2;
000012  490a              LDR      r1,|L17.60|
000014  2002              MOVS     r0,#2
000016  7008              STRB     r0,[r1,#0]
;;;324            if (g_tModS.RxCount < S_RX_BUF_SIZE)
000018  4c09              LDR      r4,|L17.64|
00001a  f894009e          LDRB     r0,[r4,#0x9e]  ; g_tModS
00001e  281e              CMP      r0,#0x1e
000020  d208              BCS      |L17.52|
;;;325            {
;;;326                g_tModS.RxBuf[g_tModS.RxCount++] = USART_ReceiveData(USART1);;
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       USART_ReceiveData
000028  f894109e          LDRB     r1,[r4,#0x9e]  ; g_tModS
00002c  1c4a              ADDS     r2,r1,#1
00002e  f884209e          STRB     r2,[r4,#0x9e]
000032  5460              STRB     r0,[r4,r1]
                  |L17.52|
;;;327            }
;;;328        }
;;;329    // 	flag_Tim_USART=1;
;;;330    //  	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
;;;331    // 	{
;;;332    // 		UART_Buffer_Rece[UART_Buffer_Size]=USART_ReceiveData(USART1);
;;;333    // 		UART_Buffer_Size++;
;;;334    // 		if (UART_Buffer_Size > 7)
;;;335    // 		{
;;;336    // 			if (UART_Buffer_Rece[1] == 16)
;;;337    // 			{	
;;;338    // 				if (UART_Buffer_Size > (UART_Buffer_Rece[6]+8))
;;;339    // 				{
;;;340    // 					UART_Buffer_Size=0;	  	   		   
;;;341    // 					UART_Buffer_Rece_flag=1;
;;;342    // 					flag_Tim_USART=0;
;;;343    // 					t_USART=0;
;;;344    // 				}
;;;345    // 			}
;;;346    // 			else
;;;347    // 			{
;;;348    // 				UART_Buffer_Size=0;	  	   	   
;;;349    // 				UART_Buffer_Rece_flag=1;  
;;;350    // 				flag_Tim_USART=0;
;;;351    // 				t_USART=0;
;;;352    // 			}	  
;;;353    // 		}
;;;354    // 	}
;;;355    }
000034  bd70              POP      {r4-r6,pc}
;;;356    
                          ENDP

000036  0000              DCW      0x0000
                  |L17.56|
                          DCD      0x40011000
                  |L17.60|
                          DCD      ||.data||
                  |L17.64|
                          DCD      ||.bss||

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L18.0|
;;;116      */
;;;117    void UsageFault_Handler(void)
000000  e7fe              B        |L18.0|
;;;118    {
;;;119      /* Go to infinite loop when Usage Fault exception occurs */
;;;120      while (1)
;;;121      {
;;;122      }
;;;123    }
;;;124    
                          ENDP


                          AREA ||i.uart1SendChars||, CODE, READONLY, ALIGN=2

                  uart1SendChars PROC
;;;259    
;;;260    void uart1SendChars(u8 *str, u16 strlen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;261    { 
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;262    	  u16 k= 0 ; 
000008  2400              MOVS     r4,#0
;;;263       do { 
;;;264           USART_SendData(USART1,*(str + k));
00000a  4f08              LDR      r7,|L19.44|
                  |L19.12|
00000c  5d29              LDRB     r1,[r5,r4]
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       USART_SendData
                  |L19.20|
;;;265           while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);
000014  2180              MOVS     r1,#0x80
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       USART_GetFlagStatus
00001c  2800              CMP      r0,#0
00001e  d0f9              BEQ      |L19.20|
;;;266           k++; 
000020  1c64              ADDS     r4,r4,#1
000022  b2a4              UXTH     r4,r4
;;;267           }   //循环发送,直到发送完毕   
;;;268        while (k < strlen); 
000024  42b4              CMP      r4,r6
000026  d3f1              BCC      |L19.12|
;;;269    } 
000028  e8bd81f0          POP      {r4-r8,pc}
;;;270    
                          ENDP

                  |L19.44|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_tModS
                          %        163

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  s_CRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  s_CRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40

                          AREA ||.data||, DATA, ALIGN=0

                  g_mods_timeout
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_e289a1ee____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_e289a1ee____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_e289a1ee____REVSH|
#line 144
|__asm___14_stm32f4xx_it_c_e289a1ee____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
