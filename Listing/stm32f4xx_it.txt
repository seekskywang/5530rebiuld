; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\stm32f4xx_it.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\stm32f4xx_it.crf ..\User\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BEBufToUint16||, CODE, READONLY, ALIGN=1

                  BEBufToUint16 PROC
;;;253    */
;;;254    uint16_t BEBufToUint16(uint8_t *_pBuf)
000000  7841              LDRB     r1,[r0,#1]
;;;255    {
;;;256        return (((uint16_t)_pBuf[0] << 8) | _pBuf[1]);
000002  7800              LDRB     r0,[r0,#0]
000004  ea412000          ORR      r0,r1,r0,LSL #8
;;;257    }
000008  4770              BX       lr
;;;258    
                          ENDP


                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L2.0|
;;;102      */
;;;103    void BusFault_Handler(void)
000000  e7fe              B        |L2.0|
;;;104    {
;;;105      /* Go to infinite loop when Bus Fault exception occurs */
;;;106      while (1)
;;;107      {
;;;108      }
;;;109    }
;;;110    
                          ENDP


                          AREA ||i.CRC16||, CODE, READONLY, ALIGN=2

                  CRC16 PROC
;;;289    
;;;290    uint16_t CRC16(uint8_t *_pBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;291    {    
;;;292        uint8_t ucCRCHi = 0xFF; /* 高CRC字节初始化 */
000002  22ff              MOVS     r2,#0xff
;;;293    	uint8_t ucCRCLo = 0xFF; /* 低CRC 字节初始化 */
000004  23ff              MOVS     r3,#0xff
;;;294    	uint16_t usIndex;  /* CRC循环中的索引 */
;;;295    
;;;296        while (_usLen--)
;;;297        {
;;;298    		usIndex = ucCRCHi ^ *_pBuf++; /* 计算CRC */
;;;299    		ucCRCHi = ucCRCLo ^ s_CRCHi[usIndex];
000006  4c0a              LDR      r4,|L3.48|
;;;300    		ucCRCLo = s_CRCLo[usIndex];
000008  f5047580          ADD      r5,r4,#0x100
00000c  e008              B        |L3.32|
                  |L3.14|
00000e  f810cb01          LDRB     r12,[r0],#1           ;298
000012  ea8c0c02          EOR      r12,r12,r2            ;298
000016  f814200c          LDRB     r2,[r4,r12]           ;299
00001a  405a              EORS     r2,r2,r3              ;299
00001c  f815300c          LDRB     r3,[r5,r12]
                  |L3.32|
000020  000e              MOVS     r6,r1                 ;296
000022  f1a10101          SUB      r1,r1,#1              ;296
000026  b289              UXTH     r1,r1                 ;296
000028  d1f1              BNE      |L3.14|
;;;301        }
;;;302        return ((uint16_t)ucCRCHi << 8 | ucCRCLo);
00002a  ea432002          ORR      r0,r3,r2,LSL #8
;;;303    }
00002e  bd70              POP      {r4-r6,pc}
;;;304    
                          ENDP

                  |L3.48|
                          DCD      ||.constdata||

                          AREA ||i.DMA2_Stream0_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream0_IRQHandler PROC
;;;305    
;;;306    void  DMA2_Stream0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;307    {
;;;308    	DMA_ClearITPendingBit(DMA2_Stream0,DMA_IT_TCIF0);
000002  4905              LDR      r1,|L4.24|
000004  4805              LDR      r0,|L4.28|
000006  f7fffffe          BL       DMA_ClearITPendingBit
;;;309    	Flag_ADC_Full=1;
00000a  4805              LDR      r0,|L4.32|
00000c  6801              LDR      r1,[r0,#0]  ; flagA
00000e  f0410102          ORR      r1,r1,#2
000012  6001              STR      r1,[r0,#0]  ; flagA
;;;310    }
000014  bd10              POP      {r4,pc}
;;;311    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x10008020
                  |L4.28|
                          DCD      0x40026410
                  |L4.32|
                          DCD      flagA

                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;137      */
;;;138    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;139    {
;;;140    }
;;;141    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L6.0|
;;;76       */
;;;77     void HardFault_Handler(void)
000000  e7fe              B        |L6.0|
;;;78     {
;;;79       /* Go to infinite loop when Hard Fault exception occurs */
;;;80       while (1)
;;;81       {
;;;82       }
;;;83     }
;;;84     
                          ENDP


                          AREA ||i.MODS_03H||, CODE, READONLY, ALIGN=2

                  MODS_03H PROC
;;;473    
;;;474    static void MODS_03H(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;475    {
000004  b090              SUB      sp,sp,#0x40
;;;476        uint16_t reg;
;;;477    	uint16_t num;
;;;478    	uint16_t i;
;;;479    	uint8_t reg_value[64];
;;;480    
;;;481        
;;;482        g_tModS.RspCode = RSP_OK;
000006  4f2f              LDR      r7,|L7.196|
000008  2000              MOVS     r0,#0
00000a  f88700a1          STRB     r0,[r7,#0xa1]
;;;483    
;;;484    	if (g_tModS.RxCount != 8)								/* 03H命令必须是8个字节 */
00000e  f897009e          LDRB     r0,[r7,#0x9e]  ; g_tModS
;;;485    	{
;;;486    		g_tModS.RspCode = RSP_ERR_VALUE;					/* 数据值域错误 */
000012  f04f0903          MOV      r9,#3
;;;487    		goto err_ret;
;;;488    	}
;;;489    
;;;490    	reg = BEBufToUint16(&g_tModS.RxBuf[2]); 				/* 寄存器号 */
;;;491    	num = BEBufToUint16(&g_tModS.RxBuf[4]);					/* 寄存器个数 */
;;;492    	if (num > sizeof(reg_value) / 2)
;;;493    	{
;;;494    		g_tModS.RspCode = RSP_ERR_VALUE;					/* 数据值域错误 */
;;;495    		goto err_ret;
;;;496    	}
;;;497    
;;;498    	for (i = 0; i < num; i++)
;;;499    	{
;;;500    		if (MODS_ReadRegValue(reg, &reg_value[2 * i]) == 0)	/* 读出寄存器值放入reg_value */
;;;501    		{
;;;502    			g_tModS.RspCode = RSP_ERR_REG_ADDR;				/* 寄存器地址错误 */
000016  f04f0a02          MOV      r10,#2
00001a  46e8              MOV      r8,sp                 ;479
00001c  2808              CMP      r0,#8                 ;484
00001e  d002              BEQ      |L7.38|
000020  f88790a1          STRB     r9,[r7,#0xa1]         ;486
000024  e01a              B        |L7.92|
                  |L7.38|
000026  1cb8              ADDS     r0,r7,#2              ;490
000028  f7fffffe          BL       BEBufToUint16
00002c  4606              MOV      r6,r0                 ;490
00002e  1d38              ADDS     r0,r7,#4              ;491
000030  f7fffffe          BL       BEBufToUint16
000034  4605              MOV      r5,r0                 ;491
000036  2d20              CMP      r5,#0x20              ;492
000038  d902              BLS      |L7.64|
00003a  f88790a1          STRB     r9,[r7,#0xa1]         ;494
00003e  e00d              B        |L7.92|
                  |L7.64|
000040  2400              MOVS     r4,#0                 ;498
000042  e009              B        |L7.88|
                  |L7.68|
000044  eb080144          ADD      r1,r8,r4,LSL #1       ;500
000048  4630              MOV      r0,r6                 ;500
00004a  f7fffffe          BL       MODS_ReadRegValue
00004e  b1a8              CBZ      r0,|L7.124|
;;;503    			break;
;;;504    		}
;;;505    		reg++;
000050  1c76              ADDS     r6,r6,#1
000052  b2b6              UXTH     r6,r6
000054  1c64              ADDS     r4,r4,#1              ;498
000056  b2a4              UXTH     r4,r4                 ;498
                  |L7.88|
000058  42ac              CMP      r4,r5                 ;498
00005a  d3f3              BCC      |L7.68|
                  |L7.92|
;;;506    	}
;;;507    
;;;508    err_ret:
;;;509    	if (g_tModS.RspCode == RSP_OK)							/* 正确应答 */
00005c  f89700a1          LDRB     r0,[r7,#0xa1]  ; g_tModS
000060  2800              CMP      r0,#0
000062  d12b              BNE      |L7.188|
;;;510    	{
;;;511    		g_tModS.TxCount = 0;
;;;512    		g_tModS.TxBuf[g_tModS.TxCount++] = g_tModS.RxBuf[0];
000064  7838              LDRB     r0,[r7,#0]  ; g_tModS
000066  77b8              STRB     r0,[r7,#0x1e]
;;;513    		g_tModS.TxBuf[g_tModS.TxCount++] = g_tModS.RxBuf[1];
000068  4916              LDR      r1,|L7.196|
00006a  7878              LDRB     r0,[r7,#1]  ; g_tModS
00006c  77c8              STRB     r0,[r1,#0x1f]
;;;514    		g_tModS.TxBuf[g_tModS.TxCount++] = num * 2;			/* 返回字节数 */
00006e  0068              LSLS     r0,r5,#1
000070  f88790a2          STRB     r9,[r7,#0xa2]
000074  f8810020          STRB     r0,[r1,#0x20]
;;;515    
;;;516    		for (i = 0; i < num; i++)
000078  2000              MOVS     r0,#0
00007a  e017              B        |L7.172|
                  |L7.124|
00007c  f887a0a1          STRB     r10,[r7,#0xa1]        ;502
000080  e7ec              B        |L7.92|
                  |L7.130|
;;;517    		{
;;;518    			g_tModS.TxBuf[g_tModS.TxCount++] = reg_value[2*i];
000082  f89710a2          LDRB     r1,[r7,#0xa2]  ; g_tModS
000086  f8183010          LDRB     r3,[r8,r0,LSL #1]
00008a  1c4a              ADDS     r2,r1,#1
00008c  4439              ADD      r1,r1,r7
00008e  f88720a2          STRB     r2,[r7,#0xa2]
000092  778b              STRB     r3,[r1,#0x1e]
;;;519    			g_tModS.TxBuf[g_tModS.TxCount++] = reg_value[2*i+1];
000094  eb080140          ADD      r1,r8,r0,LSL #1
000098  784b              LDRB     r3,[r1,#1]
00009a  f89710a2          LDRB     r1,[r7,#0xa2]  ; g_tModS
00009e  1c4a              ADDS     r2,r1,#1
0000a0  4439              ADD      r1,r1,r7
0000a2  f88720a2          STRB     r2,[r7,#0xa2]
0000a6  778b              STRB     r3,[r1,#0x1e]
0000a8  1c40              ADDS     r0,r0,#1              ;516
0000aa  b280              UXTH     r0,r0                 ;516
                  |L7.172|
0000ac  42a8              CMP      r0,r5                 ;516
0000ae  d3e8              BCC      |L7.130|
;;;520    		}
;;;521    //         if(usartocflag == 0)
;;;522    //         {
;;;523                 MODS_SendWithCRC(g_tModS.TxBuf, g_tModS.TxCount);	/* 发送正确应答 */
0000b0  4804              LDR      r0,|L7.196|
0000b2  f89710a2          LDRB     r1,[r7,#0xa2]  ; g_tModS
0000b6  301e              ADDS     r0,r0,#0x1e
0000b8  f7fffffe          BL       MODS_SendWithCRC
                  |L7.188|
;;;524    //         }
;;;525    	}
;;;526    	else
;;;527    	{
;;;528    //		MODS_SendAckErr(g_tModS.RspCode);					/* 发送错误应答 */
;;;529    	}
;;;530        
;;;531    }
0000bc  b010              ADD      sp,sp,#0x40
0000be  e8bd87f0          POP      {r4-r10,pc}
;;;532    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L7.196|
                          DCD      ||.bss||

                          AREA ||i.MODS_ReadRegValue||, CODE, READONLY, ALIGN=2

                  MODS_ReadRegValue PROC
;;;389    */
;;;390    static uint8_t MODS_ReadRegValue(uint16_t reg_addr, uint8_t *reg_value)
000000  ed9f0a31          VLDR     s0,|L8.200|
;;;391    {
;;;392        uint16_t value;
;;;393    	
;;;394    	switch (reg_addr)									/* 判断寄存器地址 */
000004  2813              CMP      r0,#0x13
000006  d25c              BCS      |L8.194|
000008  e8dff000          TBB      [pc,r0]
00000c  0a0d1823          DCB      0x0a,0x0d,0x18,0x23
000010  303b3d3f          DCB      0x30,0x3b,0x3d,0x3f
000014  41434547          DCB      0x41,0x43,0x45,0x47
000018  494b4d4f          DCB      0x49,0x4b,0x4d,0x4f
00001c  51535500          DCB      0x51,0x53,0x55,0x00
;;;395    	{
;;;396            case SLAVE_REG_P00:
;;;397    			value =	R_VLUE;	
000020  482a              LDR      r0,|L8.204|
000022  8b40              LDRH     r0,[r0,#0x1a]  ; Run_Control
;;;398    			break;
000024  e048              B        |L8.184|
;;;399    		case SLAVE_REG_P01:
;;;400    			value =	(int)(DISS_Voltage*1000);	
000026  482a              LDR      r0,|L8.208|
000028  edd00a00          VLDR     s1,[r0,#0]
00002c  ee200a80          VMUL.F32 s0,s1,s0
000030  eebd0ac0          VCVT.S32.F32 s0,s0
000034  ee100a10          VMOV     r0,s0
000038  b280              UXTH     r0,r0
;;;401    			break;
00003a  e03d              B        |L8.184|
;;;402    
;;;403    		case SLAVE_REG_P02:
;;;404    			value =	(int)(DISS_Current*1000);       /* 将寄存器值读出 */
00003c  4825              LDR      r0,|L8.212|
00003e  edd00a00          VLDR     s1,[r0,#0]
000042  ee200a80          VMUL.F32 s0,s1,s0
000046  eebd0ac0          VCVT.S32.F32 s0,s0
00004a  ee100a10          VMOV     r0,s0
00004e  b280              UXTH     r0,r0
;;;405    			break;
000050  e032              B        |L8.184|
;;;406    		case SLAVE_REG_P03: 
;;;407    			value =	(int)(DISS_POW_Voltage*100);	
000052  4821              LDR      r0,|L8.216|
000054  eddf0a21          VLDR     s1,|L8.220|
000058  ed900a00          VLDR     s0,[r0,#0]
00005c  ee200a20          VMUL.F32 s0,s0,s1
000060  eebd0ac0          VCVT.S32.F32 s0,s0
000064  ee100a10          VMOV     r0,s0
000068  b280              UXTH     r0,r0
;;;408    			break;
00006a  e025              B        |L8.184|
;;;409    
;;;410    		case SLAVE_REG_P04:
;;;411    			value =	(int)(DISS_POW_Current*1000);		/* 将寄存器值读出 */
00006c  481c              LDR      r0,|L8.224|
00006e  edd00a00          VLDR     s1,[r0,#0]
000072  ee200a80          VMUL.F32 s0,s1,s0
000076  eebd0ac0          VCVT.S32.F32 s0,s0
00007a  ee100a10          VMOV     r0,s0
00007e  b280              UXTH     r0,r0
;;;412    			break;
000080  e01a              B        |L8.184|
;;;413    		case SLAVE_REG_P05:
;;;414    //			IO_OFF();
;;;415    //            SET_Current_Laod = 1000;
;;;416    //            usartocflag = 1; 
;;;417    //            while(usartocflag == 1);
;;;418                value = 0;
000082  2000              MOVS     r0,#0
;;;419    			break;
000084  e018              B        |L8.184|
;;;420    		case SLAVE_REG_P06:
;;;421    			value = 0;							/* 将寄存器值读出 */
000086  2000              MOVS     r0,#0
;;;422    			break;
000088  e016              B        |L8.184|
;;;423    		case SLAVE_REG_P07:
;;;424    			value =	0;							/* 将寄存器值读出 */
00008a  2000              MOVS     r0,#0
;;;425    			break;
00008c  e014              B        |L8.184|
;;;426    		case SLAVE_REG_P08:
;;;427    			value =	0;	
00008e  2000              MOVS     r0,#0
;;;428    			break;
000090  e012              B        |L8.184|
;;;429    
;;;430    		case SLAVE_REG_P09:
;;;431    			value =	0;							/* 将寄存器值读出 */
000092  2000              MOVS     r0,#0
;;;432    			break;
000094  e010              B        |L8.184|
;;;433    		case SLAVE_REG_P10:
;;;434    			value =	0;	
000096  2000              MOVS     r0,#0
;;;435    			break;
000098  e00e              B        |L8.184|
;;;436    
;;;437    		case SLAVE_REG_P11:
;;;438    			value =	0;							/* 将寄存器值读出 */
00009a  2000              MOVS     r0,#0
;;;439    			break;
00009c  e00c              B        |L8.184|
;;;440    		case SLAVE_REG_P12:
;;;441    			value =	0;	
00009e  2000              MOVS     r0,#0
;;;442    			break;
0000a0  e00a              B        |L8.184|
;;;443    
;;;444    		case SLAVE_REG_P13:
;;;445    			value =	0;							/* 将寄存器值读出 */
0000a2  2000              MOVS     r0,#0
;;;446    			break;
0000a4  e008              B        |L8.184|
;;;447    		case SLAVE_REG_P14:
;;;448    			value =	0;	
0000a6  2000              MOVS     r0,#0
;;;449    			break;
0000a8  e006              B        |L8.184|
;;;450    
;;;451    		case SLAVE_REG_P15:
;;;452    			value =	0;							/* 将寄存器值读出 */
0000aa  2000              MOVS     r0,#0
;;;453    			break;
0000ac  e004              B        |L8.184|
;;;454    		case SLAVE_REG_P16:
;;;455    			value =	0;	
0000ae  2000              MOVS     r0,#0
;;;456    			break;
0000b0  e002              B        |L8.184|
;;;457    
;;;458    		case SLAVE_REG_P17:
;;;459    			value =	0;							/* 将寄存器值读出 */
0000b2  2000              MOVS     r0,#0
;;;460    			break;
0000b4  e000              B        |L8.184|
;;;461    		case SLAVE_REG_P18:
;;;462    			value =	0;							/* 将寄存器值读出 */
0000b6  2000              MOVS     r0,#0
                  |L8.184|
;;;463    			break;	
;;;464    		default:
;;;465    			return 0;
;;;466        }
;;;467    	reg_value[0] = value >> 8;
0000b8  0a02              LSRS     r2,r0,#8
0000ba  700a              STRB     r2,[r1,#0]
;;;468    	reg_value[1] = value;
0000bc  7048              STRB     r0,[r1,#1]
;;;469    
;;;470    	return 1;											/* 读取成功 */
0000be  2001              MOVS     r0,#1
;;;471    }
0000c0  4770              BX       lr
                  |L8.194|
0000c2  2000              MOVS     r0,#0                 ;465
0000c4  4770              BX       lr
;;;472    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L8.200|
0000c8  447a0000          DCFS     0x447a0000 ; 1000
                  |L8.204|
                          DCD      Run_Control
                  |L8.208|
                          DCD      DISS_Voltage
                  |L8.212|
                          DCD      DISS_Current
                  |L8.216|
                          DCD      DISS_POW_Voltage
                  |L8.220|
0000dc  42c80000          DCFS     0x42c80000 ; 100
                  |L8.224|
                          DCD      DISS_POW_Current

                          AREA ||i.MODS_SendWithCRC||, CODE, READONLY, ALIGN=1

                  MODS_SendWithCRC PROC
;;;269    
;;;270    void MODS_SendWithCRC(uint8_t *_pBuf, uint8_t _ucLen)
000000  b530              PUSH     {r4,r5,lr}
;;;271    {
000002  b0a1              SUB      sp,sp,#0x84
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;272    	uint16_t crc;
;;;273    	uint8_t buf[S_TX_BUF_SIZE];
;;;274    
;;;275    	memcpy(buf, _pBuf, _ucLen);
000008  4622              MOV      r2,r4
00000a  4629              MOV      r1,r5
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memcpy
;;;276    	crc = CRC16(_pBuf, _ucLen);
000012  4621              MOV      r1,r4
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       CRC16
;;;277    	buf[_ucLen++] = crc >> 8;
00001a  0a05              LSRS     r5,r0,#8
00001c  ab01              ADD      r3,sp,#4
00001e  1c61              ADDS     r1,r4,#1
000020  b2ca              UXTB     r2,r1
000022  551d              STRB     r5,[r3,r4]
;;;278    	buf[_ucLen++] = crc;
000024  1c51              ADDS     r1,r2,#1
000026  b2c9              UXTB     r1,r1
000028  5498              STRB     r0,[r3,r2]
;;;279    //通过485发数据
;;;280    //	RS485_SendBuf(buf, _ucLen);
;;;281    
;;;282    	uart1SendChars(buf, _ucLen);
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       uart1SendChars
;;;283    	
;;;284    // #if 1									/* 此部分为了串口打印结果,实际运用中可不要 */
;;;285    // 	g_tPrint.Txlen = _ucLen;
;;;286    // 	memcpy(g_tPrint.TxBuf, buf, _ucLen);
;;;287    // #endif
;;;288    }
000030  b021              ADD      sp,sp,#0x84
000032  bd30              POP      {r4,r5,pc}
;;;289    
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L10.0|
;;;89       */
;;;90     void MemManage_Handler(void)
000000  e7fe              B        |L10.0|
;;;91     {
;;;92       /* Go to infinite loop when Memory Manage exception occurs */
;;;93       while (1)
;;;94       {
;;;95       }
;;;96     }
;;;97     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;67       */
;;;68     void NMI_Handler(void)
000000  4770              BX       lr
;;;69     {
;;;70     }
;;;71     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;146      */
;;;147    void PendSV_Handler(void)
000000  4770              BX       lr
;;;148    {
;;;149    }
;;;150    
                          ENDP


                          AREA ||i.RecHandle||, CODE, READONLY, ALIGN=2

                  RecHandle PROC
;;;356    
;;;357    void RecHandle(void)
000000  4803              LDR      r0,|L13.16|
;;;358    {
;;;359        u8 crec[6];
;;;360        u8 *csend;
;;;361        static u8 *sendbuf;
;;;362        u8 sendlen;
;;;363        static u16 recrc;
;;;364        static u16 scrc;
;;;365        u8 i;
;;;366        
;;;367        switch(g_tModS.RxBuf[1])
000002  7840              LDRB     r0,[r0,#1]  ; g_tModS
000004  2803              CMP      r0,#3
000006  d101              BNE      |L13.12|
;;;368        {
;;;369            case 0x03:
;;;370            {
;;;371                MODS_03H();
000008  f7ffbffe          B.W      MODS_03H
                  |L13.12|
;;;372            }break;
;;;373            case 0x06:
;;;374            {
;;;375                
;;;376            }break;
;;;377            default:break;
;;;378        }
;;;379    }
00000c  4770              BX       lr
;;;380    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      ||.bss||

                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;128      */
;;;129    void SVC_Handler(void)
000000  4770              BX       lr
;;;130    {
;;;131    }
;;;132    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;155      */
;;;156    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;157    {
;;;158    	TimingDelay_Decrement();
000002  f7fffffe          BL       TimingDelay_Decrement
;;;159    	OS_TimeMS++;
000006  4918              LDR      r1,|L15.104|
000008  6808              LDR      r0,[r1,#0]  ; OS_TimeMS
00000a  1c40              ADDS     r0,r0,#1
00000c  6008              STR      r0,[r1,#0]  ; OS_TimeMS
;;;160    	t_KeyScan++;
00000e  4817              LDR      r0,|L15.108|
000010  7801              LDRB     r1,[r0,#0]  ; t_KeyScan
000012  1c49              ADDS     r1,r1,#1
000014  7001              STRB     r1,[r0,#0]
;;;161    	if(t_KeyScan>10)
000016  7803              LDRB     r3,[r0,#0]  ; t_KeyScan
;;;162    	{
;;;163    		t_KeyScan=0;
;;;164    		Flag_Key_Scan=1;//按键消抖标志
000018  4a15              LDR      r2,|L15.112|
00001a  2100              MOVS     r1,#0                 ;163
00001c  2b0a              CMP      r3,#0xa               ;161
00001e  d904              BLS      |L15.42|
000020  7001              STRB     r1,[r0,#0]            ;163
000022  6810              LDR      r0,[r2,#0]  ; flagA
000024  f0400008          ORR      r0,r0,#8
000028  6010              STR      r0,[r2,#0]  ; flagA
                  |L15.42|
;;;165    	}
;;;166    	t_0_5S++;
00002a  4812              LDR      r0,|L15.116|
00002c  8803              LDRH     r3,[r0,#0]  ; t_0_5S
00002e  1c5b              ADDS     r3,r3,#1
000030  8003              STRH     r3,[r0,#0]
;;;167    	if(t_0_5S>20)
000032  8803              LDRH     r3,[r0,#0]  ; t_0_5S
000034  2b14              CMP      r3,#0x14
000036  d904              BLS      |L15.66|
;;;168    	{
;;;169    		t_0_5S=0;
000038  8001              STRH     r1,[r0,#0]
;;;170    		Flag_0_5S =1;//蜂鸣器响一声标志
00003a  6810              LDR      r0,[r2,#0]  ; flagA
00003c  f0400080          ORR      r0,r0,#0x80
000040  6010              STR      r0,[r2,#0]  ; flagA
                  |L15.66|
;;;171    	}
;;;172    //--------------------------------------------
;;;173    	if(flag_Tim_USART==1)//串口清零计数
000042  4b0d              LDR      r3,|L15.120|
;;;174    	{
;;;175    		t_USART++;
000044  4a0d              LDR      r2,|L15.124|
000046  6818              LDR      r0,[r3,#0]            ;173  ; flagD
000048  07c4              LSLS     r4,r0,#31             ;173
00004a  d002              BEQ      |L15.82|
00004c  7814              LDRB     r4,[r2,#0]  ; t_USART
00004e  1c64              ADDS     r4,r4,#1
000050  7014              STRB     r4,[r2,#0]
                  |L15.82|
;;;176    	}
;;;177    	if(t_USART>40)//大约2.6ms
000052  7814              LDRB     r4,[r2,#0]  ; t_USART
000054  2c28              CMP      r4,#0x28
000056  d905              BLS      |L15.100|
;;;178    	{
;;;179    		t_USART=0;
000058  7011              STRB     r1,[r2,#0]
;;;180    		flag_Tim_USART=0;
00005a  f0200001          BIC      r0,r0,#1
00005e  6018              STR      r0,[r3,#0]  ; flagD
;;;181    		UART_Buffer_Size=0;	
000060  4807              LDR      r0,|L15.128|
000062  7001              STRB     r1,[r0,#0]
                  |L15.100|
;;;182    	}
;;;183    }
000064  bd10              POP      {r4,pc}
;;;184    
                          ENDP

000066  0000              DCW      0x0000
                  |L15.104|
                          DCD      OS_TimeMS
                  |L15.108|
                          DCD      t_KeyScan
                  |L15.112|
                          DCD      flagA
                  |L15.116|
                          DCD      t_0_5S
                  |L15.120|
                          DCD      flagD
                  |L15.124|
                          DCD      t_USART
                  |L15.128|
                          DCD      UART_Buffer_Size

                          AREA ||i.TIM6_DAC_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM6_DAC_IRQHandler PROC
;;;311    
;;;312    void  TIM6_DAC_IRQHandler (void)
000000  2101              MOVS     r1,#1
;;;313    {
;;;314    	TIM_ClearITPendingBit(TIM6,TIM_IT_Update);//清中断标志位
000002  4801              LDR      r0,|L16.8|
000004  f7ffbffe          B.W      TIM_ClearITPendingBit
;;;315    }
;;;316    
                          ENDP

                  |L16.8|
                          DCD      0x40001000

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;317    
;;;318    void USART1_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;319    {
;;;320        if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
000002  4d0d              LDR      r5,|L17.56|
000004  f2405125          MOV      r1,#0x525
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d010              BEQ      |L17.52|
;;;321    	{
;;;322            g_mods_timeout = 2;
000012  490a              LDR      r1,|L17.60|
000014  2002              MOVS     r0,#2
000016  7008              STRB     r0,[r1,#0]
;;;323            if (g_tModS.RxCount < S_RX_BUF_SIZE)
000018  4c09              LDR      r4,|L17.64|
00001a  f894009e          LDRB     r0,[r4,#0x9e]  ; g_tModS
00001e  281e              CMP      r0,#0x1e
000020  d208              BCS      |L17.52|
;;;324            {
;;;325                g_tModS.RxBuf[g_tModS.RxCount++] = USART_ReceiveData(USART1);;
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       USART_ReceiveData
000028  f894109e          LDRB     r1,[r4,#0x9e]  ; g_tModS
00002c  1c4a              ADDS     r2,r1,#1
00002e  f884209e          STRB     r2,[r4,#0x9e]
000032  5460              STRB     r0,[r4,r1]
                  |L17.52|
;;;326            }
;;;327        }
;;;328    // 	flag_Tim_USART=1;
;;;329    //  	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
;;;330    // 	{
;;;331    // 		UART_Buffer_Rece[UART_Buffer_Size]=USART_ReceiveData(USART1);
;;;332    // 		UART_Buffer_Size++;
;;;333    // 		if (UART_Buffer_Size > 7)
;;;334    // 		{
;;;335    // 			if (UART_Buffer_Rece[1] == 16)
;;;336    // 			{	
;;;337    // 				if (UART_Buffer_Size > (UART_Buffer_Rece[6]+8))
;;;338    // 				{
;;;339    // 					UART_Buffer_Size=0;	  	   		   
;;;340    // 					UART_Buffer_Rece_flag=1;
;;;341    // 					flag_Tim_USART=0;
;;;342    // 					t_USART=0;
;;;343    // 				}
;;;344    // 			}
;;;345    // 			else
;;;346    // 			{
;;;347    // 				UART_Buffer_Size=0;	  	   	   
;;;348    // 				UART_Buffer_Rece_flag=1;  
;;;349    // 				flag_Tim_USART=0;
;;;350    // 				t_USART=0;
;;;351    // 			}	  
;;;352    // 		}
;;;353    // 	}
;;;354    }
000034  bd70              POP      {r4-r6,pc}
;;;355    
                          ENDP

000036  0000              DCW      0x0000
                  |L17.56|
                          DCD      0x40011000
                  |L17.60|
                          DCD      ||.data||
                  |L17.64|
                          DCD      ||.bss||

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L18.0|
;;;115      */
;;;116    void UsageFault_Handler(void)
000000  e7fe              B        |L18.0|
;;;117    {
;;;118      /* Go to infinite loop when Usage Fault exception occurs */
;;;119      while (1)
;;;120      {
;;;121      }
;;;122    }
;;;123    
                          ENDP


                          AREA ||i.uart1SendChars||, CODE, READONLY, ALIGN=2

                  uart1SendChars PROC
;;;258    
;;;259    void uart1SendChars(u8 *str, u16 strlen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;260    { 
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;261    	  u16 k= 0 ; 
000008  2400              MOVS     r4,#0
;;;262       do { 
;;;263           USART_SendData(USART1,*(str + k));
00000a  4f08              LDR      r7,|L19.44|
                  |L19.12|
00000c  5d29              LDRB     r1,[r5,r4]
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       USART_SendData
                  |L19.20|
;;;264           while (USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);
000014  2180              MOVS     r1,#0x80
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       USART_GetFlagStatus
00001c  2800              CMP      r0,#0
00001e  d0f9              BEQ      |L19.20|
;;;265           k++; 
000020  1c64              ADDS     r4,r4,#1
000022  b2a4              UXTH     r4,r4
;;;266           }   //循环发送,直到发送完毕   
;;;267        while (k < strlen); 
000024  42b4              CMP      r4,r6
000026  d3f1              BCC      |L19.12|
;;;268    } 
000028  e8bd81f0          POP      {r4-r8,pc}
;;;269    
                          ENDP

                  |L19.44|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_tModS
                          %        163

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  s_CRCHi
000000  00c18140          DCB      0x00,0xc1,0x81,0x40
000004  01c08041          DCB      0x01,0xc0,0x80,0x41
000008  01c08041          DCB      0x01,0xc0,0x80,0x41
00000c  00c18140          DCB      0x00,0xc1,0x81,0x40
000010  01c08041          DCB      0x01,0xc0,0x80,0x41
000014  00c18140          DCB      0x00,0xc1,0x81,0x40
000018  00c18140          DCB      0x00,0xc1,0x81,0x40
00001c  01c08041          DCB      0x01,0xc0,0x80,0x41
000020  01c08041          DCB      0x01,0xc0,0x80,0x41
000024  00c18140          DCB      0x00,0xc1,0x81,0x40
000028  00c18140          DCB      0x00,0xc1,0x81,0x40
00002c  01c08041          DCB      0x01,0xc0,0x80,0x41
000030  00c18140          DCB      0x00,0xc1,0x81,0x40
000034  01c08041          DCB      0x01,0xc0,0x80,0x41
000038  01c08041          DCB      0x01,0xc0,0x80,0x41
00003c  00c18140          DCB      0x00,0xc1,0x81,0x40
000040  01c08041          DCB      0x01,0xc0,0x80,0x41
000044  00c18140          DCB      0x00,0xc1,0x81,0x40
000048  00c18140          DCB      0x00,0xc1,0x81,0x40
00004c  01c08041          DCB      0x01,0xc0,0x80,0x41
000050  00c18140          DCB      0x00,0xc1,0x81,0x40
000054  01c08041          DCB      0x01,0xc0,0x80,0x41
000058  01c08041          DCB      0x01,0xc0,0x80,0x41
00005c  00c18140          DCB      0x00,0xc1,0x81,0x40
000060  00c18140          DCB      0x00,0xc1,0x81,0x40
000064  01c08041          DCB      0x01,0xc0,0x80,0x41
000068  01c08041          DCB      0x01,0xc0,0x80,0x41
00006c  00c18140          DCB      0x00,0xc1,0x81,0x40
000070  01c08041          DCB      0x01,0xc0,0x80,0x41
000074  00c18140          DCB      0x00,0xc1,0x81,0x40
000078  00c18140          DCB      0x00,0xc1,0x81,0x40
00007c  01c08041          DCB      0x01,0xc0,0x80,0x41
000080  01c08041          DCB      0x01,0xc0,0x80,0x41
000084  00c18140          DCB      0x00,0xc1,0x81,0x40
000088  00c18140          DCB      0x00,0xc1,0x81,0x40
00008c  01c08041          DCB      0x01,0xc0,0x80,0x41
000090  00c18140          DCB      0x00,0xc1,0x81,0x40
000094  01c08041          DCB      0x01,0xc0,0x80,0x41
000098  01c08041          DCB      0x01,0xc0,0x80,0x41
00009c  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000a4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000a8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000ac  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000b4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000b8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000bc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000c4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000c8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000cc  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000d4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000d8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000dc  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e0  01c08041          DCB      0x01,0xc0,0x80,0x41
0000e4  00c18140          DCB      0x00,0xc1,0x81,0x40
0000e8  00c18140          DCB      0x00,0xc1,0x81,0x40
0000ec  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f0  00c18140          DCB      0x00,0xc1,0x81,0x40
0000f4  01c08041          DCB      0x01,0xc0,0x80,0x41
0000f8  01c08041          DCB      0x01,0xc0,0x80,0x41
0000fc  00c18140          DCB      0x00,0xc1,0x81,0x40
                  s_CRCLo
000100  00c0c101          DCB      0x00,0xc0,0xc1,0x01
000104  c30302c2          DCB      0xc3,0x03,0x02,0xc2
000108  c60607c7          DCB      0xc6,0x06,0x07,0xc7
00010c  05c5c404          DCB      0x05,0xc5,0xc4,0x04
000110  cc0c0dcd          DCB      0xcc,0x0c,0x0d,0xcd
000114  0fcfce0e          DCB      0x0f,0xcf,0xce,0x0e
000118  0acacb0b          DCB      0x0a,0xca,0xcb,0x0b
00011c  c90908c8          DCB      0xc9,0x09,0x08,0xc8
000120  d81819d9          DCB      0xd8,0x18,0x19,0xd9
000124  1bdbda1a          DCB      0x1b,0xdb,0xda,0x1a
000128  1ededf1f          DCB      0x1e,0xde,0xdf,0x1f
00012c  dd1d1cdc          DCB      0xdd,0x1d,0x1c,0xdc
000130  14d4d515          DCB      0x14,0xd4,0xd5,0x15
000134  d71716d6          DCB      0xd7,0x17,0x16,0xd6
000138  d21213d3          DCB      0xd2,0x12,0x13,0xd3
00013c  11d1d010          DCB      0x11,0xd1,0xd0,0x10
000140  f03031f1          DCB      0xf0,0x30,0x31,0xf1
000144  33f3f232          DCB      0x33,0xf3,0xf2,0x32
000148  36f6f737          DCB      0x36,0xf6,0xf7,0x37
00014c  f53534f4          DCB      0xf5,0x35,0x34,0xf4
000150  3cfcfd3d          DCB      0x3c,0xfc,0xfd,0x3d
000154  ff3f3efe          DCB      0xff,0x3f,0x3e,0xfe
000158  fa3a3bfb          DCB      0xfa,0x3a,0x3b,0xfb
00015c  39f9f838          DCB      0x39,0xf9,0xf8,0x38
000160  28e8e929          DCB      0x28,0xe8,0xe9,0x29
000164  eb2b2aea          DCB      0xeb,0x2b,0x2a,0xea
000168  ee2e2fef          DCB      0xee,0x2e,0x2f,0xef
00016c  2dedec2c          DCB      0x2d,0xed,0xec,0x2c
000170  e42425e5          DCB      0xe4,0x24,0x25,0xe5
000174  27e7e626          DCB      0x27,0xe7,0xe6,0x26
000178  22e2e323          DCB      0x22,0xe2,0xe3,0x23
00017c  e12120e0          DCB      0xe1,0x21,0x20,0xe0
000180  a06061a1          DCB      0xa0,0x60,0x61,0xa1
000184  63a3a262          DCB      0x63,0xa3,0xa2,0x62
000188  66a6a767          DCB      0x66,0xa6,0xa7,0x67
00018c  a56564a4          DCB      0xa5,0x65,0x64,0xa4
000190  6cacad6d          DCB      0x6c,0xac,0xad,0x6d
000194  af6f6eae          DCB      0xaf,0x6f,0x6e,0xae
000198  aa6a6bab          DCB      0xaa,0x6a,0x6b,0xab
00019c  69a9a868          DCB      0x69,0xa9,0xa8,0x68
0001a0  78b8b979          DCB      0x78,0xb8,0xb9,0x79
0001a4  bb7b7aba          DCB      0xbb,0x7b,0x7a,0xba
0001a8  be7e7fbf          DCB      0xbe,0x7e,0x7f,0xbf
0001ac  7dbdbc7c          DCB      0x7d,0xbd,0xbc,0x7c
0001b0  b47475b5          DCB      0xb4,0x74,0x75,0xb5
0001b4  77b7b676          DCB      0x77,0xb7,0xb6,0x76
0001b8  72b2b373          DCB      0x72,0xb2,0xb3,0x73
0001bc  b17170b0          DCB      0xb1,0x71,0x70,0xb0
0001c0  50909151          DCB      0x50,0x90,0x91,0x51
0001c4  93535292          DCB      0x93,0x53,0x52,0x92
0001c8  96565797          DCB      0x96,0x56,0x57,0x97
0001cc  55959454          DCB      0x55,0x95,0x94,0x54
0001d0  9c5c5d9d          DCB      0x9c,0x5c,0x5d,0x9d
0001d4  5f9f9e5e          DCB      0x5f,0x9f,0x9e,0x5e
0001d8  5a9a9b5b          DCB      0x5a,0x9a,0x9b,0x5b
0001dc  99595898          DCB      0x99,0x59,0x58,0x98
0001e0  88484989          DCB      0x88,0x48,0x49,0x89
0001e4  4b8b8a4a          DCB      0x4b,0x8b,0x8a,0x4a
0001e8  4e8e8f4f          DCB      0x4e,0x8e,0x8f,0x4f
0001ec  8d4d4c8c          DCB      0x8d,0x4d,0x4c,0x8c
0001f0  44848545          DCB      0x44,0x84,0x85,0x45
0001f4  87474686          DCB      0x87,0x47,0x46,0x86
0001f8  82424383          DCB      0x82,0x42,0x43,0x83
0001fc  41818040          DCB      0x41,0x81,0x80,0x40

                          AREA ||.data||, DATA, ALIGN=0

                  g_mods_timeout
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_e289a1ee____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_e289a1ee____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_e289a1ee____REVSH|
#line 128
|__asm___14_stm32f4xx_it_c_e289a1ee____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
