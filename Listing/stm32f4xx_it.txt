; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\stm32f4xx_it.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\stm32f4xx_it.crf ..\User\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L1.0|
;;;100      */
;;;101    void BusFault_Handler(void)
000000  e7fe              B        |L1.0|
;;;102    {
;;;103      /* Go to infinite loop when Bus Fault exception occurs */
;;;104      while (1)
;;;105      {
;;;106      }
;;;107    }
;;;108    
                          ENDP


                          AREA ||i.DMA2_Stream0_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream0_IRQHandler PROC
;;;182    
;;;183    void  DMA2_Stream0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;184    {
;;;185    	DMA_ClearITPendingBit(DMA2_Stream0,DMA_IT_TCIF0);
000002  4905              LDR      r1,|L2.24|
000004  4805              LDR      r0,|L2.28|
000006  f7fffffe          BL       DMA_ClearITPendingBit
;;;186    	Flag_ADC_Full=1;
00000a  4805              LDR      r0,|L2.32|
00000c  6801              LDR      r1,[r0,#0]  ; flagA
00000e  f0410102          ORR      r1,r1,#2
000012  6001              STR      r1,[r0,#0]  ; flagA
;;;187    }
000014  bd10              POP      {r4,pc}
;;;188    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x10008020
                  |L2.28|
                          DCD      0x40026410
                  |L2.32|
                          DCD      flagA

                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;135      */
;;;136    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;137    {
;;;138    }
;;;139    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L4.0|
;;;74       */
;;;75     void HardFault_Handler(void)
000000  e7fe              B        |L4.0|
;;;76     {
;;;77       /* Go to infinite loop when Hard Fault exception occurs */
;;;78       while (1)
;;;79       {
;;;80       }
;;;81     }
;;;82     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L5.0|
;;;87       */
;;;88     void MemManage_Handler(void)
000000  e7fe              B        |L5.0|
;;;89     {
;;;90       /* Go to infinite loop when Memory Manage exception occurs */
;;;91       while (1)
;;;92       {
;;;93       }
;;;94     }
;;;95     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;65       */
;;;66     void NMI_Handler(void)
000000  4770              BX       lr
;;;67     {
;;;68     }
;;;69     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;144      */
;;;145    void PendSV_Handler(void)
000000  4770              BX       lr
;;;146    {
;;;147    }
;;;148    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;126      */
;;;127    void SVC_Handler(void)
000000  4770              BX       lr
;;;128    {
;;;129    }
;;;130    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;153      */
;;;154    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156    	TimingDelay_Decrement();
000002  f7fffffe          BL       TimingDelay_Decrement
;;;157    	OS_TimeMS++;
000006  4918              LDR      r1,|L9.104|
000008  6808              LDR      r0,[r1,#0]  ; OS_TimeMS
00000a  1c40              ADDS     r0,r0,#1
00000c  6008              STR      r0,[r1,#0]  ; OS_TimeMS
;;;158    	t_KeyScan++;
00000e  4817              LDR      r0,|L9.108|
000010  7801              LDRB     r1,[r0,#0]  ; t_KeyScan
000012  1c49              ADDS     r1,r1,#1
000014  7001              STRB     r1,[r0,#0]
;;;159    	if(t_KeyScan>10)
000016  7803              LDRB     r3,[r0,#0]  ; t_KeyScan
;;;160    	{
;;;161    		t_KeyScan=0;
;;;162    		Flag_Key_Scan=1;//按键消抖标志
000018  4a15              LDR      r2,|L9.112|
00001a  2100              MOVS     r1,#0                 ;161
00001c  2b0a              CMP      r3,#0xa               ;159
00001e  d904              BLS      |L9.42|
000020  7001              STRB     r1,[r0,#0]            ;161
000022  6810              LDR      r0,[r2,#0]  ; flagA
000024  f0400008          ORR      r0,r0,#8
000028  6010              STR      r0,[r2,#0]  ; flagA
                  |L9.42|
;;;163    	}
;;;164    	t_0_5S++;
00002a  4812              LDR      r0,|L9.116|
00002c  8803              LDRH     r3,[r0,#0]  ; t_0_5S
00002e  1c5b              ADDS     r3,r3,#1
000030  8003              STRH     r3,[r0,#0]
;;;165    	if(t_0_5S>20)
000032  8803              LDRH     r3,[r0,#0]  ; t_0_5S
000034  2b14              CMP      r3,#0x14
000036  d904              BLS      |L9.66|
;;;166    	{
;;;167    		t_0_5S=0;
000038  8001              STRH     r1,[r0,#0]
;;;168    		Flag_0_5S =1;//蜂鸣器响一声标志
00003a  6810              LDR      r0,[r2,#0]  ; flagA
00003c  f0400080          ORR      r0,r0,#0x80
000040  6010              STR      r0,[r2,#0]  ; flagA
                  |L9.66|
;;;169    	}
;;;170    //--------------------------------------------
;;;171    	if(flag_Tim_USART==1)//串口清零计数
000042  4b0d              LDR      r3,|L9.120|
;;;172    	{
;;;173    		t_USART++;
000044  4a0d              LDR      r2,|L9.124|
000046  6818              LDR      r0,[r3,#0]            ;171  ; flagD
000048  07c4              LSLS     r4,r0,#31             ;171
00004a  d002              BEQ      |L9.82|
00004c  7814              LDRB     r4,[r2,#0]  ; t_USART
00004e  1c64              ADDS     r4,r4,#1
000050  7014              STRB     r4,[r2,#0]
                  |L9.82|
;;;174    	}
;;;175    	if(t_USART>40)//大约2.6ms
000052  7814              LDRB     r4,[r2,#0]  ; t_USART
000054  2c28              CMP      r4,#0x28
000056  d905              BLS      |L9.100|
;;;176    	{
;;;177    		t_USART=0;
000058  7011              STRB     r1,[r2,#0]
;;;178    		flag_Tim_USART=0;
00005a  f0200001          BIC      r0,r0,#1
00005e  6018              STR      r0,[r3,#0]  ; flagD
;;;179    		UART_Buffer_Size=0;	
000060  4807              LDR      r0,|L9.128|
000062  7001              STRB     r1,[r0,#0]
                  |L9.100|
;;;180    	}
;;;181    }
000064  bd10              POP      {r4,pc}
;;;182    
                          ENDP

000066  0000              DCW      0x0000
                  |L9.104|
                          DCD      OS_TimeMS
                  |L9.108|
                          DCD      t_KeyScan
                  |L9.112|
                          DCD      flagA
                  |L9.116|
                          DCD      t_0_5S
                  |L9.120|
                          DCD      flagD
                  |L9.124|
                          DCD      t_USART
                  |L9.128|
                          DCD      UART_Buffer_Size

                          AREA ||i.TIM6_DAC_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM6_DAC_IRQHandler PROC
;;;188    
;;;189    void  TIM6_DAC_IRQHandler (void)
000000  2101              MOVS     r1,#1
;;;190    {
;;;191    	TIM_ClearITPendingBit(TIM6,TIM_IT_Update);//清中断标志位
000002  4801              LDR      r0,|L10.8|
000004  f7ffbffe          B.W      TIM_ClearITPendingBit
;;;192    }
;;;193    
                          ENDP

                  |L10.8|
                          DCD      0x40001000

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;193    
;;;194    void USART1_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;195    {
;;;196    	flag_Tim_USART=1;
000002  4c1d              LDR      r4,|L11.120|
000004  6820              LDR      r0,[r4,#0]  ; flagD
000006  f0400001          ORR      r0,r0,#1
00000a  6020              STR      r0,[r4,#0]  ; flagD
;;;197     	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
00000c  4d1b              LDR      r5,|L11.124|
00000e  f2405125          MOV      r1,#0x525
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       USART_GetITStatus
000018  2800              CMP      r0,#0
00001a  d01c              BEQ      |L11.86|
;;;198    	{
;;;199    		UART_Buffer_Rece[UART_Buffer_Size]=USART_ReceiveData(USART1);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       USART_ReceiveData
000022  4918              LDR      r1,|L11.132|
000024  4a16              LDR      r2,|L11.128|
000026  780b              LDRB     r3,[r1,#0]  ; UART_Buffer_Size
000028  54d0              STRB     r0,[r2,r3]
;;;200    		UART_Buffer_Size++;
00002a  7808              LDRB     r0,[r1,#0]  ; UART_Buffer_Size
00002c  1c40              ADDS     r0,r0,#1
00002e  7008              STRB     r0,[r1,#0]
;;;201    		if (UART_Buffer_Size > 7)
000030  7808              LDRB     r0,[r1,#0]  ; UART_Buffer_Size
000032  2807              CMP      r0,#7
000034  d90f              BLS      |L11.86|
;;;202    		{
;;;203    			if (UART_Buffer_Rece[1] == 16)
000036  7856              LDRB     r6,[r2,#1]  ; UART_Buffer_Rece
;;;204    			{	
;;;205    				if (UART_Buffer_Size > (UART_Buffer_Rece[6]+8))
;;;206    				{
;;;207    					UART_Buffer_Size=0;	  	   		   
000038  2300              MOVS     r3,#0
;;;208    					UART_Buffer_Rece_flag=1;
00003a  4813              LDR      r0,|L11.136|
;;;209    					flag_Tim_USART=0;
;;;210    					t_USART=0;
00003c  4d13              LDR      r5,|L11.140|
00003e  2e10              CMP      r6,#0x10              ;203
000040  d00a              BEQ      |L11.88|
;;;211    				}
;;;212    			}
;;;213    			else
;;;214    			{
;;;215    				UART_Buffer_Size=0;	  	   	   
000042  700b              STRB     r3,[r1,#0]
;;;216    				UART_Buffer_Rece_flag=1;  
000044  6801              LDR      r1,[r0,#0]  ; flagA
000046  f0410120          ORR      r1,r1,#0x20
00004a  6001              STR      r1,[r0,#0]  ; flagA
;;;217    				flag_Tim_USART=0;
00004c  6820              LDR      r0,[r4,#0]  ; flagD
00004e  f0200001          BIC      r0,r0,#1
000052  6020              STR      r0,[r4,#0]  ; flagD
;;;218    				t_USART=0;
000054  702b              STRB     r3,[r5,#0]
                  |L11.86|
;;;219    			}	  
;;;220    		}
;;;221    	}
;;;222    }
000056  bd70              POP      {r4-r6,pc}
                  |L11.88|
000058  7992              LDRB     r2,[r2,#6]            ;205  ; UART_Buffer_Rece
00005a  780e              LDRB     r6,[r1,#0]            ;205  ; UART_Buffer_Size
00005c  3208              ADDS     r2,r2,#8              ;205
00005e  42b2              CMP      r2,r6                 ;205
000060  d2f9              BCS      |L11.86|
000062  700b              STRB     r3,[r1,#0]            ;207
000064  6801              LDR      r1,[r0,#0]            ;208  ; flagA
000066  f0410120          ORR      r1,r1,#0x20           ;208
00006a  6001              STR      r1,[r0,#0]            ;208  ; flagA
00006c  6820              LDR      r0,[r4,#0]            ;209  ; flagD
00006e  f0200001          BIC      r0,r0,#1              ;209
000072  6020              STR      r0,[r4,#0]            ;209  ; flagD
000074  702b              STRB     r3,[r5,#0]            ;210
000076  bd70              POP      {r4-r6,pc}
;;;223    /******************************************************************************/
                          ENDP

                  |L11.120|
                          DCD      flagD
                  |L11.124|
                          DCD      0x40011000
                  |L11.128|
                          DCD      UART_Buffer_Rece
                  |L11.132|
                          DCD      UART_Buffer_Size
                  |L11.136|
                          DCD      flagA
                  |L11.140|
                          DCD      t_USART

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L12.0|
;;;113      */
;;;114    void UsageFault_Handler(void)
000000  e7fe              B        |L12.0|
;;;115    {
;;;116      /* Go to infinite loop when Usage Fault exception occurs */
;;;117      while (1)
;;;118      {
;;;119      }
;;;120    }
;;;121    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\User\\stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_bb8ca80c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH|
#line 128
|__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
