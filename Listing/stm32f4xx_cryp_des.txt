; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\stm32f4xx_cryp_des.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\stm32f4xx_cryp_des.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\stm32f4xx_cryp_des.crf ..\Libraries\FWlib\src\stm32f4xx_cryp_des.c]
                          THUMB

                          AREA ||i.CRYP_DES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_DES_CBC PROC
;;;199      */
;;;200    ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;201                             uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;202    {
000004  b091              SUB      sp,sp,#0x44
000006  4683              MOV      r11,r0
000008  e9dda61a          LDRD     r10,r6,[sp,#0x68]
00000c  460c              MOV      r4,r1
00000e  4691              MOV      r9,r2
000010  461d              MOV      r5,r3
;;;203      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;204      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;205      CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
;;;206      __IO uint32_t counter = 0;
;;;207      uint32_t busystatus = 0;
;;;208      ErrorStatus status = SUCCESS;
000012  f04f0801          MOV      r8,#1
;;;209      uint32_t keyaddr    = (uint32_t)Key;
;;;210      uint32_t inputaddr  = (uint32_t)Input;
;;;211      uint32_t outputaddr = (uint32_t)Output;
;;;212      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;213      uint32_t i = 0;
000016  2700              MOVS     r7,#0
;;;214    
;;;215      /* Crypto structures initialisation*/
;;;216      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000018  a805              ADD      r0,sp,#0x14
00001a  f7fffffe          BL       CRYP_KeyStructInit
;;;217    
;;;218      /* Crypto Init for Encryption process */
;;;219      if(Mode == MODE_ENCRYPT) /* DES encryption */
00001e  f1bb0f01          CMP      r11,#1
000022  d025              BEQ      |L1.112|
;;;220      {
;;;221         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
;;;222      }
;;;223      else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
;;;224      {
;;;225         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000024  2004              MOVS     r0,#4
000026  900d              STR      r0,[sp,#0x34]
                  |L1.40|
;;;226      }
;;;227    
;;;228      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
000028  2018              MOVS     r0,#0x18
00002a  900e              STR      r0,[sp,#0x38]
;;;229      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00002c  2080              MOVS     r0,#0x80
00002e  900f              STR      r0,[sp,#0x3c]
;;;230      CRYP_Init(&DES_CRYP_InitStructure);
000030  a80d              ADD      r0,sp,#0x34
000032  f7fffffe          BL       CRYP_Init
;;;231    
;;;232      /* Key Initialisation */
;;;233      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000036  6820              LDR      r0,[r4,#0]
000038  ba00              REV      r0,r0
00003a  9007              STR      r0,[sp,#0x1c]
;;;234      keyaddr+=4;
;;;235      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00003c  6860              LDR      r0,[r4,#4]
00003e  ba00              REV      r0,r0
000040  9008              STR      r0,[sp,#0x20]
;;;236      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
000042  a805              ADD      r0,sp,#0x14
000044  f7fffffe          BL       CRYP_KeyInit
;;;237    
;;;238      /* Initialization Vectors */
;;;239      DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000048  f8d90000          LDR      r0,[r9,#0]
00004c  ba00              REV      r0,r0
00004e  9001              STR      r0,[sp,#4]
;;;240      ivaddr+=4;
;;;241      DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
000050  f8d90004          LDR      r0,[r9,#4]
000054  ba00              REV      r0,r0
000056  9002              STR      r0,[sp,#8]
;;;242      CRYP_IVInit(&DES_CRYP_IVInitStructure);
000058  a801              ADD      r0,sp,#4
00005a  f7fffffe          BL       CRYP_IVInit
;;;243    
;;;244      /* Flush IN/OUT FIFO */
;;;245      CRYP_FIFOFlush();
00005e  f7fffffe          BL       CRYP_FIFOFlush
;;;246      
;;;247      /* Enable Crypto processor */
;;;248      CRYP_Cmd(ENABLE);
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       CRYP_Cmd
;;;249    
;;;250      if(CRYP_GetCmdStatus() == DISABLE)
000068  f7fffffe          BL       CRYP_GetCmdStatus
00006c  b118              CBZ      r0,|L1.118|
00006e  e025              B        |L1.188|
                  |L1.112|
000070  2000              MOVS     r0,#0                 ;221
000072  900d              STR      r0,[sp,#0x34]         ;221
000074  e7d8              B        |L1.40|
                  |L1.118|
;;;251      {
;;;252        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;253           the CRYP peripheral (please check the device sales type. */
;;;254        return(ERROR);
000076  2000              MOVS     r0,#0
                  |L1.120|
;;;255      }
;;;256      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;257      {
;;;258        /* Write the Input block in the Input FIFO */
;;;259        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;260        inputaddr+=4;
;;;261        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;262        inputaddr+=4;
;;;263    
;;;264        /* Wait until the complete message has been processed */
;;;265        counter = 0;
;;;266        do
;;;267        {
;;;268          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;269          counter++;
;;;270        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
;;;271    
;;;272        if (busystatus != RESET)
;;;273       {
;;;274           status = ERROR;
;;;275        }
;;;276        else
;;;277        {
;;;278          /* Read the Output block from the Output FIFO */
;;;279          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;280          outputaddr+=4;
;;;281          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;282          outputaddr+=4;
;;;283        }
;;;284      }
;;;285    
;;;286      /* Disable Crypto */
;;;287      CRYP_Cmd(DISABLE);
;;;288    
;;;289      return status; 
;;;290    }
000078  b011              ADD      sp,sp,#0x44
00007a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.126|
00007e  6828              LDR      r0,[r5,#0]            ;259
000080  f7fffffe          BL       CRYP_DataIn
000084  1d2d              ADDS     r5,r5,#4              ;260
000086  6828              LDR      r0,[r5,#0]            ;261
000088  f7fffffe          BL       CRYP_DataIn
00008c  1d2d              ADDS     r5,r5,#4              ;262
00008e  2400              MOVS     r4,#0                 ;265
000090  f44f3980          MOV      r9,#0x10000           ;270
                  |L1.148|
000094  2010              MOVS     r0,#0x10              ;268
000096  f7fffffe          BL       CRYP_GetFlagStatus
00009a  1c64              ADDS     r4,r4,#1              ;269
00009c  454c              CMP      r4,r9                 ;270
00009e  d001              BEQ      |L1.164|
0000a0  2800              CMP      r0,#0                 ;270
0000a2  d1f7              BNE      |L1.148|
                  |L1.164|
0000a4  b110              CBZ      r0,|L1.172|
0000a6  f04f0800          MOV      r8,#0                 ;274
0000aa  e006              B        |L1.186|
                  |L1.172|
0000ac  f7fffffe          BL       CRYP_DataOut
0000b0  6030              STR      r0,[r6,#0]            ;279
0000b2  f7fffffe          BL       CRYP_DataOut
0000b6  6070              STR      r0,[r6,#4]            ;281
0000b8  3608              ADDS     r6,r6,#8              ;281
                  |L1.186|
0000ba  3708              ADDS     r7,r7,#8              ;256
                  |L1.188|
0000bc  4557              CMP      r7,r10                ;256
0000be  d202              BCS      |L1.198|
0000c0  f1b80f00          CMP      r8,#0                 ;256
0000c4  d1db              BNE      |L1.126|
                  |L1.198|
0000c6  2000              MOVS     r0,#0                 ;287
0000c8  f7fffffe          BL       CRYP_Cmd
0000cc  4640              MOV      r0,r8                 ;289
0000ce  e7d3              B        |L1.120|
;;;291    
                          ENDP


                          AREA ||i.CRYP_DES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_DES_ECB PROC
;;;98       */
;;;99     ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;100                             uint32_t Ilength, uint8_t *Output)
;;;101    {
000004  b08c              SUB      sp,sp,#0x30
000006  4682              MOV      r10,r0
000008  9e14              LDR      r6,[sp,#0x50]
00000a  460c              MOV      r4,r1
00000c  4615              MOV      r5,r2
00000e  4699              MOV      r9,r3
;;;102      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;103      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;104      __IO uint32_t counter = 0;
;;;105      uint32_t busystatus = 0;
;;;106      ErrorStatus status = SUCCESS;
000010  f04f0801          MOV      r8,#1
;;;107      uint32_t keyaddr    = (uint32_t)Key;
;;;108      uint32_t inputaddr  = (uint32_t)Input;
;;;109      uint32_t outputaddr = (uint32_t)Output;
;;;110      uint32_t i = 0;
000014  2700              MOVS     r7,#0
;;;111    
;;;112      /* Crypto structures initialisation*/
;;;113      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       CRYP_KeyStructInit
;;;114    
;;;115      /* Crypto Init for Encryption process */
;;;116      if( Mode == MODE_ENCRYPT ) /* DES encryption */
00001c  f1ba0f01          CMP      r10,#1
000020  d01a              BEQ      |L2.88|
;;;117      {
;;;118         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
;;;119      }
;;;120      else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
;;;121      {      
;;;122         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000022  2004              MOVS     r0,#4
000024  9008              STR      r0,[sp,#0x20]
                  |L2.38|
;;;123      }
;;;124    
;;;125      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
000026  2010              MOVS     r0,#0x10
000028  9009              STR      r0,[sp,#0x24]
;;;126      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00002a  2080              MOVS     r0,#0x80
00002c  900a              STR      r0,[sp,#0x28]
;;;127      CRYP_Init(&DES_CRYP_InitStructure);
00002e  a808              ADD      r0,sp,#0x20
000030  f7fffffe          BL       CRYP_Init
;;;128    
;;;129      /* Key Initialisation */
;;;130      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000034  6820              LDR      r0,[r4,#0]
000036  ba00              REV      r0,r0
000038  9002              STR      r0,[sp,#8]
;;;131      keyaddr+=4;
;;;132      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00003a  6860              LDR      r0,[r4,#4]
00003c  ba00              REV      r0,r0
00003e  9003              STR      r0,[sp,#0xc]
;;;133      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
000040  4668              MOV      r0,sp
000042  f7fffffe          BL       CRYP_KeyInit
;;;134    
;;;135      /* Flush IN/OUT FIFO */
;;;136      CRYP_FIFOFlush();
000046  f7fffffe          BL       CRYP_FIFOFlush
;;;137    
;;;138      /* Enable Crypto processor */
;;;139      CRYP_Cmd(ENABLE);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       CRYP_Cmd
;;;140    
;;;141      if(CRYP_GetCmdStatus() == DISABLE)
000050  f7fffffe          BL       CRYP_GetCmdStatus
000054  b118              CBZ      r0,|L2.94|
000056  e025              B        |L2.164|
                  |L2.88|
000058  2000              MOVS     r0,#0                 ;118
00005a  9008              STR      r0,[sp,#0x20]         ;118
00005c  e7e3              B        |L2.38|
                  |L2.94|
;;;142      {
;;;143        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;144           the CRYP peripheral (please check the device sales type. */
;;;145        return(ERROR);
00005e  2000              MOVS     r0,#0
                  |L2.96|
;;;146      }
;;;147      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;148      {
;;;149    
;;;150        /* Write the Input block in the Input FIFO */
;;;151        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;152        inputaddr+=4;
;;;153        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;154        inputaddr+=4;
;;;155    
;;;156    /* Wait until the complete message has been processed */
;;;157        counter = 0;
;;;158        do
;;;159        {
;;;160          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;161          counter++;
;;;162        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
;;;163    
;;;164        if (busystatus != RESET)
;;;165       {
;;;166           status = ERROR;
;;;167        }
;;;168        else
;;;169        {
;;;170    
;;;171          /* Read the Output block from the Output FIFO */
;;;172          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;173          outputaddr+=4;
;;;174          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;175          outputaddr+=4;
;;;176        }
;;;177      }
;;;178    
;;;179      /* Disable Crypto */
;;;180      CRYP_Cmd(DISABLE);
;;;181    
;;;182      return status; 
;;;183    }
000060  b00c              ADD      sp,sp,#0x30
000062  e8bd87f0          POP      {r4-r10,pc}
                  |L2.102|
000066  6828              LDR      r0,[r5,#0]            ;151
000068  f7fffffe          BL       CRYP_DataIn
00006c  1d2d              ADDS     r5,r5,#4              ;152
00006e  6828              LDR      r0,[r5,#0]            ;153
000070  f7fffffe          BL       CRYP_DataIn
000074  1d2d              ADDS     r5,r5,#4              ;154
000076  2400              MOVS     r4,#0                 ;157
000078  f44f3a80          MOV      r10,#0x10000          ;162
                  |L2.124|
00007c  2010              MOVS     r0,#0x10              ;160
00007e  f7fffffe          BL       CRYP_GetFlagStatus
000082  1c64              ADDS     r4,r4,#1              ;161
000084  4554              CMP      r4,r10                ;162
000086  d001              BEQ      |L2.140|
000088  2800              CMP      r0,#0                 ;162
00008a  d1f7              BNE      |L2.124|
                  |L2.140|
00008c  b110              CBZ      r0,|L2.148|
00008e  f04f0800          MOV      r8,#0                 ;166
000092  e006              B        |L2.162|
                  |L2.148|
000094  f7fffffe          BL       CRYP_DataOut
000098  6030              STR      r0,[r6,#0]            ;172
00009a  f7fffffe          BL       CRYP_DataOut
00009e  6070              STR      r0,[r6,#4]            ;174
0000a0  3608              ADDS     r6,r6,#8              ;174
                  |L2.162|
0000a2  3708              ADDS     r7,r7,#8              ;147
                  |L2.164|
0000a4  454f              CMP      r7,r9                 ;147
0000a6  d202              BCS      |L2.174|
0000a8  f1b80f00          CMP      r8,#0                 ;147
0000ac  d1db              BNE      |L2.102|
                  |L2.174|
0000ae  2000              MOVS     r0,#0                 ;180
0000b0  f7fffffe          BL       CRYP_Cmd
0000b4  4640              MOV      r0,r8                 ;182
0000b6  e7d3              B        |L2.96|
;;;184    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_cryp_des.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH|
#line 128
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
