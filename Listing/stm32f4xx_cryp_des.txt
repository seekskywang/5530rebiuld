; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_cryp_des.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_cryp_des.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\output\stm32f4xx_cryp_des.crf --no_multibyte_chars ..\Libraries\FWlib\src\stm32f4xx_cryp_des.c]
                          THUMB

                          AREA ||i.CRYP_DES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_DES_CBC PROC
;;;199      */
;;;200    ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;201                             uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;202    {
000004  b091              SUB      sp,sp,#0x44
000006  468a              MOV      r10,r1
000008  e9dd951e          LDRD     r9,r5,[sp,#0x78]
00000c  4693              MOV      r11,r2
00000e  461c              MOV      r4,r3
;;;203      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;204      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;205      CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
;;;206      __IO uint32_t counter = 0;
000010  f04f0800          MOV      r8,#0
000014  f8cd8000          STR      r8,[sp,#0]
;;;207      uint32_t busystatus = 0;
;;;208      ErrorStatus status = SUCCESS;
000018  2701              MOVS     r7,#1
;;;209      uint32_t keyaddr    = (uint32_t)Key;
;;;210      uint32_t inputaddr  = (uint32_t)Input;
;;;211      uint32_t outputaddr = (uint32_t)Output;
;;;212      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;213      uint32_t i = 0;
00001a  2600              MOVS     r6,#0
;;;214    
;;;215      /* Crypto structures initialisation*/
;;;216      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
00001c  a805              ADD      r0,sp,#0x14
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;217    
;;;218      /* Crypto Init for Encryption process */
;;;219      if(Mode == MODE_ENCRYPT) /* DES encryption */
000022  9811              LDR      r0,[sp,#0x44]
000024  2801              CMP      r0,#1
000026  d027              BEQ      |L1.120|
;;;220      {
;;;221         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
;;;222      }
;;;223      else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
;;;224      {
;;;225         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000028  2004              MOVS     r0,#4
00002a  900d              STR      r0,[sp,#0x34]
                  |L1.44|
;;;226      }
;;;227    
;;;228      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
00002c  2018              MOVS     r0,#0x18
00002e  900e              STR      r0,[sp,#0x38]
;;;229      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000030  2080              MOVS     r0,#0x80
000032  900f              STR      r0,[sp,#0x3c]
;;;230      CRYP_Init(&DES_CRYP_InitStructure);
000034  a80d              ADD      r0,sp,#0x34
000036  f7fffffe          BL       CRYP_Init
;;;231    
;;;232      /* Key Initialisation */
;;;233      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003a  f8da0000          LDR      r0,[r10,#0]
00003e  ba00              REV      r0,r0
000040  9007              STR      r0,[sp,#0x1c]
;;;234      keyaddr+=4;
;;;235      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000042  f8da0004          LDR      r0,[r10,#4]
000046  ba00              REV      r0,r0
000048  9008              STR      r0,[sp,#0x20]
;;;236      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
00004a  a805              ADD      r0,sp,#0x14
00004c  f7fffffe          BL       CRYP_KeyInit
;;;237    
;;;238      /* Initialization Vectors */
;;;239      DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000050  f8db0000          LDR      r0,[r11,#0]
000054  ba00              REV      r0,r0
000056  9001              STR      r0,[sp,#4]
;;;240      ivaddr+=4;
;;;241      DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
000058  f8db0004          LDR      r0,[r11,#4]
00005c  ba00              REV      r0,r0
00005e  9002              STR      r0,[sp,#8]
;;;242      CRYP_IVInit(&DES_CRYP_IVInitStructure);
000060  a801              ADD      r0,sp,#4
000062  f7fffffe          BL       CRYP_IVInit
;;;243    
;;;244      /* Flush IN/OUT FIFO */
;;;245      CRYP_FIFOFlush();
000066  f7fffffe          BL       CRYP_FIFOFlush
;;;246      
;;;247      /* Enable Crypto processor */
;;;248      CRYP_Cmd(ENABLE);
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       CRYP_Cmd
;;;249    
;;;250      if(CRYP_GetCmdStatus() == DISABLE)
000070  f7fffffe          BL       CRYP_GetCmdStatus
000074  b118              CBZ      r0,|L1.126|
000076  e028              B        |L1.202|
                  |L1.120|
000078  f8cd8034          STR      r8,[sp,#0x34]         ;221
00007c  e7d6              B        |L1.44|
                  |L1.126|
;;;251      {
;;;252        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;253           the CRYP peripheral (please check the device sales type. */
;;;254        return(ERROR);
00007e  2000              MOVS     r0,#0
                  |L1.128|
;;;255      }
;;;256      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;257      {
;;;258        /* Write the Input block in the Input FIFO */
;;;259        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;260        inputaddr+=4;
;;;261        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;262        inputaddr+=4;
;;;263    
;;;264        /* Wait until the complete message has been processed */
;;;265        counter = 0;
;;;266        do
;;;267        {
;;;268          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;269          counter++;
;;;270        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
;;;271    
;;;272        if (busystatus != RESET)
;;;273       {
;;;274           status = ERROR;
;;;275        }
;;;276        else
;;;277        {
;;;278          /* Read the Output block from the Output FIFO */
;;;279          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;280          outputaddr+=4;
;;;281          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;282          outputaddr+=4;
;;;283        }
;;;284      }
;;;285    
;;;286      /* Disable Crypto */
;;;287      CRYP_Cmd(DISABLE);
;;;288    
;;;289      return status; 
;;;290    }
000080  b015              ADD      sp,sp,#0x54
000082  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.134|
000086  6820              LDR      r0,[r4,#0]            ;259
000088  f7fffffe          BL       CRYP_DataIn
00008c  1d24              ADDS     r4,r4,#4              ;260
00008e  6820              LDR      r0,[r4,#0]            ;261
000090  f7fffffe          BL       CRYP_DataIn
000094  1d24              ADDS     r4,r4,#4              ;262
000096  f8cd8000          STR      r8,[sp,#0]            ;265
00009a  f44f3a80          MOV      r10,#0x10000          ;270
                  |L1.158|
00009e  2010              MOVS     r0,#0x10              ;268
0000a0  f7fffffe          BL       CRYP_GetFlagStatus
0000a4  9900              LDR      r1,[sp,#0]            ;269
0000a6  1c49              ADDS     r1,r1,#1              ;269
0000a8  9100              STR      r1,[sp,#0]            ;269
0000aa  9900              LDR      r1,[sp,#0]            ;270
0000ac  4551              CMP      r1,r10                ;270
0000ae  d001              BEQ      |L1.180|
0000b0  2800              CMP      r0,#0                 ;270
0000b2  d1f4              BNE      |L1.158|
                  |L1.180|
0000b4  b108              CBZ      r0,|L1.186|
0000b6  2700              MOVS     r7,#0                 ;274
0000b8  e006              B        |L1.200|
                  |L1.186|
0000ba  f7fffffe          BL       CRYP_DataOut
0000be  6028              STR      r0,[r5,#0]            ;279
0000c0  f7fffffe          BL       CRYP_DataOut
0000c4  6068              STR      r0,[r5,#4]            ;281
0000c6  3508              ADDS     r5,r5,#8              ;281
                  |L1.200|
0000c8  3608              ADDS     r6,r6,#8              ;256
                  |L1.202|
0000ca  454e              CMP      r6,r9                 ;256
0000cc  d201              BCS      |L1.210|
0000ce  2f00              CMP      r7,#0                 ;256
0000d0  d1d9              BNE      |L1.134|
                  |L1.210|
0000d2  2000              MOVS     r0,#0                 ;287
0000d4  f7fffffe          BL       CRYP_Cmd
0000d8  4638              MOV      r0,r7                 ;289
0000da  e7d1              B        |L1.128|
;;;291    
                          ENDP


                          AREA ||i.CRYP_DES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_DES_ECB PROC
;;;98       */
;;;99     ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;100                             uint32_t Ilength, uint8_t *Output)
;;;101    {
000004  b08d              SUB      sp,sp,#0x34
000006  4683              MOV      r11,r0
000008  9d16              LDR      r5,[sp,#0x58]
00000a  468a              MOV      r10,r1
00000c  4614              MOV      r4,r2
00000e  4699              MOV      r9,r3
;;;102      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;103      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;104      __IO uint32_t counter = 0;
000010  f04f0800          MOV      r8,#0
000014  f8cd8000          STR      r8,[sp,#0]
;;;105      uint32_t busystatus = 0;
;;;106      ErrorStatus status = SUCCESS;
000018  2701              MOVS     r7,#1
;;;107      uint32_t keyaddr    = (uint32_t)Key;
;;;108      uint32_t inputaddr  = (uint32_t)Input;
;;;109      uint32_t outputaddr = (uint32_t)Output;
;;;110      uint32_t i = 0;
00001a  2600              MOVS     r6,#0
;;;111    
;;;112      /* Crypto structures initialisation*/
;;;113      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
00001c  a801              ADD      r0,sp,#4
00001e  f7fffffe          BL       CRYP_KeyStructInit
;;;114    
;;;115      /* Crypto Init for Encryption process */
;;;116      if( Mode == MODE_ENCRYPT ) /* DES encryption */
000022  f1bb0f01          CMP      r11,#1
000026  d01c              BEQ      |L2.98|
;;;117      {
;;;118         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
;;;119      }
;;;120      else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
;;;121      {      
;;;122         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000028  2004              MOVS     r0,#4
00002a  9009              STR      r0,[sp,#0x24]
                  |L2.44|
;;;123      }
;;;124    
;;;125      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
00002c  2010              MOVS     r0,#0x10
00002e  900a              STR      r0,[sp,#0x28]
;;;126      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000030  2080              MOVS     r0,#0x80
000032  900b              STR      r0,[sp,#0x2c]
;;;127      CRYP_Init(&DES_CRYP_InitStructure);
000034  a809              ADD      r0,sp,#0x24
000036  f7fffffe          BL       CRYP_Init
;;;128    
;;;129      /* Key Initialisation */
;;;130      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00003a  f8da0000          LDR      r0,[r10,#0]
00003e  ba00              REV      r0,r0
000040  9003              STR      r0,[sp,#0xc]
;;;131      keyaddr+=4;
;;;132      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000042  f8da0004          LDR      r0,[r10,#4]
000046  ba00              REV      r0,r0
000048  9004              STR      r0,[sp,#0x10]
;;;133      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
00004a  a801              ADD      r0,sp,#4
00004c  f7fffffe          BL       CRYP_KeyInit
;;;134    
;;;135      /* Flush IN/OUT FIFO */
;;;136      CRYP_FIFOFlush();
000050  f7fffffe          BL       CRYP_FIFOFlush
;;;137    
;;;138      /* Enable Crypto processor */
;;;139      CRYP_Cmd(ENABLE);
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       CRYP_Cmd
;;;140    
;;;141      if(CRYP_GetCmdStatus() == DISABLE)
00005a  f7fffffe          BL       CRYP_GetCmdStatus
00005e  b118              CBZ      r0,|L2.104|
000060  e028              B        |L2.180|
                  |L2.98|
000062  f8cd8024          STR      r8,[sp,#0x24]         ;118
000066  e7e1              B        |L2.44|
                  |L2.104|
;;;142      {
;;;143        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;144           the CRYP peripheral (please check the device sales type. */
;;;145        return(ERROR);
000068  2000              MOVS     r0,#0
                  |L2.106|
;;;146      }
;;;147      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;148      {
;;;149    
;;;150        /* Write the Input block in the Input FIFO */
;;;151        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;152        inputaddr+=4;
;;;153        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;154        inputaddr+=4;
;;;155    
;;;156    /* Wait until the complete message has been processed */
;;;157        counter = 0;
;;;158        do
;;;159        {
;;;160          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;161          counter++;
;;;162        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
;;;163    
;;;164        if (busystatus != RESET)
;;;165       {
;;;166           status = ERROR;
;;;167        }
;;;168        else
;;;169        {
;;;170    
;;;171          /* Read the Output block from the Output FIFO */
;;;172          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;173          outputaddr+=4;
;;;174          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;175          outputaddr+=4;
;;;176        }
;;;177      }
;;;178    
;;;179      /* Disable Crypto */
;;;180      CRYP_Cmd(DISABLE);
;;;181    
;;;182      return status; 
;;;183    }
00006a  b00d              ADD      sp,sp,#0x34
00006c  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.112|
000070  6820              LDR      r0,[r4,#0]            ;151
000072  f7fffffe          BL       CRYP_DataIn
000076  1d24              ADDS     r4,r4,#4              ;152
000078  6820              LDR      r0,[r4,#0]            ;153
00007a  f7fffffe          BL       CRYP_DataIn
00007e  1d24              ADDS     r4,r4,#4              ;154
000080  f8cd8000          STR      r8,[sp,#0]            ;157
000084  f44f3a80          MOV      r10,#0x10000          ;162
                  |L2.136|
000088  2010              MOVS     r0,#0x10              ;160
00008a  f7fffffe          BL       CRYP_GetFlagStatus
00008e  9900              LDR      r1,[sp,#0]            ;161
000090  1c49              ADDS     r1,r1,#1              ;161
000092  9100              STR      r1,[sp,#0]            ;161
000094  9900              LDR      r1,[sp,#0]            ;162
000096  4551              CMP      r1,r10                ;162
000098  d001              BEQ      |L2.158|
00009a  2800              CMP      r0,#0                 ;162
00009c  d1f4              BNE      |L2.136|
                  |L2.158|
00009e  b108              CBZ      r0,|L2.164|
0000a0  2700              MOVS     r7,#0                 ;166
0000a2  e006              B        |L2.178|
                  |L2.164|
0000a4  f7fffffe          BL       CRYP_DataOut
0000a8  6028              STR      r0,[r5,#0]            ;172
0000aa  f7fffffe          BL       CRYP_DataOut
0000ae  6068              STR      r0,[r5,#4]            ;174
0000b0  3508              ADDS     r5,r5,#8              ;174
                  |L2.178|
0000b2  3608              ADDS     r6,r6,#8              ;147
                  |L2.180|
0000b4  454e              CMP      r6,r9                 ;147
0000b6  d201              BCS      |L2.188|
0000b8  2f00              CMP      r7,#0                 ;147
0000ba  d1d9              BNE      |L2.112|
                  |L2.188|
0000bc  2000              MOVS     r0,#0                 ;180
0000be  f7fffffe          BL       CRYP_Cmd
0000c2  4638              MOV      r0,r7                 ;182
0000c4  e7d1              B        |L2.106|
;;;184    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_cryp_des.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH|
#line 144
|__asm___20_stm32f4xx_cryp_des_c_9174d91f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
