; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_hash_md5.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_hash_md5.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\output\stm32f4xx_hash_md5.crf --no_multibyte_chars ..\Libraries\FWlib\src\stm32f4xx_hash_md5.c]
                          THUMB

                          AREA ||i.HASH_MD5||, CODE, READONLY, ALIGN=1

                  HASH_MD5 PROC
;;;92       */
;;;93     ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;94     {
000004  b08f              SUB      sp,sp,#0x3c
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
00000a  4616              MOV      r6,r2
;;;95       HASH_InitTypeDef MD5_HASH_InitStructure;
;;;96       HASH_MsgDigest MD5_MessageDigest;
;;;97       __IO uint16_t nbvalidbitsdata = 0;
00000c  f04f0900          MOV      r9,#0
000010  f8cd9008          STR      r9,[sp,#8]
;;;98       uint32_t i = 0;
000014  2500              MOVS     r5,#0
;;;99       __IO uint32_t counter = 0;
000016  f8cd9004          STR      r9,[sp,#4]
;;;100      uint32_t busystatus = 0;
;;;101      ErrorStatus status = SUCCESS;
00001a  2701              MOVS     r7,#1
;;;102      uint32_t inputaddr  = (uint32_t)Input;
;;;103      uint32_t outputaddr = (uint32_t)Output;
;;;104    
;;;105    
;;;106      /* Number of valid bits in last word of the Input data */
;;;107      nbvalidbitsdata = 8 * (Ilen % 4);
00001c  ea4f7088          LSL      r0,r8,#30
000020  0ec0              LSRS     r0,r0,#27
000022  9002              STR      r0,[sp,#8]
;;;108    
;;;109      /* HASH peripheral initialization */
;;;110      HASH_DeInit();
000024  f7fffffe          BL       HASH_DeInit
;;;111    
;;;112      /* HASH Configuration */
;;;113      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
000028  2080              MOVS     r0,#0x80
00002a  900b              STR      r0,[sp,#0x2c]
;;;114      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
00002c  f8cd9030          STR      r9,[sp,#0x30]
;;;115      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000030  2020              MOVS     r0,#0x20
000032  900d              STR      r0,[sp,#0x34]
;;;116      HASH_Init(&MD5_HASH_InitStructure);
000034  a80b              ADD      r0,sp,#0x2c
000036  f7fffffe          BL       HASH_Init
;;;117    
;;;118      /* Configure the number of valid bits in last word of the data */
;;;119      HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
00003a  f8bd0008          LDRH     r0,[sp,#8]
00003e  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;120    
;;;121      /* Write the Input block in the IN FIFO */
;;;122      for(i=0; i<Ilen; i+=4)
000042  e004              B        |L1.78|
                  |L1.68|
;;;123      {
;;;124        HASH_DataIn(*(uint32_t*)inputaddr);
000044  6820              LDR      r0,[r4,#0]
000046  f7fffffe          BL       HASH_DataIn
;;;125        inputaddr+=4;
00004a  1d24              ADDS     r4,r4,#4
00004c  1d2d              ADDS     r5,r5,#4              ;122
                  |L1.78|
00004e  4545              CMP      r5,r8                 ;122
000050  d3f8              BCC      |L1.68|
;;;126      }
;;;127    
;;;128      /* Start the HASH processor */
;;;129      HASH_StartDigest();
000052  f7fffffe          BL       HASH_StartDigest
;;;130    
;;;131      /* wait until the Busy flag is RESET */
;;;132      do
;;;133      {
;;;134        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
;;;135        counter++;
;;;136      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000056  f44f3480          MOV      r4,#0x10000
                  |L1.90|
00005a  2008              MOVS     r0,#8                 ;134
00005c  f7fffffe          BL       HASH_GetFlagStatus
000060  9901              LDR      r1,[sp,#4]            ;135
000062  1c49              ADDS     r1,r1,#1              ;135
000064  9101              STR      r1,[sp,#4]            ;135
000066  9901              LDR      r1,[sp,#4]
000068  42a1              CMP      r1,r4
00006a  d001              BEQ      |L1.112|
00006c  2800              CMP      r0,#0
00006e  d1f4              BNE      |L1.90|
                  |L1.112|
;;;137    
;;;138      if (busystatus != RESET)
000070  b108              CBZ      r0,|L1.118|
;;;139      {
;;;140         status = ERROR;
000072  2700              MOVS     r7,#0
000074  e00e              B        |L1.148|
                  |L1.118|
;;;141      }
;;;142      else
;;;143      {
;;;144        /* Read the message digest */
;;;145        HASH_GetDigest(&MD5_MessageDigest);
000076  a803              ADD      r0,sp,#0xc
000078  f7fffffe          BL       HASH_GetDigest
;;;146        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
00007c  9803              LDR      r0,[sp,#0xc]
00007e  ba00              REV      r0,r0
000080  6030              STR      r0,[r6,#0]
;;;147        outputaddr+=4;
;;;148        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
000082  9804              LDR      r0,[sp,#0x10]
000084  ba00              REV      r0,r0
000086  6070              STR      r0,[r6,#4]
;;;149        outputaddr+=4;
;;;150        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
000088  9805              LDR      r0,[sp,#0x14]
00008a  ba00              REV      r0,r0
00008c  60b0              STR      r0,[r6,#8]
;;;151        outputaddr+=4;
;;;152        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
00008e  9806              LDR      r0,[sp,#0x18]
000090  ba00              REV      r0,r0
000092  60f0              STR      r0,[r6,#0xc]
                  |L1.148|
;;;153      }
;;;154      return status; 
;;;155    }
000094  b00f              ADD      sp,sp,#0x3c
000096  4638              MOV      r0,r7                 ;154
000098  e8bd83f0          POP      {r4-r9,pc}
;;;156    
                          ENDP


                          AREA ||i.HMAC_MD5||, CODE, READONLY, ALIGN=1

                  HMAC_MD5 PROC
;;;167      */
;;;168    ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;169                         uint32_t Ilen, uint8_t Output[16])
;;;170    {
000004  b08f              SUB      sp,sp,#0x3c
000006  460f              MOV      r7,r1
000008  f8dd9070          LDR      r9,[sp,#0x70]
00000c  4614              MOV      r4,r2
00000e  469b              MOV      r11,r3
;;;171      HASH_InitTypeDef MD5_HASH_InitStructure;
;;;172      HASH_MsgDigest MD5_MessageDigest;
;;;173      __IO uint16_t nbvalidbitsdata = 0;
000010  f04f0a00          MOV      r10,#0
000014  f8cda008          STR      r10,[sp,#8]
;;;174      __IO uint16_t nbvalidbitskey = 0;
000018  f8cda004          STR      r10,[sp,#4]
;;;175      uint32_t i = 0;
00001c  2600              MOVS     r6,#0
;;;176      __IO uint32_t counter = 0;
00001e  f8cda000          STR      r10,[sp,#0]
;;;177      uint32_t busystatus = 0;
;;;178      ErrorStatus status = SUCCESS;
000022  f04f0801          MOV      r8,#1
;;;179      uint32_t keyaddr    = (uint32_t)Key;
000026  9d0f              LDR      r5,[sp,#0x3c]
;;;180      uint32_t inputaddr  = (uint32_t)Input;
;;;181      uint32_t outputaddr = (uint32_t)Output;
;;;182    
;;;183      /* Number of valid bits in last word of the Input data */
;;;184      nbvalidbitsdata = 8 * (Ilen % 4);
000028  ea4f708b          LSL      r0,r11,#30
00002c  0ec0              LSRS     r0,r0,#27
00002e  9002              STR      r0,[sp,#8]
;;;185    
;;;186      /* Number of valid bits in last word of the Key */
;;;187      nbvalidbitskey = 8 * (Keylen % 4);
000030  07b8              LSLS     r0,r7,#30
000032  0ec0              LSRS     r0,r0,#27
000034  9001              STR      r0,[sp,#4]
;;;188       
;;;189      /* HASH peripheral initialization */
;;;190      HASH_DeInit();
000036  f7fffffe          BL       HASH_DeInit
;;;191    
;;;192      /* HASH Configuration */
;;;193      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
00003a  2080              MOVS     r0,#0x80
00003c  900b              STR      r0,[sp,#0x2c]
;;;194      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
00003e  2040              MOVS     r0,#0x40
000040  900c              STR      r0,[sp,#0x30]
;;;195      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000042  2020              MOVS     r0,#0x20
000044  900d              STR      r0,[sp,#0x34]
;;;196      if(Keylen > 64)
000046  2f40              CMP      r7,#0x40
000048  d902              BLS      |L2.80|
;;;197      {
;;;198        /* HMAC long Key */
;;;199        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
00004a  02c0              LSLS     r0,r0,#11
00004c  900e              STR      r0,[sp,#0x38]
00004e  e001              B        |L2.84|
                  |L2.80|
;;;200      }
;;;201      else
;;;202      {
;;;203        /* HMAC short Key */
;;;204        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
000050  f8cda038          STR      r10,[sp,#0x38]
                  |L2.84|
;;;205      }
;;;206      HASH_Init(&MD5_HASH_InitStructure);
000054  a80b              ADD      r0,sp,#0x2c
000056  f7fffffe          BL       HASH_Init
;;;207    
;;;208      /* Configure the number of valid bits in last word of the Key */
;;;209      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
00005a  f8bd0004          LDRH     r0,[sp,#4]
00005e  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;210    
;;;211      /* Write the Key */
;;;212      for(i=0; i<Keylen; i+=4)
000062  e004              B        |L2.110|
                  |L2.100|
;;;213      {
;;;214        HASH_DataIn(*(uint32_t*)keyaddr);
000064  6828              LDR      r0,[r5,#0]
000066  f7fffffe          BL       HASH_DataIn
;;;215        keyaddr+=4;
00006a  1d2d              ADDS     r5,r5,#4
00006c  1d36              ADDS     r6,r6,#4              ;212
                  |L2.110|
00006e  42be              CMP      r6,r7                 ;212
000070  d3f8              BCC      |L2.100|
;;;216      }
;;;217      
;;;218      /* Start the HASH processor */
;;;219      HASH_StartDigest();
000072  f7fffffe          BL       HASH_StartDigest
000076  f44f3580          MOV      r5,#0x10000           ;199
                  |L2.122|
;;;220    
;;;221      /* wait until the Busy flag is RESET */
;;;222      do
;;;223      {
;;;224        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
00007a  2008              MOVS     r0,#8
00007c  f7fffffe          BL       HASH_GetFlagStatus
;;;225        counter++;
000080  9900              LDR      r1,[sp,#0]
000082  1c49              ADDS     r1,r1,#1
000084  9100              STR      r1,[sp,#0]
;;;226      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000086  9900              LDR      r1,[sp,#0]
000088  42a9              CMP      r1,r5
00008a  d001              BEQ      |L2.144|
00008c  2800              CMP      r0,#0
00008e  d1f4              BNE      |L2.122|
                  |L2.144|
;;;227    
;;;228      if (busystatus != RESET)
000090  b110              CBZ      r0,|L2.152|
;;;229      {
;;;230         status = ERROR;
000092  f04f0800          MOV      r8,#0
000096  e053              B        |L2.320|
                  |L2.152|
;;;231      }
;;;232      else
;;;233      {
;;;234        /* Configure the number of valid bits in last word of the Input data */
;;;235        HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
000098  f8bd0008          LDRH     r0,[sp,#8]
00009c  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;236    
;;;237        /* Write the Input block in the IN FIFO */
;;;238        for(i=0; i<Ilen; i+=4)
0000a0  2600              MOVS     r6,#0
0000a2  e004              B        |L2.174|
                  |L2.164|
;;;239        {
;;;240          HASH_DataIn(*(uint32_t*)inputaddr);
0000a4  6820              LDR      r0,[r4,#0]
0000a6  f7fffffe          BL       HASH_DataIn
;;;241          inputaddr+=4;
0000aa  1d24              ADDS     r4,r4,#4
0000ac  1d36              ADDS     r6,r6,#4              ;238
                  |L2.174|
0000ae  455e              CMP      r6,r11                ;238
0000b0  d3f8              BCC      |L2.164|
;;;242        }
;;;243    
;;;244        /* Start the HASH processor */
;;;245        HASH_StartDigest();
0000b2  f7fffffe          BL       HASH_StartDigest
;;;246    
;;;247        /* wait until the Busy flag is RESET */
;;;248        counter =0;
0000b6  f8cda000          STR      r10,[sp,#0]
                  |L2.186|
;;;249        do
;;;250        {
;;;251           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000ba  2008              MOVS     r0,#8
0000bc  f7fffffe          BL       HASH_GetFlagStatus
;;;252           counter++;
0000c0  9900              LDR      r1,[sp,#0]
0000c2  1c49              ADDS     r1,r1,#1
0000c4  9100              STR      r1,[sp,#0]
;;;253        }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
0000c6  9900              LDR      r1,[sp,#0]
0000c8  42a9              CMP      r1,r5
0000ca  d001              BEQ      |L2.208|
0000cc  2800              CMP      r0,#0
0000ce  d1f4              BNE      |L2.186|
                  |L2.208|
;;;254    
;;;255        if (busystatus != RESET)
0000d0  b110              CBZ      r0,|L2.216|
;;;256        {
;;;257          status = ERROR;
0000d2  f04f0800          MOV      r8,#0
0000d6  e033              B        |L2.320|
                  |L2.216|
;;;258        }
;;;259        else
;;;260        {  
;;;261          /* Configure the number of valid bits in last word of the Key */
;;;262          HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
0000d8  f8bd0004          LDRH     r0,[sp,#4]
0000dc  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;263    
;;;264          /* Write the Key */
;;;265          keyaddr = (uint32_t)Key;
0000e0  9c0f              LDR      r4,[sp,#0x3c]
;;;266          for(i=0; i<Keylen; i+=4)
0000e2  2600              MOVS     r6,#0
0000e4  e004              B        |L2.240|
                  |L2.230|
;;;267          {
;;;268            HASH_DataIn(*(uint32_t*)keyaddr);
0000e6  6820              LDR      r0,[r4,#0]
0000e8  f7fffffe          BL       HASH_DataIn
;;;269            keyaddr+=4;
0000ec  1d24              ADDS     r4,r4,#4
0000ee  1d36              ADDS     r6,r6,#4              ;266
                  |L2.240|
0000f0  42be              CMP      r6,r7                 ;266
0000f2  d3f8              BCC      |L2.230|
;;;270          }
;;;271      
;;;272           /* Start the HASH processor */
;;;273           HASH_StartDigest();
0000f4  f7fffffe          BL       HASH_StartDigest
;;;274    
;;;275           /* wait until the Busy flag is RESET */
;;;276           counter =0;
0000f8  f8cda000          STR      r10,[sp,#0]
                  |L2.252|
;;;277           do
;;;278           {
;;;279              busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000fc  2008              MOVS     r0,#8
0000fe  f7fffffe          BL       HASH_GetFlagStatus
;;;280              counter++;
000102  9900              LDR      r1,[sp,#0]
000104  1c49              ADDS     r1,r1,#1
000106  9100              STR      r1,[sp,#0]
;;;281          }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000108  9900              LDR      r1,[sp,#0]
00010a  42a9              CMP      r1,r5
00010c  d001              BEQ      |L2.274|
00010e  2800              CMP      r0,#0
000110  d1f4              BNE      |L2.252|
                  |L2.274|
;;;282    
;;;283          if (busystatus != RESET)
000112  b110              CBZ      r0,|L2.282|
;;;284          {
;;;285             status = ERROR;
000114  f04f0800          MOV      r8,#0
000118  e012              B        |L2.320|
                  |L2.282|
;;;286          }
;;;287          else
;;;288          {
;;;289             /* Read the message digest */
;;;290             HASH_GetDigest(&MD5_MessageDigest);
00011a  a803              ADD      r0,sp,#0xc
00011c  f7fffffe          BL       HASH_GetDigest
;;;291             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
000120  9803              LDR      r0,[sp,#0xc]
000122  ba00              REV      r0,r0
000124  f8c90000          STR      r0,[r9,#0]
;;;292             outputaddr+=4;
;;;293             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
000128  9804              LDR      r0,[sp,#0x10]
00012a  ba00              REV      r0,r0
00012c  f8c90004          STR      r0,[r9,#4]
;;;294             outputaddr+=4;
;;;295             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
000130  9805              LDR      r0,[sp,#0x14]
000132  ba00              REV      r0,r0
000134  f8c90008          STR      r0,[r9,#8]
;;;296             outputaddr+=4;
;;;297             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
000138  9806              LDR      r0,[sp,#0x18]
00013a  ba00              REV      r0,r0
00013c  f8c9000c          STR      r0,[r9,#0xc]
                  |L2.320|
;;;298          }
;;;299        }
;;;300      }
;;;301      return status;  
;;;302    }
000140  b013              ADD      sp,sp,#0x4c
000142  4640              MOV      r0,r8                 ;301
000144  e8bd8ff0          POP      {r4-r11,pc}
;;;303    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_hash_md5.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REVSH|
#line 144
|__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
